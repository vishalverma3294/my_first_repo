
LittleBrainFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800c660  0800c660  0001c660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c928  0800c928  00020390  2**0
                  CONTENTS
  4 .ARM          00000008  0800c928  0800c928  0001c928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c930  0800c930  00020390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c930  0800c930  0001c930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c934  0800c934  0001c934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000390  20000000  0800c938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c88  20000390  0800ccc8  00020390  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002018  0800ccc8  00022018  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae52  00000000  00000000  000203c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039ed  00000000  00000000  0003b212  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e0  00000000  00000000  0003ec00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001228  00000000  00000000  0003ffe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022caa  00000000  00000000  00041208  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012288  00000000  00000000  00063eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2cff  00000000  00000000  0007613a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138e39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c00  00000000  00000000  00138eb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000390 	.word	0x20000390
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c648 	.word	0x0800c648

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000394 	.word	0x20000394
 80001cc:	0800c648 	.word	0x0800c648

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	887a      	ldrh	r2, [r7, #2]
 8000ec6:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6a3a      	ldr	r2, [r7, #32]
 8000ecc:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000ed2:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2200      	movs	r2, #0
 8000ede:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	75fb      	strb	r3, [r7, #23]
	 * ACCELEROMETER
	 *
	 */

	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6858      	ldr	r0, [r3, #4]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	899b      	ldrh	r3, [r3, #12]
 8000eec:	2200      	movs	r2, #0
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f002 fbfa 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f001 fd99 	bl	8002a2c <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6858      	ldr	r0, [r3, #4]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	899b      	ldrh	r3, [r3, #12]
 8000f02:	2201      	movs	r2, #1
 8000f04:	4619      	mov	r1, r3
 8000f06:	f002 fbef 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000f0a:	2032      	movs	r0, #50	; 0x32
 8000f0c:	f001 fd8e 	bl	8002a2c <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8000f10:	22b6      	movs	r2, #182	; 0xb6
 8000f12:	217e      	movs	r1, #126	; 0x7e
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f000 f959 	bl	80011cc <BMI088_WriteAccRegister>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	7dfb      	ldrb	r3, [r7, #23]
 8000f20:	4413      	add	r3, r2
 8000f22:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8000f24:	2032      	movs	r0, #50	; 0x32
 8000f26:	f001 fd81 	bl	8002a2c <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8000f2a:	f107 0316 	add.w	r3, r7, #22
 8000f2e:	461a      	mov	r2, r3
 8000f30:	2100      	movs	r1, #0
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	f000 f8d0 	bl	80010d8 <BMI088_ReadAccRegister>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	7dfb      	ldrb	r3, [r7, #23]
 8000f3e:	4413      	add	r3, r2
 8000f40:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x1E) {

	//	return 0;

	}
	HAL_Delay(10);
 8000f42:	200a      	movs	r0, #10
 8000f44:	f001 fd72 	bl	8002a2c <HAL_Delay>

	/* Configure accelerometer  */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA8); /* (no oversampling, ODR = 100 Hz, BW = 40 Hz) */
 8000f48:	22a8      	movs	r2, #168	; 0xa8
 8000f4a:	2140      	movs	r1, #64	; 0x40
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f000 f93d 	bl	80011cc <BMI088_WriteAccRegister>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
 8000f58:	4413      	add	r3, r2
 8000f5a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f001 fd65 	bl	8002a2c <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 8000f62:	2200      	movs	r2, #0
 8000f64:	2141      	movs	r1, #65	; 0x41
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f000 f930 	bl	80011cc <BMI088_WriteAccRegister>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	4413      	add	r3, r2
 8000f74:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f76:	200a      	movs	r0, #10
 8000f78:	f001 fd58 	bl	8002a2c <HAL_Delay>

	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8000f7c:	220a      	movs	r2, #10
 8000f7e:	2153      	movs	r1, #83	; 0x53
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 f923 	bl	80011cc <BMI088_WriteAccRegister>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	7dfb      	ldrb	r3, [r7, #23]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000f90:	200a      	movs	r0, #10
 8000f92:	f001 fd4b 	bl	8002a2c <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);
 8000f96:	2204      	movs	r2, #4
 8000f98:	2158      	movs	r1, #88	; 0x58
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f000 f916 	bl	80011cc <BMI088_WriteAccRegister>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	7dfb      	ldrb	r3, [r7, #23]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000faa:	200a      	movs	r0, #10
 8000fac:	f001 fd3e 	bl	8002a2c <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	217c      	movs	r1, #124	; 0x7c
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f000 f909 	bl	80011cc <BMI088_WriteAccRegister>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000fc4:	200a      	movs	r0, #10
 8000fc6:	f001 fd31 	bl	8002a2c <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 8000fca:	2204      	movs	r2, #4
 8000fcc:	217d      	movs	r1, #125	; 0x7d
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 f8fc 	bl	80011cc <BMI088_WriteAccRegister>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	4413      	add	r3, r2
 8000fdc:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8000fde:	200a      	movs	r0, #10
 8000fe0:	f001 fd24 	bl	8002a2c <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2) */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4a3a      	ldr	r2, [pc, #232]	; (80010d0 <BMI088_Init+0x228>)
 8000fe8:	631a      	str	r2, [r3, #48]	; 0x30
	
	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2292      	movs	r2, #146	; 0x92
 8000fee:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6898      	ldr	r0, [r3, #8]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	89db      	ldrh	r3, [r3, #14]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f002 fb74 	bl	80036e8 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8001000:	22b6      	movs	r2, #182	; 0xb6
 8001002:	2114      	movs	r1, #20
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f000 f91b 	bl	8001240 <BMI088_WriteGyrRegister>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	4413      	add	r3, r2
 8001012:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 8001014:	20fa      	movs	r0, #250	; 0xfa
 8001016:	f001 fd09 	bl	8002a2c <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 800101a:	f107 0316 	add.w	r3, r7, #22
 800101e:	461a      	mov	r2, r3
 8001020:	2100      	movs	r1, #0
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f000 f896 	bl	8001154 <BMI088_ReadGyrRegister>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	7dfb      	ldrb	r3, [r7, #23]
 800102e:	4413      	add	r3, r2
 8001030:	75fb      	strb	r3, [r7, #23]
	if (chipID != 0x0F) {

		//return 0;

	}
	HAL_Delay(10);
 8001032:	200a      	movs	r0, #10
 8001034:	f001 fcfa 	bl	8002a2c <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8001038:	2201      	movs	r2, #1
 800103a:	210f      	movs	r1, #15
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f000 f8ff 	bl	8001240 <BMI088_WriteGyrRegister>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	4413      	add	r3, r2
 800104a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800104c:	200a      	movs	r0, #10
 800104e:	f001 fced 	bl	8002a2c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x07); /* ODR = 100 Hz, Filter bandwidth = 32 Hz */
 8001052:	2207      	movs	r2, #7
 8001054:	2110      	movs	r1, #16
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f000 f8f2 	bl	8001240 <BMI088_WriteGyrRegister>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	4413      	add	r3, r2
 8001064:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001066:	200a      	movs	r0, #10
 8001068:	f001 fce0 	bl	8002a2c <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	2115      	movs	r1, #21
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 f8e5 	bl	8001240 <BMI088_WriteGyrRegister>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	7dfb      	ldrb	r3, [r7, #23]
 800107c:	4413      	add	r3, r2
 800107e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8001080:	200a      	movs	r0, #10
 8001082:	f001 fcd3 	bl	8002a2c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8001086:	2201      	movs	r2, #1
 8001088:	2116      	movs	r1, #22
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f000 f8d8 	bl	8001240 <BMI088_WriteGyrRegister>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	7dfb      	ldrb	r3, [r7, #23]
 8001096:	4413      	add	r3, r2
 8001098:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800109a:	200a      	movs	r0, #10
 800109c:	f001 fcc6 	bl	8002a2c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 80010a0:	2201      	movs	r2, #1
 80010a2:	2118      	movs	r1, #24
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f000 f8cb 	bl	8001240 <BMI088_WriteGyrRegister>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	7dfb      	ldrb	r3, [r7, #23]
 80010b0:	4413      	add	r3, r2
 80010b2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80010b4:	200a      	movs	r0, #10
 80010b6:	f001 fcb9 	bl	8002a2c <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) */
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <BMI088_Init+0x22c>)
 80010be:	635a      	str	r2, [r3, #52]	; 0x34
	
	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2282      	movs	r2, #130	; 0x82
 80010c4:	769a      	strb	r2, [r3, #26]

	return status;
 80010c6:	7dfb      	ldrb	r3, [r7, #23]

}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	3a6b70a4 	.word	0x3a6b70a4
 80010d4:	3a0ba058 	.word	0x3a0ba058

080010d8 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af02      	add	r7, sp, #8
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 80010e6:	7afb      	ldrb	r3, [r7, #11]
 80010e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	753b      	strb	r3, [r7, #20]
 80010f0:	2300      	movs	r3, #0
 80010f2:	757b      	strb	r3, [r7, #21]
 80010f4:	2300      	movs	r3, #0
 80010f6:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6858      	ldr	r0, [r3, #4]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	899b      	ldrh	r3, [r3, #12]
 8001100:	2200      	movs	r2, #0
 8001102:	4619      	mov	r1, r3
 8001104:	f002 faf0 	bl	80036e8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	f107 0210 	add.w	r2, r7, #16
 8001110:	f107 0114 	add.w	r1, r7, #20
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2303      	movs	r3, #3
 800111c:	f004 fa6a 	bl	80055f4 <HAL_SPI_TransmitReceive>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	bf0c      	ite	eq
 8001126:	2301      	moveq	r3, #1
 8001128:	2300      	movne	r3, #0
 800112a:	b2db      	uxtb	r3, r3
 800112c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6858      	ldr	r0, [r3, #4]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	899b      	ldrh	r3, [r3, #12]
 8001136:	2201      	movs	r2, #1
 8001138:	4619      	mov	r1, r3
 800113a:	f002 fad5 	bl	80036e8 <HAL_GPIO_WritePin>

	if (status == 1) {
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d102      	bne.n	800114a <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8001144:	7cba      	ldrb	r2, [r7, #18]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800114a:	7dfb      	ldrb	r3, [r7, #23]

}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af02      	add	r7, sp, #8
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	460b      	mov	r3, r1
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00};
 8001162:	7afb      	ldrb	r3, [r7, #11]
 8001164:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001168:	b2db      	uxtb	r3, r3
 800116a:	753b      	strb	r3, [r7, #20]
 800116c:	2300      	movs	r3, #0
 800116e:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6898      	ldr	r0, [r3, #8]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	89db      	ldrh	r3, [r3, #14]
 8001178:	2200      	movs	r2, #0
 800117a:	4619      	mov	r1, r3
 800117c:	f002 fab4 	bl	80036e8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	f107 0210 	add.w	r2, r7, #16
 8001188:	f107 0114 	add.w	r1, r7, #20
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2302      	movs	r3, #2
 8001194:	f004 fa2e 	bl	80055f4 <HAL_SPI_TransmitReceive>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	bf0c      	ite	eq
 800119e:	2301      	moveq	r3, #1
 80011a0:	2300      	movne	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6898      	ldr	r0, [r3, #8]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	89db      	ldrh	r3, [r3, #14]
 80011ae:	2201      	movs	r2, #1
 80011b0:	4619      	mov	r1, r3
 80011b2:	f002 fa99 	bl	80036e8 <HAL_GPIO_WritePin>

	if (status == 1) {
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d102      	bne.n	80011c2 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 80011bc:	7c7a      	ldrb	r2, [r7, #17]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80011c2:	7dfb      	ldrb	r3, [r7, #23]

}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	70fb      	strb	r3, [r7, #3]
 80011d8:	4613      	mov	r3, r2
 80011da:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	733b      	strb	r3, [r7, #12]
 80011e0:	78bb      	ldrb	r3, [r7, #2]
 80011e2:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6858      	ldr	r0, [r3, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	899b      	ldrh	r3, [r3, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	4619      	mov	r1, r3
 80011f0:	f002 fa7a 	bl	80036e8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	f107 010c 	add.w	r1, r7, #12
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001200:	2202      	movs	r2, #2
 8001202:	f004 f8c3 	bl	800538c <HAL_SPI_Transmit>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	bf0c      	ite	eq
 800120c:	2301      	moveq	r3, #1
 800120e:	2300      	movne	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001214:	bf00      	nop
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f004 fdb6 	bl	8005d8c <HAL_SPI_GetState>
 8001220:	4603      	mov	r3, r0
 8001222:	2b01      	cmp	r3, #1
 8001224:	d1f7      	bne.n	8001216 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6858      	ldr	r0, [r3, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	899b      	ldrh	r3, [r3, #12]
 800122e:	2201      	movs	r2, #1
 8001230:	4619      	mov	r1, r3
 8001232:	f002 fa59 	bl	80036e8 <HAL_GPIO_WritePin>

	return status;
 8001236:	7bfb      	ldrb	r3, [r7, #15]

}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	70fb      	strb	r3, [r7, #3]
 800124c:	4613      	mov	r3, r2
 800124e:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	733b      	strb	r3, [r7, #12]
 8001254:	78bb      	ldrb	r3, [r7, #2]
 8001256:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6898      	ldr	r0, [r3, #8]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	89db      	ldrh	r3, [r3, #14]
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	f002 fa40 	bl	80036e8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	f107 010c 	add.w	r1, r7, #12
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	2202      	movs	r2, #2
 8001276:	f004 f889 	bl	800538c <HAL_SPI_Transmit>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf0c      	ite	eq
 8001280:	2301      	moveq	r3, #1
 8001282:	2300      	movne	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8001288:	bf00      	nop
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f004 fd7c 	bl	8005d8c <HAL_SPI_GetState>
 8001294:	4603      	mov	r3, r0
 8001296:	2b01      	cmp	r3, #1
 8001298:	d1f7      	bne.n	800128a <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6898      	ldr	r0, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	89db      	ldrh	r3, [r3, #14]
 80012a2:	2201      	movs	r2, #1
 80012a4:	4619      	mov	r1, r3
 80012a6:	f002 fa1f 	bl	80036e8 <HAL_GPIO_WritePin>

	return status;
 80012aa:	7bfb      	ldrb	r3, [r7, #15]

}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <BMI088_ReadAccelerometerDMA>:
/*
 *
 * DMA
 *
 */
uint8_t BMI088_ReadAccelerometerDMA(BMI088 *imu) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6858      	ldr	r0, [r3, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	899b      	ldrh	r3, [r3, #12]
 80012c4:	2200      	movs	r2, #0
 80012c6:	4619      	mov	r1, r3
 80012c8:	f002 fa0e 	bl	80036e8 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->accTxBuf, (uint8_t *) imu->accRxBuf, 8) == HAL_OK) {
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6818      	ldr	r0, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f103 0112 	add.w	r1, r3, #18
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f103 0221 	add.w	r2, r3, #33	; 0x21
 80012dc:	2308      	movs	r3, #8
 80012de:	f004 fb2b 	bl	8005938 <HAL_SPI_TransmitReceive_DMA>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d104      	bne.n	80012f2 <BMI088_ReadAccelerometerDMA+0x3e>

		imu->readingAcc = 1;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	741a      	strb	r2, [r3, #16]
		return 1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e008      	b.n	8001304 <BMI088_ReadAccelerometerDMA+0x50>

	} else {

		HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6858      	ldr	r0, [r3, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	899b      	ldrh	r3, [r3, #12]
 80012fa:	2201      	movs	r2, #1
 80012fc:	4619      	mov	r1, r3
 80012fe:	f002 f9f3 	bl	80036e8 <HAL_GPIO_WritePin>
		return 0;
 8001302:	2300      	movs	r3, #0

	}

}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <BMI088_ReadAccelerometerDMA_Complete>:

void BMI088_ReadAccelerometerDMA_Complete(BMI088 *imu) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6858      	ldr	r0, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	899b      	ldrh	r3, [r3, #12]
 800131c:	2201      	movs	r2, #1
 800131e:	4619      	mov	r1, r3
 8001320:	f002 f9e2 	bl	80036e8 <HAL_GPIO_WritePin>
	imu->readingAcc = 0;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	741a      	strb	r2, [r3, #16]

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((imu->accRxBuf[3] << 8) | imu->accRxBuf[2]);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001330:	b2db      	uxtb	r3, r3
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800133c:	b2db      	uxtb	r3, r3
 800133e:	b21b      	sxth	r3, r3
 8001340:	4313      	orrs	r3, r2
 8001342:	81fb      	strh	r3, [r7, #14]
	int16_t accY = (int16_t) ((imu->accRxBuf[5] << 8) | imu->accRxBuf[4]);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800134a:	b2db      	uxtb	r3, r3
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21a      	sxth	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001356:	b2db      	uxtb	r3, r3
 8001358:	b21b      	sxth	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	81bb      	strh	r3, [r7, #12]
	int16_t accZ = (int16_t) ((imu->accRxBuf[7] << 8) | imu->accRxBuf[6]);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001364:	b2db      	uxtb	r3, r3
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	b21a      	sxth	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001370:	b2db      	uxtb	r3, r3
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	817b      	strh	r3, [r7, #10]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800137e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800139a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80013b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

}
 80013cc:	bf00      	nop
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <BMI088_ReadGyroscopeDMA>:

uint8_t BMI088_ReadGyroscopeDMA(BMI088 *imu) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6898      	ldr	r0, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	89db      	ldrh	r3, [r3, #14]
 80013e4:	2200      	movs	r2, #0
 80013e6:	4619      	mov	r1, r3
 80013e8:	f002 f97e 	bl	80036e8 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, imu->gyrTxBuf, (uint8_t *) imu->gyrRxBuf, 7) == HAL_OK) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f103 011a 	add.w	r1, r3, #26
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f103 0229 	add.w	r2, r3, #41	; 0x29
 80013fc:	2307      	movs	r3, #7
 80013fe:	f004 fa9b 	bl	8005938 <HAL_SPI_TransmitReceive_DMA>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d104      	bne.n	8001412 <BMI088_ReadGyroscopeDMA+0x3e>

		imu->readingGyr = 1;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	745a      	strb	r2, [r3, #17]
		return 1;
 800140e:	2301      	movs	r3, #1
 8001410:	e008      	b.n	8001424 <BMI088_ReadGyroscopeDMA+0x50>

	} else {

		HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6898      	ldr	r0, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	89db      	ldrh	r3, [r3, #14]
 800141a:	2201      	movs	r2, #1
 800141c:	4619      	mov	r1, r3
 800141e:	f002 f963 	bl	80036e8 <HAL_GPIO_WritePin>
		return 0;
 8001422:	2300      	movs	r3, #0

	}

}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <BMI088_ReadGyroscopeDMA_Complete>:

void BMI088_ReadGyroscopeDMA_Complete(BMI088 *imu) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6898      	ldr	r0, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	89db      	ldrh	r3, [r3, #14]
 800143c:	2201      	movs	r2, #1
 800143e:	4619      	mov	r1, r3
 8001440:	f002 f952 	bl	80036e8 <HAL_GPIO_WritePin>
	imu->readingGyr = 0;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	745a      	strb	r2, [r3, #17]

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((imu->gyrRxBuf[2] << 8) | imu->gyrRxBuf[1]);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001450:	b2db      	uxtb	r3, r3
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	b21a      	sxth	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800145c:	b2db      	uxtb	r3, r3
 800145e:	b21b      	sxth	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	81fb      	strh	r3, [r7, #14]
	int16_t gyrY = (int16_t) ((imu->gyrRxBuf[4] << 8) | imu->gyrRxBuf[3]);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800146a:	b2db      	uxtb	r3, r3
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b21a      	sxth	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001476:	b2db      	uxtb	r3, r3
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	81bb      	strh	r3, [r7, #12]
	int16_t gyrZ = (int16_t) ((imu->gyrRxBuf[6] << 8) | imu->gyrRxBuf[5]);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001484:	b2db      	uxtb	r3, r3
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b21a      	sxth	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001490:	b2db      	uxtb	r3, r3
 8001492:	b21b      	sxth	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	817b      	strh	r3, [r7, #10]

	/* Convert to deg/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800149e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80014ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80014d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014da:	ee07 3a90 	vmov	s15, r3
 80014de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <SPL06_Init>:
/*
 *
 * INITIALISATION
 *
 */
uint8_t SPL06_Init(SPL06 *bar, SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *csPinBank, uint16_t csPin) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b092      	sub	sp, #72	; 0x48
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	807b      	strh	r3, [r7, #2]

	uint8_t status = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/* Store peripheral data */
	bar->spiHandle = spiHandle;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	601a      	str	r2, [r3, #0]
	bar->csPinBank = csPinBank;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	605a      	str	r2, [r3, #4]
	bar->csPin	   = csPin;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	811a      	strh	r2, [r3, #8]

	/* Sensor requires LOW on CS pin to put into SPI mode (see datasheet 5.3.2) */
	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6858      	ldr	r0, [r3, #4]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	891b      	ldrh	r3, [r3, #8]
 8001522:	2200      	movs	r2, #0
 8001524:	4619      	mov	r1, r3
 8001526:	f002 f8df 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800152a:	200a      	movs	r0, #10
 800152c:	f001 fa7e 	bl	8002a2c <HAL_Delay>

	/* Clear measurements */
	bar->pressure_Pa   = 0.0f;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
	bar->temperature_C = 0.0f;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	631a      	str	r2, [r3, #48]	; 0x30

	uint8_t txBuf[2] = {0x00, 0x00};
 8001540:	2300      	movs	r3, #0
 8001542:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001546:	2300      	movs	r3, #0
 8001548:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t rxBuf[2];

	/* Check device ID */
	uint8_t id;

	txBuf[0] = SPL06_ID | 0x80;
 800154c:	238d      	movs	r3, #141	; 0x8d
 800154e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6858      	ldr	r0, [r3, #4]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	891b      	ldrh	r3, [r3, #8]
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	f002 f8c3 	bl	80036e8 <HAL_GPIO_WritePin>
	status += (HAL_SPI_TransmitReceive(bar->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800156a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2302      	movs	r3, #2
 8001576:	f004 f83d 	bl	80055f4 <HAL_SPI_TransmitReceive>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf0c      	ite	eq
 8001580:	2301      	moveq	r3, #1
 8001582:	2300      	movne	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	b2da      	uxtb	r2, r3
 8001588:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800158c:	4413      	add	r3, r2
 800158e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_SET);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6858      	ldr	r0, [r3, #4]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	891b      	ldrh	r3, [r3, #8]
 800159a:	2201      	movs	r2, #1
 800159c:	4619      	mov	r1, r3
 800159e:	f002 f8a3 	bl	80036e8 <HAL_GPIO_WritePin>

	id = rxBuf[1];
 80015a2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80015a6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/* Make sure device ID matches */
	if (id != 0x10) {
 80015aa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80015ae:	2b10      	cmp	r3, #16
 80015b0:	d001      	beq.n	80015b6 <SPL06_Init+0xc2>

		return 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e166      	b.n	8001884 <SPL06_Init+0x390>

	}
	HAL_Delay(10);
 80015b6:	200a      	movs	r0, #10
 80015b8:	f001 fa38 	bl	8002a2c <HAL_Delay>

	/* Read calibration coefficients */
	uint8_t calibTxBuf[19];
	calibTxBuf[0] = (SPL06_COEF | 0x80);
 80015bc:	2390      	movs	r3, #144	; 0x90
 80015be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	uint8_t calibRxBuf[19];

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6858      	ldr	r0, [r3, #4]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	891b      	ldrh	r3, [r3, #8]
 80015ca:	2200      	movs	r2, #0
 80015cc:	4619      	mov	r1, r3
 80015ce:	f002 f88b 	bl	80036e8 <HAL_GPIO_WritePin>
	status += (HAL_SPI_TransmitReceive(bar->spiHandle, calibTxBuf, calibRxBuf, 19, HAL_MAX_DELAY) == HAL_OK);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6818      	ldr	r0, [r3, #0]
 80015d6:	f107 0210 	add.w	r2, r7, #16
 80015da:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2313      	movs	r3, #19
 80015e6:	f004 f805 	bl	80055f4 <HAL_SPI_TransmitReceive>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	bf0c      	ite	eq
 80015f0:	2301      	moveq	r3, #1
 80015f2:	2300      	movne	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015fc:	4413      	add	r3, r2
 80015fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_SET);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6858      	ldr	r0, [r3, #4]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	891b      	ldrh	r3, [r3, #8]
 800160a:	2201      	movs	r2, #1
 800160c:	4619      	mov	r1, r3
 800160e:	f002 f86b 	bl	80036e8 <HAL_GPIO_WritePin>

	/* Convert raw calibration coefficients to signed integers */
	bar->c0 = (uint16_t)calibRxBuf[1] << 4 | (uint16_t)calibRxBuf[2] >> 4;
 8001612:	7c7b      	ldrb	r3, [r7, #17]
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	b21a      	sxth	r2, r3
 8001618:	7cbb      	ldrb	r3, [r7, #18]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	b2db      	uxtb	r3, r3
 800161e:	b21b      	sxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b21a      	sxth	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	825a      	strh	r2, [r3, #18]
	bar->c0 = (bar->c0 & 1 << 11) ? (0xF000 | bar->c0) : bar->c0;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800162e:	b29b      	uxth	r3, r3
 8001630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001634:	2b00      	cmp	r3, #0
 8001636:	d008      	beq.n	800164a <SPL06_Init+0x156>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800163e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001642:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001646:	b21b      	sxth	r3, r3
 8001648:	e002      	b.n	8001650 <SPL06_Init+0x15c>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	8253      	strh	r3, [r2, #18]

	bar->c1 = (uint16_t)(calibRxBuf[2] & 0x0f) << 8 | (uint16_t)calibRxBuf[3];
 8001654:	7cbb      	ldrb	r3, [r7, #18]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	b21b      	sxth	r3, r3
 800165a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800165e:	b21a      	sxth	r2, r3
 8001660:	7cfb      	ldrb	r3, [r7, #19]
 8001662:	b21b      	sxth	r3, r3
 8001664:	4313      	orrs	r3, r2
 8001666:	b21a      	sxth	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	829a      	strh	r2, [r3, #20]
	bar->c1 = (bar->c1 & 1 << 11) ? (0xF000 | bar->c1) : bar->c1;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001672:	b29b      	uxth	r3, r3
 8001674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <SPL06_Init+0x19a>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001682:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001686:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800168a:	b21b      	sxth	r3, r3
 800168c:	e002      	b.n	8001694 <SPL06_Init+0x1a0>
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	8293      	strh	r3, [r2, #20]

	bar->c00 = (uint32_t)calibRxBuf[4] << 12 | (uint32_t)calibRxBuf[5] << 4 | (uint16_t)calibRxBuf[6] >> 4;
 8001698:	7d3b      	ldrb	r3, [r7, #20]
 800169a:	031a      	lsls	r2, r3, #12
 800169c:	7d7b      	ldrb	r3, [r7, #21]
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4313      	orrs	r3, r2
 80016a2:	7dba      	ldrb	r2, [r7, #22]
 80016a4:	0912      	lsrs	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	4313      	orrs	r3, r2
 80016aa:	461a      	mov	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	619a      	str	r2, [r3, #24]
	bar->c00 = (bar->c00 & 1 << 19) ? (0xFFF00000 | bar->c00) : bar->c00;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <SPL06_Init+0x1d6>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80016c4:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80016c8:	e001      	b.n	80016ce <SPL06_Init+0x1da>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	6193      	str	r3, [r2, #24]

	bar->c10 = (uint32_t)(calibRxBuf[6] & 0x0f) << 16 | (uint32_t)calibRxBuf[7] << 8 | (uint32_t)calibRxBuf[8];
 80016d2:	7dbb      	ldrb	r3, [r7, #22]
 80016d4:	041b      	lsls	r3, r3, #16
 80016d6:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	4313      	orrs	r3, r2
 80016e0:	7e3a      	ldrb	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	61da      	str	r2, [r3, #28]
	bar->c10 = (bar->c10 & 1 << 19) ? (0xFFF00000 | bar->c10) : bar->c10;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d006      	beq.n	8001704 <SPL06_Init+0x210>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80016fe:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001702:	e001      	b.n	8001708 <SPL06_Init+0x214>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	61d3      	str	r3, [r2, #28]

	bar->c01 = (uint16_t) calibRxBuf[9]  << 8 | calibRxBuf[10];
 800170c:	7e7b      	ldrb	r3, [r7, #25]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	b21a      	sxth	r2, r3
 8001712:	7ebb      	ldrb	r3, [r7, #26]
 8001714:	b21b      	sxth	r3, r3
 8001716:	4313      	orrs	r3, r2
 8001718:	b21a      	sxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	841a      	strh	r2, [r3, #32]
	bar->c11 = (uint16_t) calibRxBuf[11] << 8 | calibRxBuf[12];
 800171e:	7efb      	ldrb	r3, [r7, #27]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	b21a      	sxth	r2, r3
 8001724:	7f3b      	ldrb	r3, [r7, #28]
 8001726:	b21b      	sxth	r3, r3
 8001728:	4313      	orrs	r3, r2
 800172a:	b21a      	sxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	845a      	strh	r2, [r3, #34]	; 0x22
	bar->c20 = (uint16_t) calibRxBuf[13] << 8 | calibRxBuf[14];
 8001730:	7f7b      	ldrb	r3, [r7, #29]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	b21a      	sxth	r2, r3
 8001736:	7fbb      	ldrb	r3, [r7, #30]
 8001738:	b21b      	sxth	r3, r3
 800173a:	4313      	orrs	r3, r2
 800173c:	b21a      	sxth	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	849a      	strh	r2, [r3, #36]	; 0x24
	bar->c21 = (uint16_t) calibRxBuf[15] << 8 | calibRxBuf[16];
 8001742:	7ffb      	ldrb	r3, [r7, #31]
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	b21a      	sxth	r2, r3
 8001748:	f897 3020 	ldrb.w	r3, [r7, #32]
 800174c:	b21b      	sxth	r3, r3
 800174e:	4313      	orrs	r3, r2
 8001750:	b21a      	sxth	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	84da      	strh	r2, [r3, #38]	; 0x26
	bar->c30 = (uint16_t) calibRxBuf[17] << 8 | calibRxBuf[18];
 8001756:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	b21a      	sxth	r2, r3
 800175e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001762:	b21b      	sxth	r3, r3
 8001764:	4313      	orrs	r3, r2
 8001766:	b21a      	sxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	851a      	strh	r2, [r3, #40]	; 0x28
	HAL_Delay(25);
 800176c:	2019      	movs	r0, #25
 800176e:	f001 f95d 	bl	8002a2c <HAL_Delay>

	/* Set pressure configuration */
	txBuf[0] = SPL06_PRS_CFG;
 8001772:	2306      	movs	r3, #6
 8001774:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	txBuf[1] = 0x33;			/* 8 Hz, 8x oversampling */
 8001778:	2333      	movs	r3, #51	; 0x33
 800177a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6858      	ldr	r0, [r3, #4]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	891b      	ldrh	r3, [r3, #8]
 8001786:	2200      	movs	r2, #0
 8001788:	4619      	mov	r1, r3
 800178a:	f001 ffad 	bl	80036e8 <HAL_GPIO_WritePin>
	status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	2202      	movs	r2, #2
 800179c:	f003 fdf6 	bl	800538c <HAL_SPI_Transmit>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bf0c      	ite	eq
 80017a6:	2301      	moveq	r3, #1
 80017a8:	2300      	movne	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80017b2:	4413      	add	r3, r2
 80017b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_SET);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6858      	ldr	r0, [r3, #4]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	891b      	ldrh	r3, [r3, #8]
 80017c0:	2201      	movs	r2, #1
 80017c2:	4619      	mov	r1, r3
 80017c4:	f001 ff90 	bl	80036e8 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 80017c8:	200a      	movs	r0, #10
 80017ca:	f001 f92f 	bl	8002a2c <HAL_Delay>

	/* Set temperature configuration */
	txBuf[0] = SPL06_TMP_CFG;
 80017ce:	2307      	movs	r3, #7
 80017d0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	txBuf[1] = 0xB3; /* 'external' sensor, 8 Hz, 8x oversampling */
 80017d4:	23b3      	movs	r3, #179	; 0xb3
 80017d6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6858      	ldr	r0, [r3, #4]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	891b      	ldrh	r3, [r3, #8]
 80017e2:	2200      	movs	r2, #0
 80017e4:	4619      	mov	r1, r3
 80017e6:	f001 ff7f 	bl	80036e8 <HAL_GPIO_WritePin>
	status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6818      	ldr	r0, [r3, #0]
 80017ee:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	2202      	movs	r2, #2
 80017f8:	f003 fdc8 	bl	800538c <HAL_SPI_Transmit>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	bf0c      	ite	eq
 8001802:	2301      	moveq	r3, #1
 8001804:	2300      	movne	r3, #0
 8001806:	b2db      	uxtb	r3, r3
 8001808:	b2da      	uxtb	r2, r3
 800180a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800180e:	4413      	add	r3, r2
 8001810:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_SET);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6858      	ldr	r0, [r3, #4]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	891b      	ldrh	r3, [r3, #8]
 800181c:	2201      	movs	r2, #1
 800181e:	4619      	mov	r1, r3
 8001820:	f001 ff62 	bl	80036e8 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 8001824:	200a      	movs	r0, #10
 8001826:	f001 f901 	bl	8002a2c <HAL_Delay>

	/* Set measurement configuration */
	txBuf[0] = SPL06_MEAS_CFG ;
 800182a:	2308      	movs	r3, #8
 800182c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	txBuf[1] = 0xFF; /* Continuous pressure and temperature measurement */
 8001830:	23ff      	movs	r3, #255	; 0xff
 8001832:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6858      	ldr	r0, [r3, #4]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	891b      	ldrh	r3, [r3, #8]
 800183e:	2200      	movs	r2, #0
 8001840:	4619      	mov	r1, r3
 8001842:	f001 ff51 	bl	80036e8 <HAL_GPIO_WritePin>
	status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
 8001852:	2202      	movs	r2, #2
 8001854:	f003 fd9a 	bl	800538c <HAL_SPI_Transmit>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	bf0c      	ite	eq
 800185e:	2301      	moveq	r3, #1
 8001860:	2300      	movne	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	b2da      	uxtb	r2, r3
 8001866:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800186a:	4413      	add	r3, r2
 800186c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_SET);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6858      	ldr	r0, [r3, #4]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	891b      	ldrh	r3, [r3, #8]
 8001878:	2201      	movs	r2, #1
 800187a:	4619      	mov	r1, r3
 800187c:	f001 ff34 	bl	80036e8 <HAL_GPIO_WritePin>

	return status;
 8001880:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f

}
 8001884:	4618      	mov	r0, r3
 8001886:	3740      	adds	r7, #64	; 0x40
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <SPL06_ReadDMA>:
/*
 *
 * TEMPERATURE AND PRESSURE READ (DMA)
 *
 */
uint8_t SPL06_ReadDMA(SPL06 *bar) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

	uint8_t txBuf[7];
	txBuf[0] = 0x00 | 0x80;
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	723b      	strb	r3, [r7, #8]

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_RESET);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6858      	ldr	r0, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	891b      	ldrh	r3, [r3, #8]
 80018a0:	2200      	movs	r2, #0
 80018a2:	4619      	mov	r1, r3
 80018a4:	f001 ff20 	bl	80036e8 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(bar->spiHandle, txBuf, (uint8_t *) bar->dmaRxBuf, 7) == HAL_OK) {
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f103 020a 	add.w	r2, r3, #10
 80018b2:	f107 0108 	add.w	r1, r7, #8
 80018b6:	2307      	movs	r3, #7
 80018b8:	f004 f83e 	bl	8005938 <HAL_SPI_TransmitReceive_DMA>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d104      	bne.n	80018cc <SPL06_ReadDMA+0x40>

		bar->reading = 1;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	745a      	strb	r2, [r3, #17]
		return 1;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <SPL06_ReadDMA+0x42>

	} else {

		return 0;
 80018cc:	2300      	movs	r3, #0

	}

}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <SPL06_ReadDMA_Complete>:

void SPL06_ReadDMA_Complete(SPL06 *bar) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(bar->csPinBank, bar->csPin, GPIO_PIN_SET);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6858      	ldr	r0, [r3, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	891b      	ldrh	r3, [r3, #8]
 80018e8:	2201      	movs	r2, #1
 80018ea:	4619      	mov	r1, r3
 80018ec:	f001 fefc 	bl	80036e8 <HAL_GPIO_WritePin>
	bar->reading = 0;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	745a      	strb	r2, [r3, #17]

	/* Convert raw to uncalibrated pressure and temperature */
	int32_t pres = ((uint32_t) bar->dmaRxBuf[1] << 16) | ((uint32_t) bar->dmaRxBuf[2] << 8) | ((uint32_t) bar->dmaRxBuf[3]);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	7adb      	ldrb	r3, [r3, #11]
 80018fa:	041a      	lsls	r2, r3, #16
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7b1b      	ldrb	r3, [r3, #12]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	4313      	orrs	r3, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	7b52      	ldrb	r2, [r2, #13]
 8001908:	4313      	orrs	r3, r2
 800190a:	617b      	str	r3, [r7, #20]
			pres = (pres & 1 << 23) ? (0xFF000000 | pres) : pres;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <SPL06_ReadDMA_Complete+0x46>
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800191c:	e000      	b.n	8001920 <SPL06_ReadDMA_Complete+0x48>
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	617b      	str	r3, [r7, #20]

	int32_t temp = ((uint32_t) bar->dmaRxBuf[4] << 16) | ((uint32_t) bar->dmaRxBuf[5] << 8) | ((uint32_t) bar->dmaRxBuf[6]);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	7b9b      	ldrb	r3, [r3, #14]
 8001926:	041a      	lsls	r2, r3, #16
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7bdb      	ldrb	r3, [r3, #15]
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	4313      	orrs	r3, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	7c12      	ldrb	r2, [r2, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
			temp = (temp & 1 << 23) ? (0xFF000000 | temp) : temp;
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <SPL06_ReadDMA_Complete+0x72>
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001948:	e000      	b.n	800194c <SPL06_ReadDMA_Complete+0x74>
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	613b      	str	r3, [r7, #16]

	/* Apply calibration */
	float tempRaw 	   = (float) temp / 7864320.0f;
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	ee07 3a90 	vmov	s15, r3
 8001954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001958:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001a64 <SPL06_ReadDMA_Complete+0x18c>
 800195c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001960:	edc7 7a03 	vstr	s15, [r7, #12]
	bar->temperature_C = 0.5f * bar->c0 + bar->c1 * tempRaw;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001972:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001976:	ee27 7a87 	vmul.f32	s14, s15, s14
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001980:	ee07 3a90 	vmov	s15, r3
 8001984:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001988:	edd7 7a03 	vldr	s15, [r7, #12]
 800198c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	float presRaw    = (float) pres / 7864320.0f;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001a64 <SPL06_ReadDMA_Complete+0x18c>
 80019a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ac:	edc7 7a02 	vstr	s15, [r7, #8]
	bar->pressure_Pa = bar->c00 + presRaw * (bar->c10 + presRaw * (bar->c20 + bar->c30 * presRaw))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80019dc:	ee07 3a90 	vmov	s15, r3
 80019e0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80019e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019ec:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80019f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a04:	ee37 7a27 	vadd.f32	s14, s14, s15
				    + tempRaw * (bar->c01 + presRaw * (bar->c11 + bar->c21 * presRaw));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a0e:	ee07 3a90 	vmov	s15, r3
 8001a12:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001a1c:	ee07 3a90 	vmov	s15, r3
 8001a20:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001a32:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a36:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a3a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a42:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a46:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a52:	ee77 7a27 	vadd.f32	s15, s14, s15
	bar->pressure_Pa = bar->c00 + presRaw * (bar->c10 + presRaw * (bar->c20 + bar->c30 * presRaw))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

}
 8001a5c:	bf00      	nop
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	4af00000 	.word	0x4af00000

08001a68 <FIRFilter_Init>:
#include "FIRFilter.h"

static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {-0.0032906f,-0.0052635f,-0.0068811f,0.0000000f,0.0254209f,0.0724719f,0.1311260f,0.1805961f,0.2000000f,0.1805961f,0.1311260f,0.0724719f,0.0254209f,0.0000000f,-0.0068811f,-0.0052635f};


void FIRFilter_Init(FIRFilter *fir) {
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

	/* Clear filter buffer */
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e009      	b.n	8001a8a <FIRFilter_Init+0x22>

		fir->buf[n] = 0.0f;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	3301      	adds	r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d9f2      	bls.n	8001a76 <FIRFilter_Init+0xe>

	}

	/* Reset buffer index */
	fir->bufIndex = 0;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	/* Clear filter output */
	fir->out = 0.0f;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	645a      	str	r2, [r3, #68]	; 0x44

}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *fir, float inp) {
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	ed87 0a00 	vstr	s0, [r7]

	/* Store latest sample in buffer */
	fir->buf[fir->bufIndex] = inp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	601a      	str	r2, [r3, #0]

	/* Increment buffer index and wrap around if necessary */
	fir->bufIndex++;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ace:	3301      	adds	r3, #1
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (fir->bufIndex == FIR_FILTER_LENGTH) {
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ade:	2b10      	cmp	r3, #16
 8001ae0:	d103      	bne.n	8001aea <FIRFilter_Update+0x3e>

		fir->bufIndex = 0;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	}

	/* Compute new output sample (via convolution) */
	fir->out = 0.0f;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44

	uint8_t sumIndex = fir->bufIndex;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001af8:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8001afa:	2300      	movs	r3, #0
 8001afc:	73bb      	strb	r3, [r7, #14]
 8001afe:	e021      	b.n	8001b44 <FIRFilter_Update+0x98>

		/* Decrement index and wrap if necessary */
		if (sumIndex > 0) {
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <FIRFilter_Update+0x62>

			sumIndex--;
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	e001      	b.n	8001b12 <FIRFilter_Update+0x66>

		} else {

			sumIndex = FIR_FILTER_LENGTH - 1;
 8001b0e:	230f      	movs	r3, #15
 8001b10:	73fb      	strb	r3, [r7, #15]

		}

		/* Multiply impulse response with shifted input sample and add to output */
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001b18:	7bbb      	ldrb	r3, [r7, #14]
 8001b1a:	4a11      	ldr	r2, [pc, #68]	; (8001b60 <FIRFilter_Update+0xb4>)
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	edd3 6a00 	vldr	s13, [r3]
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
 8001b3e:	7bbb      	ldrb	r3, [r7, #14]
 8001b40:	3301      	adds	r3, #1
 8001b42:	73bb      	strb	r3, [r7, #14]
 8001b44:	7bbb      	ldrb	r3, [r7, #14]
 8001b46:	2b0f      	cmp	r3, #15
 8001b48:	d9da      	bls.n	8001b00 <FIRFilter_Update+0x54>

	}

	/* Return filtered output */
	return fir->out;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	ee07 3a90 	vmov	s15, r3

}
 8001b52:	eeb0 0a67 	vmov.f32	s0, s15
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	20000000 	.word	0x20000000

08001b64 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b66:	b0a5      	sub	sp, #148	; 0x94
 8001b68:	af02      	add	r7, sp, #8
 8001b6a:	6078      	str	r0, [r7, #4]

	if (hspi->Instance == SPI1) {
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <HAL_SPI_TxRxCpltCallback+0xa8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d13a      	bne.n	8001bec <HAL_SPI_TxRxCpltCallback+0x88>

		if (imu.readingAcc) {
 8001b76:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <HAL_SPI_TxRxCpltCallback+0xac>)
 8001b78:	7c1b      	ldrb	r3, [r3, #16]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d02e      	beq.n	8001bdc <HAL_SPI_TxRxCpltCallback+0x78>

			BMI088_ReadAccelerometerDMA_Complete(&imu);
 8001b7e:	4824      	ldr	r0, [pc, #144]	; (8001c10 <HAL_SPI_TxRxCpltCallback+0xac>)
 8001b80:	f7ff fbc4 	bl	800130c <BMI088_ReadAccelerometerDMA_Complete>

			/* Filter accelerometer data */
			FIRFilter_Update(&lpfAcc, imu.acc_mps2[0]);
 8001b84:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <HAL_SPI_TxRxCpltCallback+0xac>)
 8001b86:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8e:	4821      	ldr	r0, [pc, #132]	; (8001c14 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8001b90:	f7ff ff8c 	bl	8001aac <FIRFilter_Update>

			/* Log raw and filtered data via USB */
			char logBuf[128];

			sprintf(logBuf, "%.4f,%.4f\r\n", imu.acc_mps2[0], lpfAcc.out);
 8001b94:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <HAL_SPI_TxRxCpltCallback+0xac>)
 8001b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fcd5 	bl	8000548 <__aeabi_f2d>
 8001b9e:	4605      	mov	r5, r0
 8001ba0:	460e      	mov	r6, r1
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fcce 	bl	8000548 <__aeabi_f2d>
 8001bac:	4603      	mov	r3, r0
 8001bae:	460c      	mov	r4, r1
 8001bb0:	f107 0008 	add.w	r0, r7, #8
 8001bb4:	e9cd 3400 	strd	r3, r4, [sp]
 8001bb8:	462a      	mov	r2, r5
 8001bba:	4633      	mov	r3, r6
 8001bbc:	4916      	ldr	r1, [pc, #88]	; (8001c18 <HAL_SPI_TxRxCpltCallback+0xb4>)
 8001bbe:	f009 fa21 	bl	800b004 <siprintf>
			CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
 8001bc2:	f107 0308 	add.w	r3, r7, #8
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fb02 	bl	80001d0 <strlen>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	f107 0308 	add.w	r3, r7, #8
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f008 f87c 	bl	8009cd4 <CDC_Transmit_FS>

		}

		if (imu.readingGyr) {
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <HAL_SPI_TxRxCpltCallback+0xac>)
 8001bde:	7c5b      	ldrb	r3, [r3, #17]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00f      	beq.n	8001c04 <HAL_SPI_TxRxCpltCallback+0xa0>

			BMI088_ReadGyroscopeDMA_Complete(&imu);
 8001be4:	480a      	ldr	r0, [pc, #40]	; (8001c10 <HAL_SPI_TxRxCpltCallback+0xac>)
 8001be6:	f7ff fc21 	bl	800142c <BMI088_ReadGyroscopeDMA_Complete>

		}

	}

}
 8001bea:	e00b      	b.n	8001c04 <HAL_SPI_TxRxCpltCallback+0xa0>
	} else if (hspi->Instance == SPI3) {
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_SPI_TxRxCpltCallback+0xb8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d106      	bne.n	8001c04 <HAL_SPI_TxRxCpltCallback+0xa0>
		if (bar.reading) {
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_SPI_TxRxCpltCallback+0xbc>)
 8001bf8:	7c5b      	ldrb	r3, [r3, #17]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <HAL_SPI_TxRxCpltCallback+0xa0>
			SPL06_ReadDMA_Complete(&bar);
 8001bfe:	4808      	ldr	r0, [pc, #32]	; (8001c20 <HAL_SPI_TxRxCpltCallback+0xbc>)
 8001c00:	f7ff fe6a 	bl	80018d8 <SPL06_ReadDMA_Complete>
}
 8001c04:	bf00      	nop
 8001c06:	378c      	adds	r7, #140	; 0x8c
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c0c:	40013000 	.word	0x40013000
 8001c10:	200003fc 	.word	0x200003fc
 8001c14:	20000544 	.word	0x20000544
 8001c18:	0800c660 	.word	0x0800c660
 8001c1c:	40003c00 	.word	0x40003c00
 8001c20:	20000644 	.word	0x20000644

08001c24 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == INT_ACC_Pin) {
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d103      	bne.n	8001c3c <HAL_GPIO_EXTI_Callback+0x18>

		BMI088_ReadAccelerometerDMA(&imu);
 8001c34:	4806      	ldr	r0, [pc, #24]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001c36:	f7ff fb3d 	bl	80012b4 <BMI088_ReadAccelerometerDMA>

		BMI088_ReadGyroscopeDMA(&imu);

	}

}
 8001c3a:	e005      	b.n	8001c48 <HAL_GPIO_EXTI_Callback+0x24>
	} else if (GPIO_Pin == INT_GYR_Pin) {
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d102      	bne.n	8001c48 <HAL_GPIO_EXTI_Callback+0x24>
		BMI088_ReadGyroscopeDMA(&imu);
 8001c42:	4803      	ldr	r0, [pc, #12]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001c44:	f7ff fbc6 	bl	80013d4 <BMI088_ReadGyroscopeDMA>
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200003fc 	.word	0x200003fc

08001c54 <LED_RGB_Init>:

void LED_RGB_Init() {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0

	/* Start RGB LED PWM timers */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <LED_RGB_Init+0x20>)
 8001c5c:	f004 fb02 	bl	8006264 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001c60:	2104      	movs	r1, #4
 8001c62:	4804      	ldr	r0, [pc, #16]	; (8001c74 <LED_RGB_Init+0x20>)
 8001c64:	f004 fafe 	bl	8006264 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4803      	ldr	r0, [pc, #12]	; (8001c78 <LED_RGB_Init+0x24>)
 8001c6c:	f004 fafa 	bl	8006264 <HAL_TIM_PWM_Start>

}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	2000044c 	.word	0x2000044c
 8001c78:	200003bc 	.word	0x200003bc

08001c7c <LED_RGB_SetIntensity>:

void LED_RGB_SetIntensity(uint8_t red, uint8_t green, uint8_t blue) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
 8001c86:	460b      	mov	r3, r1
 8001c88:	71bb      	strb	r3, [r7, #6]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	717b      	strb	r3, [r7, #5]

	htim3.Instance->CCR1 = 100 - red;
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <LED_RGB_SetIntensity+0x44>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = 100 - green;
 8001c9a:	79bb      	ldrb	r3, [r7, #6]
 8001c9c:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <LED_RGB_SetIntensity+0x44>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR1 = 100 - blue;
 8001ca6:	797b      	ldrb	r3, [r7, #5]
 8001ca8:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <LED_RGB_SetIntensity+0x48>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	2000044c 	.word	0x2000044c
 8001cc4:	200003bc 	.word	0x200003bc

08001cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b0a6      	sub	sp, #152	; 0x98
 8001ccc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cce:	f000 fe3b 	bl	8002948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd2:	f000 f893 	bl	8001dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cd6:	f000 faa5 	bl	8002224 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cda:	f000 fa5d 	bl	8002198 <MX_DMA_Init>
  MX_SPI1_Init();
 8001cde:	f000 f8f7 	bl	8001ed0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001ce2:	f000 f92b 	bl	8001f3c <MX_SPI3_Init>
  MX_TIM3_Init();
 8001ce6:	f000 f95f 	bl	8001fa8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001cea:	f000 f9df 	bl	80020ac <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8001cee:	f007 ff33 	bl	8009b58 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* Initialise RGB LED */
  LED_RGB_Init();
 8001cf2:	f7ff ffaf 	bl	8001c54 <LED_RGB_Init>
  LED_RGB_SetIntensity(0, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f7ff ffbe 	bl	8001c7c <LED_RGB_SetIntensity>

  /* Initialise inertial measurement unit */
  BMI088_Init(&imu, &hspi1, GPIOA, SPI1_NCS_ACC_Pin, GPIOC, SPI1_NCS_GYR_Pin);
 8001d00:	2310      	movs	r3, #16
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <main+0x118>)
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2310      	movs	r3, #16
 8001d0a:	4a36      	ldr	r2, [pc, #216]	; (8001de4 <main+0x11c>)
 8001d0c:	4936      	ldr	r1, [pc, #216]	; (8001de8 <main+0x120>)
 8001d0e:	4837      	ldr	r0, [pc, #220]	; (8001dec <main+0x124>)
 8001d10:	f7ff f8ca 	bl	8000ea8 <BMI088_Init>

  /* Initialise barometric pressure sensor */
  SPL06_Init(&bar, &hspi3, GPIOA, SPI3_NCS_Pin);
 8001d14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d18:	4a32      	ldr	r2, [pc, #200]	; (8001de4 <main+0x11c>)
 8001d1a:	4935      	ldr	r1, [pc, #212]	; (8001df0 <main+0x128>)
 8001d1c:	4835      	ldr	r0, [pc, #212]	; (8001df4 <main+0x12c>)
 8001d1e:	f7ff fbe9 	bl	80014f4 <SPL06_Init>

  /* Initialise FIR filter */
  FIRFilter_Init(&lpfAcc);
 8001d22:	4835      	ldr	r0, [pc, #212]	; (8001df8 <main+0x130>)
 8001d24:	f7ff fea0 	bl	8001a68 <FIRFilter_Init>

  /* Timers */
  uint32_t timerBAR = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t timerUSB = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t timerLED	= 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* LED colour state */
  uint8_t ledState = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  while (1)
  {
    /* USER CODE END WHILE */

	  /* Log data via USB */
	  if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB) {
 8001d40:	f000 fe68 	bl	8002a14 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d50:	d303      	bcc.n	8001d5a <main+0x92>
		 // sprintf(logBuf, "%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\r\n", imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2],
		//															imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2]);

		 // CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));

		  timerUSB = HAL_GetTick();
 8001d52:	f000 fe5f 	bl	8002a14 <HAL_GetTick>
 8001d56:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

	  }

	  /* Read pressure sensor */
	  if ((HAL_GetTick() - timerBAR) >= SAMPLE_TIME_MS_BAR) {
 8001d5a:	f000 fe5b 	bl	8002a14 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b7c      	cmp	r3, #124	; 0x7c
 8001d68:	d906      	bls.n	8001d78 <main+0xb0>

		  SPL06_ReadDMA(&bar);
 8001d6a:	4822      	ldr	r0, [pc, #136]	; (8001df4 <main+0x12c>)
 8001d6c:	f7ff fd8e 	bl	800188c <SPL06_ReadDMA>

		  timerBAR = HAL_GetTick();
 8001d70:	f000 fe50 	bl	8002a14 <HAL_GetTick>
 8001d74:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

	  }

	  /* Toggle LED */
	  if ((HAL_GetTick() - timerLED) >= SAMPLE_TIME_MS_LED) {
 8001d78:	f000 fe4c 	bl	8002a14 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2bf9      	cmp	r3, #249	; 0xf9
 8001d86:	d9db      	bls.n	8001d40 <main+0x78>

		  switch(ledState) {
 8001d88:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d009      	beq.n	8001da4 <main+0xdc>
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d00d      	beq.n	8001db0 <main+0xe8>
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d111      	bne.n	8001dbc <main+0xf4>

			  case 0:
				  LED_RGB_SetIntensity(100, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2064      	movs	r0, #100	; 0x64
 8001d9e:	f7ff ff6d 	bl	8001c7c <LED_RGB_SetIntensity>
				  break;
 8001da2:	e00b      	b.n	8001dbc <main+0xf4>

			  case 1:
				  LED_RGB_SetIntensity(0, 75, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	214b      	movs	r1, #75	; 0x4b
 8001da8:	2000      	movs	r0, #0
 8001daa:	f7ff ff67 	bl	8001c7c <LED_RGB_SetIntensity>
				  break;
 8001dae:	e005      	b.n	8001dbc <main+0xf4>

			  case 2:
				  LED_RGB_SetIntensity(0, 0, 100);
 8001db0:	2264      	movs	r2, #100	; 0x64
 8001db2:	2100      	movs	r1, #0
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff ff61 	bl	8001c7c <LED_RGB_SetIntensity>
				  break;
 8001dba:	bf00      	nop

		  }

		  ledState++;
 8001dbc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

		  if (ledState > 2) {
 8001dc6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d902      	bls.n	8001dd4 <main+0x10c>

			  ledState = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

		  }

		  timerLED = HAL_GetTick();
 8001dd4:	f000 fe1e 	bl	8002a14 <HAL_GetTick>
 8001dd8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  if ((HAL_GetTick() - timerUSB) >= SAMPLE_TIME_MS_USB) {
 8001ddc:	e7b0      	b.n	8001d40 <main+0x78>
 8001dde:	bf00      	nop
 8001de0:	40020800 	.word	0x40020800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	2000058c 	.word	0x2000058c
 8001dec:	200003fc 	.word	0x200003fc
 8001df0:	2000048c 	.word	0x2000048c
 8001df4:	20000644 	.word	0x20000644
 8001df8:	20000544 	.word	0x20000544

08001dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b094      	sub	sp, #80	; 0x50
 8001e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e02:	f107 0320 	add.w	r3, r7, #32
 8001e06:	2230      	movs	r2, #48	; 0x30
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f008 fbde 	bl	800a5cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <SystemClock_Config+0xcc>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	4a27      	ldr	r2, [pc, #156]	; (8001ec8 <SystemClock_Config+0xcc>)
 8001e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <SystemClock_Config+0xcc>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <SystemClock_Config+0xd0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a21      	ldr	r2, [pc, #132]	; (8001ecc <SystemClock_Config+0xd0>)
 8001e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <SystemClock_Config+0xd0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e62:	2302      	movs	r3, #2
 8001e64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e70:	23a8      	movs	r3, #168	; 0xa8
 8001e72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e74:	2302      	movs	r3, #2
 8001e76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e78:	2307      	movs	r3, #7
 8001e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7c:	f107 0320 	add.w	r3, r7, #32
 8001e80:	4618      	mov	r0, r3
 8001e82:	f002 fde7 	bl	8004a54 <HAL_RCC_OscConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e8c:	f000 fa5e 	bl	800234c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e90:	230f      	movs	r3, #15
 8001e92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e94:	2302      	movs	r3, #2
 8001e96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ea0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	2105      	movs	r1, #5
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 f840 	bl	8004f34 <HAL_RCC_ClockConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001eba:	f000 fa47 	bl	800234c <Error_Handler>
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	3750      	adds	r7, #80	; 0x50
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40007000 	.word	0x40007000

08001ed0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001ed6:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <MX_SPI1_Init+0x68>)
 8001ed8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001edc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ee0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ee2:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001f04:	2218      	movs	r2, #24
 8001f06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001f1c:	220a      	movs	r2, #10
 8001f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f20:	4804      	ldr	r0, [pc, #16]	; (8001f34 <MX_SPI1_Init+0x64>)
 8001f22:	f003 f9cf 	bl	80052c4 <HAL_SPI_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f2c:	f000 fa0e 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	2000058c 	.word	0x2000058c
 8001f38:	40013000 	.word	0x40013000

08001f3c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <MX_SPI3_Init+0x64>)
 8001f42:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <MX_SPI3_Init+0x68>)
 8001f44:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <MX_SPI3_Init+0x64>)
 8001f48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f4c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001f4e:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <MX_SPI3_Init+0x64>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <MX_SPI3_Init+0x64>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <MX_SPI3_Init+0x64>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <MX_SPI3_Init+0x64>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <MX_SPI3_Init+0x64>)
 8001f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f6c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <MX_SPI3_Init+0x64>)
 8001f70:	2210      	movs	r2, #16
 8001f72:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <MX_SPI3_Init+0x64>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <MX_SPI3_Init+0x64>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <MX_SPI3_Init+0x64>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <MX_SPI3_Init+0x64>)
 8001f88:	220a      	movs	r2, #10
 8001f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001f8c:	4804      	ldr	r0, [pc, #16]	; (8001fa0 <MX_SPI3_Init+0x64>)
 8001f8e:	f003 f999 	bl	80052c4 <HAL_SPI_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001f98:	f000 f9d8 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	2000048c 	.word	0x2000048c
 8001fa4:	40003c00 	.word	0x40003c00

08001fa8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08e      	sub	sp, #56	; 0x38
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fbc:	f107 0320 	add.w	r3, r7, #32
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
 8001fd4:	615a      	str	r2, [r3, #20]
 8001fd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fd8:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <MX_TIM3_Init+0xfc>)
 8001fda:	4a33      	ldr	r2, [pc, #204]	; (80020a8 <MX_TIM3_Init+0x100>)
 8001fdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8001fde:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <MX_TIM3_Init+0xfc>)
 8001fe0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001fe4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe6:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <MX_TIM3_Init+0xfc>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001fec:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <MX_TIM3_Init+0xfc>)
 8001fee:	2263      	movs	r2, #99	; 0x63
 8001ff0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff2:	4b2c      	ldr	r3, [pc, #176]	; (80020a4 <MX_TIM3_Init+0xfc>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff8:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <MX_TIM3_Init+0xfc>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ffe:	4829      	ldr	r0, [pc, #164]	; (80020a4 <MX_TIM3_Init+0xfc>)
 8002000:	f004 f8d0 	bl	80061a4 <HAL_TIM_Base_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800200a:	f000 f99f 	bl	800234c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800200e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002012:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002014:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002018:	4619      	mov	r1, r3
 800201a:	4822      	ldr	r0, [pc, #136]	; (80020a4 <MX_TIM3_Init+0xfc>)
 800201c:	f004 fa26 	bl	800646c <HAL_TIM_ConfigClockSource>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002026:	f000 f991 	bl	800234c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800202a:	481e      	ldr	r0, [pc, #120]	; (80020a4 <MX_TIM3_Init+0xfc>)
 800202c:	f004 f8e5 	bl	80061fa <HAL_TIM_PWM_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002036:	f000 f989 	bl	800234c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002042:	f107 0320 	add.w	r3, r7, #32
 8002046:	4619      	mov	r1, r3
 8002048:	4816      	ldr	r0, [pc, #88]	; (80020a4 <MX_TIM3_Init+0xfc>)
 800204a:	f004 fdd7 	bl	8006bfc <HAL_TIMEx_MasterConfigSynchronization>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002054:	f000 f97a 	bl	800234c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002058:	2360      	movs	r3, #96	; 0x60
 800205a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	2200      	movs	r2, #0
 800206c:	4619      	mov	r1, r3
 800206e:	480d      	ldr	r0, [pc, #52]	; (80020a4 <MX_TIM3_Init+0xfc>)
 8002070:	f004 f936 	bl	80062e0 <HAL_TIM_PWM_ConfigChannel>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800207a:	f000 f967 	bl	800234c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2204      	movs	r2, #4
 8002082:	4619      	mov	r1, r3
 8002084:	4807      	ldr	r0, [pc, #28]	; (80020a4 <MX_TIM3_Init+0xfc>)
 8002086:	f004 f92b 	bl	80062e0 <HAL_TIM_PWM_ConfigChannel>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002090:	f000 f95c 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002094:	4803      	ldr	r0, [pc, #12]	; (80020a4 <MX_TIM3_Init+0xfc>)
 8002096:	f000 fb13 	bl	80026c0 <HAL_TIM_MspPostInit>

}
 800209a:	bf00      	nop
 800209c:	3738      	adds	r7, #56	; 0x38
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000044c 	.word	0x2000044c
 80020a8:	40000400 	.word	0x40000400

080020ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08e      	sub	sp, #56	; 0x38
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c0:	f107 0320 	add.w	r3, r7, #32
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
 80020d8:	615a      	str	r2, [r3, #20]
 80020da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020dc:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <MX_TIM4_Init+0xe4>)
 80020de:	4a2d      	ldr	r2, [pc, #180]	; (8002194 <MX_TIM4_Init+0xe8>)
 80020e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 80020e2:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <MX_TIM4_Init+0xe4>)
 80020e4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80020e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ea:	4b29      	ldr	r3, [pc, #164]	; (8002190 <MX_TIM4_Init+0xe4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80020f0:	4b27      	ldr	r3, [pc, #156]	; (8002190 <MX_TIM4_Init+0xe4>)
 80020f2:	2263      	movs	r2, #99	; 0x63
 80020f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f6:	4b26      	ldr	r3, [pc, #152]	; (8002190 <MX_TIM4_Init+0xe4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020fc:	4b24      	ldr	r3, [pc, #144]	; (8002190 <MX_TIM4_Init+0xe4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002102:	4823      	ldr	r0, [pc, #140]	; (8002190 <MX_TIM4_Init+0xe4>)
 8002104:	f004 f84e 	bl	80061a4 <HAL_TIM_Base_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800210e:	f000 f91d 	bl	800234c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002118:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800211c:	4619      	mov	r1, r3
 800211e:	481c      	ldr	r0, [pc, #112]	; (8002190 <MX_TIM4_Init+0xe4>)
 8002120:	f004 f9a4 	bl	800646c <HAL_TIM_ConfigClockSource>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800212a:	f000 f90f 	bl	800234c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800212e:	4818      	ldr	r0, [pc, #96]	; (8002190 <MX_TIM4_Init+0xe4>)
 8002130:	f004 f863 	bl	80061fa <HAL_TIM_PWM_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800213a:	f000 f907 	bl	800234c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002146:	f107 0320 	add.w	r3, r7, #32
 800214a:	4619      	mov	r1, r3
 800214c:	4810      	ldr	r0, [pc, #64]	; (8002190 <MX_TIM4_Init+0xe4>)
 800214e:	f004 fd55 	bl	8006bfc <HAL_TIMEx_MasterConfigSynchronization>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002158:	f000 f8f8 	bl	800234c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800215c:	2360      	movs	r3, #96	; 0x60
 800215e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	2200      	movs	r2, #0
 8002170:	4619      	mov	r1, r3
 8002172:	4807      	ldr	r0, [pc, #28]	; (8002190 <MX_TIM4_Init+0xe4>)
 8002174:	f004 f8b4 	bl	80062e0 <HAL_TIM_PWM_ConfigChannel>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800217e:	f000 f8e5 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002182:	4803      	ldr	r0, [pc, #12]	; (8002190 <MX_TIM4_Init+0xe4>)
 8002184:	f000 fa9c 	bl	80026c0 <HAL_TIM_MspPostInit>

}
 8002188:	bf00      	nop
 800218a:	3738      	adds	r7, #56	; 0x38
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	200003bc 	.word	0x200003bc
 8002194:	40000800 	.word	0x40000800

08002198 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <MX_DMA_Init+0x88>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a1e      	ldr	r2, [pc, #120]	; (8002220 <MX_DMA_Init+0x88>)
 80021a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <MX_DMA_Init+0x88>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	4b18      	ldr	r3, [pc, #96]	; (8002220 <MX_DMA_Init+0x88>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a17      	ldr	r2, [pc, #92]	; (8002220 <MX_DMA_Init+0x88>)
 80021c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <MX_DMA_Init+0x88>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	200b      	movs	r0, #11
 80021dc:	f000 fd23 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80021e0:	200b      	movs	r0, #11
 80021e2:	f000 fd3c 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	2010      	movs	r0, #16
 80021ec:	f000 fd1b 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80021f0:	2010      	movs	r0, #16
 80021f2:	f000 fd34 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	2038      	movs	r0, #56	; 0x38
 80021fc:	f000 fd13 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002200:	2038      	movs	r0, #56	; 0x38
 8002202:	f000 fd2c 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	2100      	movs	r1, #0
 800220a:	203b      	movs	r0, #59	; 0x3b
 800220c:	f000 fd0b 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002210:	203b      	movs	r0, #59	; 0x3b
 8002212:	f000 fd24 	bl	8002c5e <HAL_NVIC_EnableIRQ>

}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800

08002224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]
 8002238:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	4b3f      	ldr	r3, [pc, #252]	; (800233c <MX_GPIO_Init+0x118>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a3e      	ldr	r2, [pc, #248]	; (800233c <MX_GPIO_Init+0x118>)
 8002244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b3c      	ldr	r3, [pc, #240]	; (800233c <MX_GPIO_Init+0x118>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b38      	ldr	r3, [pc, #224]	; (800233c <MX_GPIO_Init+0x118>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a37      	ldr	r2, [pc, #220]	; (800233c <MX_GPIO_Init+0x118>)
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b35      	ldr	r3, [pc, #212]	; (800233c <MX_GPIO_Init+0x118>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	4b31      	ldr	r3, [pc, #196]	; (800233c <MX_GPIO_Init+0x118>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a30      	ldr	r2, [pc, #192]	; (800233c <MX_GPIO_Init+0x118>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b2e      	ldr	r3, [pc, #184]	; (800233c <MX_GPIO_Init+0x118>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	4b2a      	ldr	r3, [pc, #168]	; (800233c <MX_GPIO_Init+0x118>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a29      	ldr	r2, [pc, #164]	; (800233c <MX_GPIO_Init+0x118>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b27      	ldr	r3, [pc, #156]	; (800233c <MX_GPIO_Init+0x118>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NCS_ACC_Pin|SPI3_NCS_Pin, GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	f248 0110 	movw	r1, #32784	; 0x8010
 80022b0:	4823      	ldr	r0, [pc, #140]	; (8002340 <MX_GPIO_Init+0x11c>)
 80022b2:	f001 fa19 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_NCS_GYR_Pin|FLASH_NHOLD_Pin|FLASH_NWP_Pin, GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	21d0      	movs	r1, #208	; 0xd0
 80022ba:	4822      	ldr	r0, [pc, #136]	; (8002344 <MX_GPIO_Init+0x120>)
 80022bc:	f001 fa14 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT_ACC_Pin INT_GYR_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin|INT_GYR_Pin;
 80022c0:	230c      	movs	r3, #12
 80022c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022c4:	4b20      	ldr	r3, [pc, #128]	; (8002348 <MX_GPIO_Init+0x124>)
 80022c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	4619      	mov	r1, r3
 80022d2:	481c      	ldr	r0, [pc, #112]	; (8002344 <MX_GPIO_Init+0x120>)
 80022d4:	f001 f86e 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_NCS_ACC_Pin SPI3_NCS_Pin */
  GPIO_InitStruct.Pin = SPI1_NCS_ACC_Pin|SPI3_NCS_Pin;
 80022d8:	f248 0310 	movw	r3, #32784	; 0x8010
 80022dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022de:	2301      	movs	r3, #1
 80022e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	4813      	ldr	r0, [pc, #76]	; (8002340 <MX_GPIO_Init+0x11c>)
 80022f2:	f001 f85f 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_NCS_GYR_Pin FLASH_NHOLD_Pin FLASH_NWP_Pin */
  GPIO_InitStruct.Pin = SPI1_NCS_GYR_Pin|FLASH_NHOLD_Pin|FLASH_NWP_Pin;
 80022f6:	23d0      	movs	r3, #208	; 0xd0
 80022f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fa:	2301      	movs	r3, #1
 80022fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	4619      	mov	r1, r3
 800230c:	480d      	ldr	r0, [pc, #52]	; (8002344 <MX_GPIO_Init+0x120>)
 800230e:	f001 f851 	bl	80033b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2100      	movs	r1, #0
 8002316:	2008      	movs	r0, #8
 8002318:	f000 fc85 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800231c:	2008      	movs	r0, #8
 800231e:	f000 fc9e 	bl	8002c5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	2009      	movs	r0, #9
 8002328:	f000 fc7d 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800232c:	2009      	movs	r0, #9
 800232e:	f000 fc96 	bl	8002c5e <HAL_NVIC_EnableIRQ>

}
 8002332:	bf00      	nop
 8002334:	3728      	adds	r7, #40	; 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800
 8002340:	40020000 	.word	0x40020000
 8002344:	40020800 	.word	0x40020800
 8002348:	10110000 	.word	0x10110000

0800234c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <HAL_MspInit+0x4c>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <HAL_MspInit+0x4c>)
 800236c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002370:	6453      	str	r3, [r2, #68]	; 0x44
 8002372:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <HAL_MspInit+0x4c>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_MspInit+0x4c>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <HAL_MspInit+0x4c>)
 8002388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_MspInit+0x4c>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800

080023ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08c      	sub	sp, #48	; 0x30
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 031c 	add.w	r3, r7, #28
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a94      	ldr	r2, [pc, #592]	; (800261c <HAL_SPI_MspInit+0x270>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	f040 8093 	bne.w	80024f6 <HAL_SPI_MspInit+0x14a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023d0:	2300      	movs	r3, #0
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	4b92      	ldr	r3, [pc, #584]	; (8002620 <HAL_SPI_MspInit+0x274>)
 80023d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d8:	4a91      	ldr	r2, [pc, #580]	; (8002620 <HAL_SPI_MspInit+0x274>)
 80023da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023de:	6453      	str	r3, [r2, #68]	; 0x44
 80023e0:	4b8f      	ldr	r3, [pc, #572]	; (8002620 <HAL_SPI_MspInit+0x274>)
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e8:	61bb      	str	r3, [r7, #24]
 80023ea:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	4b8b      	ldr	r3, [pc, #556]	; (8002620 <HAL_SPI_MspInit+0x274>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	4a8a      	ldr	r2, [pc, #552]	; (8002620 <HAL_SPI_MspInit+0x274>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6313      	str	r3, [r2, #48]	; 0x30
 80023fc:	4b88      	ldr	r3, [pc, #544]	; (8002620 <HAL_SPI_MspInit+0x274>)
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002408:	23e0      	movs	r3, #224	; 0xe0
 800240a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002414:	2303      	movs	r3, #3
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002418:	2305      	movs	r3, #5
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	4619      	mov	r1, r3
 8002422:	4880      	ldr	r0, [pc, #512]	; (8002624 <HAL_SPI_MspInit+0x278>)
 8002424:	f000 ffc6 	bl	80033b4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002428:	4b7f      	ldr	r3, [pc, #508]	; (8002628 <HAL_SPI_MspInit+0x27c>)
 800242a:	4a80      	ldr	r2, [pc, #512]	; (800262c <HAL_SPI_MspInit+0x280>)
 800242c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800242e:	4b7e      	ldr	r3, [pc, #504]	; (8002628 <HAL_SPI_MspInit+0x27c>)
 8002430:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002434:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002436:	4b7c      	ldr	r3, [pc, #496]	; (8002628 <HAL_SPI_MspInit+0x27c>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800243c:	4b7a      	ldr	r3, [pc, #488]	; (8002628 <HAL_SPI_MspInit+0x27c>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002442:	4b79      	ldr	r3, [pc, #484]	; (8002628 <HAL_SPI_MspInit+0x27c>)
 8002444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002448:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800244a:	4b77      	ldr	r3, [pc, #476]	; (8002628 <HAL_SPI_MspInit+0x27c>)
 800244c:	2200      	movs	r2, #0
 800244e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002450:	4b75      	ldr	r3, [pc, #468]	; (8002628 <HAL_SPI_MspInit+0x27c>)
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002456:	4b74      	ldr	r3, [pc, #464]	; (8002628 <HAL_SPI_MspInit+0x27c>)
 8002458:	2200      	movs	r2, #0
 800245a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800245c:	4b72      	ldr	r3, [pc, #456]	; (8002628 <HAL_SPI_MspInit+0x27c>)
 800245e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002462:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002464:	4b70      	ldr	r3, [pc, #448]	; (8002628 <HAL_SPI_MspInit+0x27c>)
 8002466:	2200      	movs	r2, #0
 8002468:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800246a:	486f      	ldr	r0, [pc, #444]	; (8002628 <HAL_SPI_MspInit+0x27c>)
 800246c:	f000 fc12 	bl	8002c94 <HAL_DMA_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8002476:	f7ff ff69 	bl	800234c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a6a      	ldr	r2, [pc, #424]	; (8002628 <HAL_SPI_MspInit+0x27c>)
 800247e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002480:	4a69      	ldr	r2, [pc, #420]	; (8002628 <HAL_SPI_MspInit+0x27c>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002486:	4b6a      	ldr	r3, [pc, #424]	; (8002630 <HAL_SPI_MspInit+0x284>)
 8002488:	4a6a      	ldr	r2, [pc, #424]	; (8002634 <HAL_SPI_MspInit+0x288>)
 800248a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800248c:	4b68      	ldr	r3, [pc, #416]	; (8002630 <HAL_SPI_MspInit+0x284>)
 800248e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002492:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002494:	4b66      	ldr	r3, [pc, #408]	; (8002630 <HAL_SPI_MspInit+0x284>)
 8002496:	2240      	movs	r2, #64	; 0x40
 8002498:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800249a:	4b65      	ldr	r3, [pc, #404]	; (8002630 <HAL_SPI_MspInit+0x284>)
 800249c:	2200      	movs	r2, #0
 800249e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024a0:	4b63      	ldr	r3, [pc, #396]	; (8002630 <HAL_SPI_MspInit+0x284>)
 80024a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024a6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024a8:	4b61      	ldr	r3, [pc, #388]	; (8002630 <HAL_SPI_MspInit+0x284>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024ae:	4b60      	ldr	r3, [pc, #384]	; (8002630 <HAL_SPI_MspInit+0x284>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80024b4:	4b5e      	ldr	r3, [pc, #376]	; (8002630 <HAL_SPI_MspInit+0x284>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80024ba:	4b5d      	ldr	r3, [pc, #372]	; (8002630 <HAL_SPI_MspInit+0x284>)
 80024bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024c0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024c2:	4b5b      	ldr	r3, [pc, #364]	; (8002630 <HAL_SPI_MspInit+0x284>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80024c8:	4859      	ldr	r0, [pc, #356]	; (8002630 <HAL_SPI_MspInit+0x284>)
 80024ca:	f000 fbe3 	bl	8002c94 <HAL_DMA_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 80024d4:	f7ff ff3a 	bl	800234c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a55      	ldr	r2, [pc, #340]	; (8002630 <HAL_SPI_MspInit+0x284>)
 80024dc:	649a      	str	r2, [r3, #72]	; 0x48
 80024de:	4a54      	ldr	r2, [pc, #336]	; (8002630 <HAL_SPI_MspInit+0x284>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80024e4:	2200      	movs	r2, #0
 80024e6:	2100      	movs	r1, #0
 80024e8:	2023      	movs	r0, #35	; 0x23
 80024ea:	f000 fb9c 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80024ee:	2023      	movs	r0, #35	; 0x23
 80024f0:	f000 fbb5 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80024f4:	e08e      	b.n	8002614 <HAL_SPI_MspInit+0x268>
  else if(hspi->Instance==SPI3)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a4f      	ldr	r2, [pc, #316]	; (8002638 <HAL_SPI_MspInit+0x28c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	f040 8089 	bne.w	8002614 <HAL_SPI_MspInit+0x268>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	4b46      	ldr	r3, [pc, #280]	; (8002620 <HAL_SPI_MspInit+0x274>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a45      	ldr	r2, [pc, #276]	; (8002620 <HAL_SPI_MspInit+0x274>)
 800250c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b43      	ldr	r3, [pc, #268]	; (8002620 <HAL_SPI_MspInit+0x274>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	4b3f      	ldr	r3, [pc, #252]	; (8002620 <HAL_SPI_MspInit+0x274>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a3e      	ldr	r2, [pc, #248]	; (8002620 <HAL_SPI_MspInit+0x274>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b3c      	ldr	r3, [pc, #240]	; (8002620 <HAL_SPI_MspInit+0x274>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800253a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800253e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002548:	2303      	movs	r3, #3
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800254c:	2306      	movs	r3, #6
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002550:	f107 031c 	add.w	r3, r7, #28
 8002554:	4619      	mov	r1, r3
 8002556:	4839      	ldr	r0, [pc, #228]	; (800263c <HAL_SPI_MspInit+0x290>)
 8002558:	f000 ff2c 	bl	80033b4 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 800255c:	4b38      	ldr	r3, [pc, #224]	; (8002640 <HAL_SPI_MspInit+0x294>)
 800255e:	4a39      	ldr	r2, [pc, #228]	; (8002644 <HAL_SPI_MspInit+0x298>)
 8002560:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <HAL_SPI_MspInit+0x294>)
 8002564:	2200      	movs	r2, #0
 8002566:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002568:	4b35      	ldr	r3, [pc, #212]	; (8002640 <HAL_SPI_MspInit+0x294>)
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800256e:	4b34      	ldr	r3, [pc, #208]	; (8002640 <HAL_SPI_MspInit+0x294>)
 8002570:	2200      	movs	r2, #0
 8002572:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002574:	4b32      	ldr	r3, [pc, #200]	; (8002640 <HAL_SPI_MspInit+0x294>)
 8002576:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800257a:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800257c:	4b30      	ldr	r3, [pc, #192]	; (8002640 <HAL_SPI_MspInit+0x294>)
 800257e:	2200      	movs	r2, #0
 8002580:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002582:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <HAL_SPI_MspInit+0x294>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8002588:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <HAL_SPI_MspInit+0x294>)
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800258e:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <HAL_SPI_MspInit+0x294>)
 8002590:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002594:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002596:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <HAL_SPI_MspInit+0x294>)
 8002598:	2200      	movs	r2, #0
 800259a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800259c:	4828      	ldr	r0, [pc, #160]	; (8002640 <HAL_SPI_MspInit+0x294>)
 800259e:	f000 fb79 	bl	8002c94 <HAL_DMA_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_SPI_MspInit+0x200>
      Error_Handler();
 80025a8:	f7ff fed0 	bl	800234c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a24      	ldr	r2, [pc, #144]	; (8002640 <HAL_SPI_MspInit+0x294>)
 80025b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80025b2:	4a23      	ldr	r2, [pc, #140]	; (8002640 <HAL_SPI_MspInit+0x294>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80025b8:	4b23      	ldr	r3, [pc, #140]	; (8002648 <HAL_SPI_MspInit+0x29c>)
 80025ba:	4a24      	ldr	r2, [pc, #144]	; (800264c <HAL_SPI_MspInit+0x2a0>)
 80025bc:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <HAL_SPI_MspInit+0x29c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025c4:	4b20      	ldr	r3, [pc, #128]	; (8002648 <HAL_SPI_MspInit+0x29c>)
 80025c6:	2240      	movs	r2, #64	; 0x40
 80025c8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ca:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <HAL_SPI_MspInit+0x29c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_SPI_MspInit+0x29c>)
 80025d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025d6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <HAL_SPI_MspInit+0x29c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <HAL_SPI_MspInit+0x29c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_SPI_MspInit+0x29c>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <HAL_SPI_MspInit+0x29c>)
 80025ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025f0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_SPI_MspInit+0x29c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80025f8:	4813      	ldr	r0, [pc, #76]	; (8002648 <HAL_SPI_MspInit+0x29c>)
 80025fa:	f000 fb4b 	bl	8002c94 <HAL_DMA_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_SPI_MspInit+0x25c>
      Error_Handler();
 8002604:	f7ff fea2 	bl	800234c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a0f      	ldr	r2, [pc, #60]	; (8002648 <HAL_SPI_MspInit+0x29c>)
 800260c:	649a      	str	r2, [r3, #72]	; 0x48
 800260e:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <HAL_SPI_MspInit+0x29c>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002614:	bf00      	nop
 8002616:	3730      	adds	r7, #48	; 0x30
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40013000 	.word	0x40013000
 8002620:	40023800 	.word	0x40023800
 8002624:	40020000 	.word	0x40020000
 8002628:	200005e4 	.word	0x200005e4
 800262c:	40026410 	.word	0x40026410
 8002630:	20000678 	.word	0x20000678
 8002634:	40026458 	.word	0x40026458
 8002638:	40003c00 	.word	0x40003c00
 800263c:	40020800 	.word	0x40020800
 8002640:	200006d8 	.word	0x200006d8
 8002644:	40026010 	.word	0x40026010
 8002648:	200004e4 	.word	0x200004e4
 800264c:	40026088 	.word	0x40026088

08002650 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a15      	ldr	r2, [pc, #84]	; (80026b4 <HAL_TIM_Base_MspInit+0x64>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d10e      	bne.n	8002680 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <HAL_TIM_Base_MspInit+0x68>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a13      	ldr	r2, [pc, #76]	; (80026b8 <HAL_TIM_Base_MspInit+0x68>)
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <HAL_TIM_Base_MspInit+0x68>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800267e:	e012      	b.n	80026a6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0d      	ldr	r2, [pc, #52]	; (80026bc <HAL_TIM_Base_MspInit+0x6c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d10d      	bne.n	80026a6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <HAL_TIM_Base_MspInit+0x68>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4a09      	ldr	r2, [pc, #36]	; (80026b8 <HAL_TIM_Base_MspInit+0x68>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	6413      	str	r3, [r2, #64]	; 0x40
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <HAL_TIM_Base_MspInit+0x68>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
}
 80026a6:	bf00      	nop
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40000400 	.word	0x40000400
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40000800 	.word	0x40000800

080026c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a24      	ldr	r2, [pc, #144]	; (8002770 <HAL_TIM_MspPostInit+0xb0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d11e      	bne.n	8002720 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	4b23      	ldr	r3, [pc, #140]	; (8002774 <HAL_TIM_MspPostInit+0xb4>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a22      	ldr	r2, [pc, #136]	; (8002774 <HAL_TIM_MspPostInit+0xb4>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <HAL_TIM_MspPostInit+0xb4>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 80026fe:	2330      	movs	r3, #48	; 0x30
 8002700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002702:	2302      	movs	r3, #2
 8002704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270a:	2300      	movs	r3, #0
 800270c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800270e:	2302      	movs	r3, #2
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	4619      	mov	r1, r3
 8002718:	4817      	ldr	r0, [pc, #92]	; (8002778 <HAL_TIM_MspPostInit+0xb8>)
 800271a:	f000 fe4b 	bl	80033b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800271e:	e022      	b.n	8002766 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a15      	ldr	r2, [pc, #84]	; (800277c <HAL_TIM_MspPostInit+0xbc>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d11d      	bne.n	8002766 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	4b11      	ldr	r3, [pc, #68]	; (8002774 <HAL_TIM_MspPostInit+0xb4>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4a10      	ldr	r2, [pc, #64]	; (8002774 <HAL_TIM_MspPostInit+0xb4>)
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	6313      	str	r3, [r2, #48]	; 0x30
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <HAL_TIM_MspPostInit+0xb4>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8002746:	2340      	movs	r3, #64	; 0x40
 8002748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274a:	2302      	movs	r3, #2
 800274c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002752:	2300      	movs	r3, #0
 8002754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002756:	2302      	movs	r3, #2
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800275a:	f107 0314 	add.w	r3, r7, #20
 800275e:	4619      	mov	r1, r3
 8002760:	4805      	ldr	r0, [pc, #20]	; (8002778 <HAL_TIM_MspPostInit+0xb8>)
 8002762:	f000 fe27 	bl	80033b4 <HAL_GPIO_Init>
}
 8002766:	bf00      	nop
 8002768:	3728      	adds	r7, #40	; 0x28
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40000400 	.word	0x40000400
 8002774:	40023800 	.word	0x40023800
 8002778:	40020400 	.word	0x40020400
 800277c:	40000800 	.word	0x40000800

08002780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002792:	e7fe      	b.n	8002792 <HardFault_Handler+0x4>

08002794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002798:	e7fe      	b.n	8002798 <MemManage_Handler+0x4>

0800279a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800279e:	e7fe      	b.n	800279e <BusFault_Handler+0x4>

080027a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a4:	e7fe      	b.n	80027a4 <UsageFault_Handler+0x4>

080027a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d4:	f000 f90a 	bl	80029ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}

080027dc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80027e0:	2004      	movs	r0, #4
 80027e2:	f000 ff9b 	bl	800371c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}

080027ea <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80027ee:	2008      	movs	r0, #8
 80027f0:	f000 ff94 	bl	800371c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80027f4:	bf00      	nop
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80027fc:	4802      	ldr	r0, [pc, #8]	; (8002808 <DMA1_Stream0_IRQHandler+0x10>)
 80027fe:	f000 fb71 	bl	8002ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	200006d8 	.word	0x200006d8

0800280c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <DMA1_Stream5_IRQHandler+0x10>)
 8002812:	f000 fb67 	bl	8002ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	200004e4 	.word	0x200004e4

08002820 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002824:	4802      	ldr	r0, [pc, #8]	; (8002830 <SPI1_IRQHandler+0x10>)
 8002826:	f003 f989 	bl	8005b3c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	2000058c 	.word	0x2000058c

08002834 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <DMA2_Stream0_IRQHandler+0x10>)
 800283a:	f000 fb53 	bl	8002ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	200005e4 	.word	0x200005e4

08002848 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <DMA2_Stream3_IRQHandler+0x10>)
 800284e:	f000 fb49 	bl	8002ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000678 	.word	0x20000678

0800285c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <OTG_FS_IRQHandler+0x10>)
 8002862:	f001 f8c3 	bl	80039ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20001c0c 	.word	0x20001c0c

08002870 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <_sbrk+0x50>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d102      	bne.n	8002886 <_sbrk+0x16>
		heap_end = &end;
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <_sbrk+0x50>)
 8002882:	4a10      	ldr	r2, [pc, #64]	; (80028c4 <_sbrk+0x54>)
 8002884:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <_sbrk+0x50>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <_sbrk+0x50>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4413      	add	r3, r2
 8002894:	466a      	mov	r2, sp
 8002896:	4293      	cmp	r3, r2
 8002898:	d907      	bls.n	80028aa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800289a:	f007 fe5d 	bl	800a558 <__errno>
 800289e:	4602      	mov	r2, r0
 80028a0:	230c      	movs	r3, #12
 80028a2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80028a4:	f04f 33ff 	mov.w	r3, #4294967295
 80028a8:	e006      	b.n	80028b8 <_sbrk+0x48>
	}

	heap_end += incr;
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <_sbrk+0x50>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	4a03      	ldr	r2, [pc, #12]	; (80028c0 <_sbrk+0x50>)
 80028b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80028b6:	68fb      	ldr	r3, [r7, #12]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	200003ac 	.word	0x200003ac
 80028c4:	20002018 	.word	0x20002018

080028c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <SystemInit+0x28>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	4a07      	ldr	r2, [pc, #28]	; (80028f0 <SystemInit+0x28>)
 80028d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <SystemInit+0x28>)
 80028de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028e2:	609a      	str	r2, [r3, #8]
#endif
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800292c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80028f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80028fa:	e003      	b.n	8002904 <LoopCopyDataInit>

080028fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80028fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002900:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002902:	3104      	adds	r1, #4

08002904 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002904:	480b      	ldr	r0, [pc, #44]	; (8002934 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002906:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002908:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800290a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800290c:	d3f6      	bcc.n	80028fc <CopyDataInit>
  ldr  r2, =_sbss
 800290e:	4a0b      	ldr	r2, [pc, #44]	; (800293c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002910:	e002      	b.n	8002918 <LoopFillZerobss>

08002912 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002912:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002914:	f842 3b04 	str.w	r3, [r2], #4

08002918 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800291a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800291c:	d3f9      	bcc.n	8002912 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800291e:	f7ff ffd3 	bl	80028c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002922:	f007 fe1f 	bl	800a564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002926:	f7ff f9cf 	bl	8001cc8 <main>
  bx  lr    
 800292a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800292c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002930:	0800c938 	.word	0x0800c938
  ldr  r0, =_sdata
 8002934:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002938:	20000390 	.word	0x20000390
  ldr  r2, =_sbss
 800293c:	20000390 	.word	0x20000390
  ldr  r3, = _ebss
 8002940:	20002018 	.word	0x20002018

08002944 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002944:	e7fe      	b.n	8002944 <ADC_IRQHandler>
	...

08002948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800294c:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <HAL_Init+0x40>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a0d      	ldr	r2, [pc, #52]	; (8002988 <HAL_Init+0x40>)
 8002952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002956:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_Init+0x40>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <HAL_Init+0x40>)
 800295e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002962:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <HAL_Init+0x40>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a07      	ldr	r2, [pc, #28]	; (8002988 <HAL_Init+0x40>)
 800296a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002970:	2003      	movs	r0, #3
 8002972:	f000 f94d 	bl	8002c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002976:	2000      	movs	r0, #0
 8002978:	f000 f808 	bl	800298c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800297c:	f7ff fcee 	bl	800235c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40023c00 	.word	0x40023c00

0800298c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_InitTick+0x54>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_InitTick+0x58>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4619      	mov	r1, r3
 800299e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f965 	bl	8002c7a <HAL_SYSTICK_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e00e      	b.n	80029d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b0f      	cmp	r3, #15
 80029be:	d80a      	bhi.n	80029d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c0:	2200      	movs	r2, #0
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	f04f 30ff 	mov.w	r0, #4294967295
 80029c8:	f000 f92d 	bl	8002c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029cc:	4a06      	ldr	r2, [pc, #24]	; (80029e8 <HAL_InitTick+0x5c>)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e000      	b.n	80029d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000040 	.word	0x20000040
 80029e4:	20000048 	.word	0x20000048
 80029e8:	20000044 	.word	0x20000044

080029ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_IncTick+0x20>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_IncTick+0x24>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4413      	add	r3, r2
 80029fc:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <HAL_IncTick+0x24>)
 80029fe:	6013      	str	r3, [r2, #0]
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000048 	.word	0x20000048
 8002a10:	20000738 	.word	0x20000738

08002a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return uwTick;
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <HAL_GetTick+0x14>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20000738 	.word	0x20000738

08002a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a34:	f7ff ffee 	bl	8002a14 <HAL_GetTick>
 8002a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d005      	beq.n	8002a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_Delay+0x40>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4413      	add	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a52:	bf00      	nop
 8002a54:	f7ff ffde 	bl	8002a14 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d8f7      	bhi.n	8002a54 <HAL_Delay+0x28>
  {
  }
}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000048 	.word	0x20000048

08002a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa2:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	60d3      	str	r3, [r2, #12]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	0a1b      	lsrs	r3, r3, #8
 8002ac2:	f003 0307 	and.w	r3, r3, #7
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	db0b      	blt.n	8002afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	f003 021f 	and.w	r2, r3, #31
 8002aec:	4907      	ldr	r1, [pc, #28]	; (8002b0c <__NVIC_EnableIRQ+0x38>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2001      	movs	r0, #1
 8002af6:	fa00 f202 	lsl.w	r2, r0, r2
 8002afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000e100 	.word	0xe000e100

08002b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	db0a      	blt.n	8002b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	490c      	ldr	r1, [pc, #48]	; (8002b5c <__NVIC_SetPriority+0x4c>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	0112      	lsls	r2, r2, #4
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	440b      	add	r3, r1
 8002b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b38:	e00a      	b.n	8002b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4908      	ldr	r1, [pc, #32]	; (8002b60 <__NVIC_SetPriority+0x50>)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	3b04      	subs	r3, #4
 8002b48:	0112      	lsls	r2, r2, #4
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	761a      	strb	r2, [r3, #24]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000e100 	.word	0xe000e100
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	; 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f1c3 0307 	rsb	r3, r3, #7
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	bf28      	it	cs
 8002b82:	2304      	movcs	r3, #4
 8002b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d902      	bls.n	8002b94 <NVIC_EncodePriority+0x30>
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3b03      	subs	r3, #3
 8002b92:	e000      	b.n	8002b96 <NVIC_EncodePriority+0x32>
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bac:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	43d9      	mvns	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	4313      	orrs	r3, r2
         );
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bdc:	d301      	bcc.n	8002be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bde:	2301      	movs	r3, #1
 8002be0:	e00f      	b.n	8002c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002be2:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <SysTick_Config+0x40>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bea:	210f      	movs	r1, #15
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf0:	f7ff ff8e 	bl	8002b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <SysTick_Config+0x40>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfa:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <SysTick_Config+0x40>)
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	e000e010 	.word	0xe000e010

08002c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ff29 	bl	8002a70 <__NVIC_SetPriorityGrouping>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c38:	f7ff ff3e 	bl	8002ab8 <__NVIC_GetPriorityGrouping>
 8002c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	6978      	ldr	r0, [r7, #20]
 8002c44:	f7ff ff8e 	bl	8002b64 <NVIC_EncodePriority>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff5d 	bl	8002b10 <__NVIC_SetPriority>
}
 8002c56:	bf00      	nop
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff31 	bl	8002ad4 <__NVIC_EnableIRQ>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ffa2 	bl	8002bcc <SysTick_Config>
 8002c88:	4603      	mov	r3, r0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ca0:	f7ff feb8 	bl	8002a14 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e099      	b.n	8002de4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd0:	e00f      	b.n	8002cf2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cd2:	f7ff fe9f 	bl	8002a14 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d908      	bls.n	8002cf2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2203      	movs	r2, #3
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e078      	b.n	8002de4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1e8      	bne.n	8002cd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	4b38      	ldr	r3, [pc, #224]	; (8002dec <HAL_DMA_Init+0x158>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d107      	bne.n	8002d5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	4313      	orrs	r3, r2
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f023 0307 	bic.w	r3, r3, #7
 8002d72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d117      	bne.n	8002db6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00e      	beq.n	8002db6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fa91 	bl	80032c0 <DMA_CheckFifoParam>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2240      	movs	r2, #64	; 0x40
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002db2:	2301      	movs	r3, #1
 8002db4:	e016      	b.n	8002de4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fa48 	bl	8003254 <DMA_CalcBaseAndBitshift>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	223f      	movs	r2, #63	; 0x3f
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	f010803f 	.word	0xf010803f

08002df0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_DMA_Start_IT+0x26>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e040      	b.n	8002e98 <HAL_DMA_Start_IT+0xa8>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d12f      	bne.n	8002e8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f9da 	bl	80031f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	223f      	movs	r2, #63	; 0x3f
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0216 	orr.w	r2, r2, #22
 8002e5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0208 	orr.w	r2, r2, #8
 8002e76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	e005      	b.n	8002e96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e92:	2302      	movs	r3, #2
 8002e94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d004      	beq.n	8002ebe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2280      	movs	r2, #128	; 0x80
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e00c      	b.n	8002ed8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2205      	movs	r2, #5
 8002ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ef0:	4b92      	ldr	r3, [pc, #584]	; (800313c <HAL_DMA_IRQHandler+0x258>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a92      	ldr	r2, [pc, #584]	; (8003140 <HAL_DMA_IRQHandler+0x25c>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	0a9b      	lsrs	r3, r3, #10
 8002efc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0e:	2208      	movs	r2, #8
 8002f10:	409a      	lsls	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d01a      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0204 	bic.w	r2, r2, #4
 8002f36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f48:	f043 0201 	orr.w	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f54:	2201      	movs	r2, #1
 8002f56:	409a      	lsls	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d012      	beq.n	8002f86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f72:	2201      	movs	r2, #1
 8002f74:	409a      	lsls	r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	f043 0202 	orr.w	r2, r3, #2
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d012      	beq.n	8002fbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00b      	beq.n	8002fbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa8:	2204      	movs	r2, #4
 8002faa:	409a      	lsls	r2, r3
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb4:	f043 0204 	orr.w	r2, r3, #4
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc0:	2210      	movs	r2, #16
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d043      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d03c      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fde:	2210      	movs	r2, #16
 8002fe0:	409a      	lsls	r2, r3
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d018      	beq.n	8003026 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d108      	bne.n	8003014 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d024      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
 8003012:	e01f      	b.n	8003054 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01b      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4798      	blx	r3
 8003024:	e016      	b.n	8003054 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0208 	bic.w	r2, r2, #8
 8003042:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003058:	2220      	movs	r2, #32
 800305a:	409a      	lsls	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 808e 	beq.w	8003182 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8086 	beq.w	8003182 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307a:	2220      	movs	r2, #32
 800307c:	409a      	lsls	r2, r3
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b05      	cmp	r3, #5
 800308c:	d136      	bne.n	80030fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0216 	bic.w	r2, r2, #22
 800309c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d103      	bne.n	80030be <HAL_DMA_IRQHandler+0x1da>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0208 	bic.w	r2, r2, #8
 80030cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d2:	223f      	movs	r2, #63	; 0x3f
 80030d4:	409a      	lsls	r2, r3
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d07d      	beq.n	80031ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	4798      	blx	r3
        }
        return;
 80030fa:	e078      	b.n	80031ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01c      	beq.n	8003144 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d108      	bne.n	800312a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311c:	2b00      	cmp	r3, #0
 800311e:	d030      	beq.n	8003182 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
 8003128:	e02b      	b.n	8003182 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d027      	beq.n	8003182 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4798      	blx	r3
 800313a:	e022      	b.n	8003182 <HAL_DMA_IRQHandler+0x29e>
 800313c:	20000040 	.word	0x20000040
 8003140:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10f      	bne.n	8003172 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0210 	bic.w	r2, r2, #16
 8003160:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	2b00      	cmp	r3, #0
 8003188:	d032      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d022      	beq.n	80031dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2205      	movs	r2, #5
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3301      	adds	r3, #1
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d307      	bcc.n	80031ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f2      	bne.n	80031ae <HAL_DMA_IRQHandler+0x2ca>
 80031c8:	e000      	b.n	80031cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
 80031ec:	e000      	b.n	80031f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80031ee:	bf00      	nop
    }
  }
}
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop

080031f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003214:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b40      	cmp	r3, #64	; 0x40
 8003224:	d108      	bne.n	8003238 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003236:	e007      	b.n	8003248 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	60da      	str	r2, [r3, #12]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	3b10      	subs	r3, #16
 8003264:	4a14      	ldr	r2, [pc, #80]	; (80032b8 <DMA_CalcBaseAndBitshift+0x64>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800326e:	4a13      	ldr	r2, [pc, #76]	; (80032bc <DMA_CalcBaseAndBitshift+0x68>)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4413      	add	r3, r2
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b03      	cmp	r3, #3
 8003280:	d909      	bls.n	8003296 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800328a:	f023 0303 	bic.w	r3, r3, #3
 800328e:	1d1a      	adds	r2, r3, #4
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	659a      	str	r2, [r3, #88]	; 0x58
 8003294:	e007      	b.n	80032a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800329e:	f023 0303 	bic.w	r3, r3, #3
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	aaaaaaab 	.word	0xaaaaaaab
 80032bc:	0800c6c4 	.word	0x0800c6c4

080032c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d11f      	bne.n	800331a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d855      	bhi.n	800338c <DMA_CheckFifoParam+0xcc>
 80032e0:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <DMA_CheckFifoParam+0x28>)
 80032e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e6:	bf00      	nop
 80032e8:	080032f9 	.word	0x080032f9
 80032ec:	0800330b 	.word	0x0800330b
 80032f0:	080032f9 	.word	0x080032f9
 80032f4:	0800338d 	.word	0x0800338d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d045      	beq.n	8003390 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003308:	e042      	b.n	8003390 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003312:	d13f      	bne.n	8003394 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003318:	e03c      	b.n	8003394 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003322:	d121      	bne.n	8003368 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b03      	cmp	r3, #3
 8003328:	d836      	bhi.n	8003398 <DMA_CheckFifoParam+0xd8>
 800332a:	a201      	add	r2, pc, #4	; (adr r2, 8003330 <DMA_CheckFifoParam+0x70>)
 800332c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003330:	08003341 	.word	0x08003341
 8003334:	08003347 	.word	0x08003347
 8003338:	08003341 	.word	0x08003341
 800333c:	08003359 	.word	0x08003359
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
      break;
 8003344:	e02f      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d024      	beq.n	800339c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003356:	e021      	b.n	800339c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003360:	d11e      	bne.n	80033a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003366:	e01b      	b.n	80033a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d902      	bls.n	8003374 <DMA_CheckFifoParam+0xb4>
 800336e:	2b03      	cmp	r3, #3
 8003370:	d003      	beq.n	800337a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003372:	e018      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      break;
 8003378:	e015      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00e      	beq.n	80033a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
      break;
 800338a:	e00b      	b.n	80033a4 <DMA_CheckFifoParam+0xe4>
      break;
 800338c:	bf00      	nop
 800338e:	e00a      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
      break;
 8003390:	bf00      	nop
 8003392:	e008      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
      break;
 8003394:	bf00      	nop
 8003396:	e006      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
      break;
 8003398:	bf00      	nop
 800339a:	e004      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
      break;
 800339c:	bf00      	nop
 800339e:	e002      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
      break;   
 80033a0:	bf00      	nop
 80033a2:	e000      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
      break;
 80033a4:	bf00      	nop
    }
  } 
  
  return status; 
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	; 0x24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	e16b      	b.n	80036a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033d0:	2201      	movs	r2, #1
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4013      	ands	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	f040 815a 	bne.w	80036a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d00b      	beq.n	800340e <HAL_GPIO_Init+0x5a>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d007      	beq.n	800340e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003402:	2b11      	cmp	r3, #17
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b12      	cmp	r3, #18
 800340c:	d130      	bne.n	8003470 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	2203      	movs	r2, #3
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003444:	2201      	movs	r2, #1
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 0201 	and.w	r2, r3, #1
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	2203      	movs	r2, #3
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0xfc>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b12      	cmp	r3, #18
 80034ae:	d123      	bne.n	80034f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	08da      	lsrs	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3208      	adds	r2, #8
 80034b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	220f      	movs	r2, #15
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	08da      	lsrs	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3208      	adds	r2, #8
 80034f2:	69b9      	ldr	r1, [r7, #24]
 80034f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	2203      	movs	r2, #3
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0203 	and.w	r2, r3, #3
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80b4 	beq.w	80036a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	4b5f      	ldr	r3, [pc, #380]	; (80036bc <HAL_GPIO_Init+0x308>)
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	4a5e      	ldr	r2, [pc, #376]	; (80036bc <HAL_GPIO_Init+0x308>)
 8003544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003548:	6453      	str	r3, [r2, #68]	; 0x44
 800354a:	4b5c      	ldr	r3, [pc, #368]	; (80036bc <HAL_GPIO_Init+0x308>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003556:	4a5a      	ldr	r2, [pc, #360]	; (80036c0 <HAL_GPIO_Init+0x30c>)
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	089b      	lsrs	r3, r3, #2
 800355c:	3302      	adds	r3, #2
 800355e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	220f      	movs	r2, #15
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a51      	ldr	r2, [pc, #324]	; (80036c4 <HAL_GPIO_Init+0x310>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d02b      	beq.n	80035da <HAL_GPIO_Init+0x226>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a50      	ldr	r2, [pc, #320]	; (80036c8 <HAL_GPIO_Init+0x314>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d025      	beq.n	80035d6 <HAL_GPIO_Init+0x222>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a4f      	ldr	r2, [pc, #316]	; (80036cc <HAL_GPIO_Init+0x318>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d01f      	beq.n	80035d2 <HAL_GPIO_Init+0x21e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a4e      	ldr	r2, [pc, #312]	; (80036d0 <HAL_GPIO_Init+0x31c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d019      	beq.n	80035ce <HAL_GPIO_Init+0x21a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a4d      	ldr	r2, [pc, #308]	; (80036d4 <HAL_GPIO_Init+0x320>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d013      	beq.n	80035ca <HAL_GPIO_Init+0x216>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a4c      	ldr	r2, [pc, #304]	; (80036d8 <HAL_GPIO_Init+0x324>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00d      	beq.n	80035c6 <HAL_GPIO_Init+0x212>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a4b      	ldr	r2, [pc, #300]	; (80036dc <HAL_GPIO_Init+0x328>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d007      	beq.n	80035c2 <HAL_GPIO_Init+0x20e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a4a      	ldr	r2, [pc, #296]	; (80036e0 <HAL_GPIO_Init+0x32c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d101      	bne.n	80035be <HAL_GPIO_Init+0x20a>
 80035ba:	2307      	movs	r3, #7
 80035bc:	e00e      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035be:	2308      	movs	r3, #8
 80035c0:	e00c      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035c2:	2306      	movs	r3, #6
 80035c4:	e00a      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035c6:	2305      	movs	r3, #5
 80035c8:	e008      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035ca:	2304      	movs	r3, #4
 80035cc:	e006      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035ce:	2303      	movs	r3, #3
 80035d0:	e004      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e002      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035da:	2300      	movs	r3, #0
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	f002 0203 	and.w	r2, r2, #3
 80035e2:	0092      	lsls	r2, r2, #2
 80035e4:	4093      	lsls	r3, r2
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035ec:	4934      	ldr	r1, [pc, #208]	; (80036c0 <HAL_GPIO_Init+0x30c>)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	089b      	lsrs	r3, r3, #2
 80035f2:	3302      	adds	r3, #2
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035fa:	4b3a      	ldr	r3, [pc, #232]	; (80036e4 <HAL_GPIO_Init+0x330>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800361e:	4a31      	ldr	r2, [pc, #196]	; (80036e4 <HAL_GPIO_Init+0x330>)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003624:	4b2f      	ldr	r3, [pc, #188]	; (80036e4 <HAL_GPIO_Init+0x330>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003648:	4a26      	ldr	r2, [pc, #152]	; (80036e4 <HAL_GPIO_Init+0x330>)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800364e:	4b25      	ldr	r3, [pc, #148]	; (80036e4 <HAL_GPIO_Init+0x330>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003672:	4a1c      	ldr	r2, [pc, #112]	; (80036e4 <HAL_GPIO_Init+0x330>)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003678:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <HAL_GPIO_Init+0x330>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800369c:	4a11      	ldr	r2, [pc, #68]	; (80036e4 <HAL_GPIO_Init+0x330>)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3301      	adds	r3, #1
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	2b0f      	cmp	r3, #15
 80036ac:	f67f ae90 	bls.w	80033d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036b0:	bf00      	nop
 80036b2:	3724      	adds	r7, #36	; 0x24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40013800 	.word	0x40013800
 80036c4:	40020000 	.word	0x40020000
 80036c8:	40020400 	.word	0x40020400
 80036cc:	40020800 	.word	0x40020800
 80036d0:	40020c00 	.word	0x40020c00
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40021400 	.word	0x40021400
 80036dc:	40021800 	.word	0x40021800
 80036e0:	40021c00 	.word	0x40021c00
 80036e4:	40013c00 	.word	0x40013c00

080036e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
 80036f4:	4613      	mov	r3, r2
 80036f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036f8:	787b      	ldrb	r3, [r7, #1]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036fe:	887a      	ldrh	r2, [r7, #2]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003704:	e003      	b.n	800370e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003706:	887b      	ldrh	r3, [r7, #2]
 8003708:	041a      	lsls	r2, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	619a      	str	r2, [r3, #24]
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003728:	695a      	ldr	r2, [r3, #20]
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d006      	beq.n	8003740 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003732:	4a05      	ldr	r2, [pc, #20]	; (8003748 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe fa72 	bl	8001c24 <HAL_GPIO_EXTI_Callback>
  }
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40013c00 	.word	0x40013c00

0800374c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800374c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800374e:	b08f      	sub	sp, #60	; 0x3c
 8003750:	af0a      	add	r7, sp, #40	; 0x28
 8003752:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e10f      	b.n	800397e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d106      	bne.n	800377e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f006 fbf1 	bl	8009f60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2203      	movs	r2, #3
 8003782:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d102      	bne.n	8003798 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f003 fbbe 	bl	8006f1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	687e      	ldr	r6, [r7, #4]
 80037aa:	466d      	mov	r5, sp
 80037ac:	f106 0410 	add.w	r4, r6, #16
 80037b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80037c0:	1d33      	adds	r3, r6, #4
 80037c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037c4:	6838      	ldr	r0, [r7, #0]
 80037c6:	f003 fa95 	bl	8006cf4 <USB_CoreInit>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0d0      	b.n	800397e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f003 fbac 	bl	8006f40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e8:	2300      	movs	r3, #0
 80037ea:	73fb      	strb	r3, [r7, #15]
 80037ec:	e04a      	b.n	8003884 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	333d      	adds	r3, #61	; 0x3d
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003802:	7bfa      	ldrb	r2, [r7, #15]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	333c      	adds	r3, #60	; 0x3c
 8003812:	7bfa      	ldrb	r2, [r7, #15]
 8003814:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003816:	7bfa      	ldrb	r2, [r7, #15]
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	b298      	uxth	r0, r3
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	3342      	adds	r3, #66	; 0x42
 800382a:	4602      	mov	r2, r0
 800382c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800382e:	7bfa      	ldrb	r2, [r7, #15]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	333f      	adds	r3, #63	; 0x3f
 800383e:	2200      	movs	r2, #0
 8003840:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	3344      	adds	r3, #68	; 0x44
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003856:	7bfa      	ldrb	r2, [r7, #15]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	3348      	adds	r3, #72	; 0x48
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800386a:	7bfa      	ldrb	r2, [r7, #15]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	3350      	adds	r3, #80	; 0x50
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	3301      	adds	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	429a      	cmp	r2, r3
 800388c:	d3af      	bcc.n	80037ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
 8003892:	e044      	b.n	800391e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003894:	7bfa      	ldrb	r2, [r7, #15]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80038a6:	2200      	movs	r2, #0
 80038a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038aa:	7bfa      	ldrb	r2, [r7, #15]
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	1a9b      	subs	r3, r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80038bc:	7bfa      	ldrb	r2, [r7, #15]
 80038be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038c0:	7bfa      	ldrb	r2, [r7, #15]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038d6:	7bfa      	ldrb	r2, [r7, #15]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	3301      	adds	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
 800391e:	7bfa      	ldrb	r2, [r7, #15]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	429a      	cmp	r2, r3
 8003926:	d3b5      	bcc.n	8003894 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	687e      	ldr	r6, [r7, #4]
 8003930:	466d      	mov	r5, sp
 8003932:	f106 0410 	add.w	r4, r6, #16
 8003936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800393a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800393c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800393e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003942:	e885 0003 	stmia.w	r5, {r0, r1}
 8003946:	1d33      	adds	r3, r6, #4
 8003948:	cb0e      	ldmia	r3, {r1, r2, r3}
 800394a:	6838      	ldr	r0, [r7, #0]
 800394c:	f003 fb22 	bl	8006f94 <USB_DevInit>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2202      	movs	r2, #2
 800395a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e00d      	b.n	800397e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f004 fb6a 	bl	8008050 <USB_DevDisconnect>

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003986 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_PCD_Start+0x1c>
 800399e:	2302      	movs	r3, #2
 80039a0:	e020      	b.n	80039e4 <HAL_PCD_Start+0x5e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d109      	bne.n	80039c6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d005      	beq.n	80039c6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f003 fa96 	bl	8006efc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f004 fb1a 	bl	800800e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039ec:	b590      	push	{r4, r7, lr}
 80039ee:	b08d      	sub	sp, #52	; 0x34
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f004 fbd8 	bl	80081b8 <USB_GetMode>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f040 839d 	bne.w	800414a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f004 fb3c 	bl	8008092 <USB_ReadInterrupts>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 8393 	beq.w	8004148 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f004 fb33 	bl	8008092 <USB_ReadInterrupts>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d107      	bne.n	8003a46 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f002 0202 	and.w	r2, r2, #2
 8003a44:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f004 fb21 	bl	8008092 <USB_ReadInterrupts>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b10      	cmp	r3, #16
 8003a58:	d161      	bne.n	8003b1e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699a      	ldr	r2, [r3, #24]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0210 	bic.w	r2, r2, #16
 8003a68:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	f003 020f 	and.w	r2, r3, #15
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4413      	add	r3, r2
 8003a86:	3304      	adds	r3, #4
 8003a88:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	0c5b      	lsrs	r3, r3, #17
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d124      	bne.n	8003ae0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d035      	beq.n	8003b0e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003aac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	6a38      	ldr	r0, [r7, #32]
 8003ab6:	f004 f987 	bl	8007dc8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ac6:	441a      	add	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	699a      	ldr	r2, [r3, #24]
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	091b      	lsrs	r3, r3, #4
 8003ad4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ad8:	441a      	add	r2, r3
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	619a      	str	r2, [r3, #24]
 8003ade:	e016      	b.n	8003b0e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	0c5b      	lsrs	r3, r3, #17
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	2b06      	cmp	r3, #6
 8003aea:	d110      	bne.n	8003b0e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003af2:	2208      	movs	r2, #8
 8003af4:	4619      	mov	r1, r3
 8003af6:	6a38      	ldr	r0, [r7, #32]
 8003af8:	f004 f966 	bl	8007dc8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	699a      	ldr	r2, [r3, #24]
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b08:	441a      	add	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0210 	orr.w	r2, r2, #16
 8003b1c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f004 fab5 	bl	8008092 <USB_ReadInterrupts>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b32:	d16e      	bne.n	8003c12 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f004 fabb 	bl	80080b8 <USB_ReadDevAllOutEpInterrupt>
 8003b42:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b44:	e062      	b.n	8003c0c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d057      	beq.n	8003c00 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f004 fae0 	bl	8008120 <USB_ReadDevOutEPInterrupt>
 8003b60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00c      	beq.n	8003b86 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fdb1 	bl	80046e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00c      	beq.n	8003baa <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003ba2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 feab 	bl	8004900 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2310      	movs	r3, #16
 8003bc4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2320      	movs	r3, #32
 8003be0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d009      	beq.n	8003c00 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bfe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	3301      	adds	r3, #1
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d199      	bne.n	8003b46 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f004 fa3b 	bl	8008092 <USB_ReadInterrupts>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c26:	f040 80c0 	bne.w	8003daa <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f004 fa5c 	bl	80080ec <USB_ReadDevAllInEpInterrupt>
 8003c34:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c3a:	e0b2      	b.n	8003da2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80a7 	beq.w	8003d96 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	4611      	mov	r1, r2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f004 fa82 	bl	800815c <USB_ReadDevInEPInterrupt>
 8003c58:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d057      	beq.n	8003d14 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69f9      	ldr	r1, [r7, #28]
 8003c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c84:	4013      	ands	r3, r2
 8003c86:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c94:	461a      	mov	r2, r3
 8003c96:	2301      	movs	r3, #1
 8003c98:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d132      	bne.n	8003d08 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	3348      	adds	r3, #72	; 0x48
 8003cb2:	6819      	ldr	r1, [r3, #0]
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4403      	add	r3, r0
 8003cc2:	3344      	adds	r3, #68	; 0x44
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4419      	add	r1, r3
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4403      	add	r3, r0
 8003cd6:	3348      	adds	r3, #72	; 0x48
 8003cd8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d113      	bne.n	8003d08 <HAL_PCD_IRQHandler+0x31c>
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	3350      	adds	r3, #80	; 0x50
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d108      	bne.n	8003d08 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d00:	461a      	mov	r2, r3
 8003d02:	2101      	movs	r1, #1
 8003d04:	f004 fa8a 	bl	800821c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f006 f9a7 	bl	800a062 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d46:	461a      	mov	r2, r3
 8003d48:	2310      	movs	r3, #16
 8003d4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d62:	461a      	mov	r2, r3
 8003d64:	2340      	movs	r3, #64	; 0x40
 8003d66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2302      	movs	r3, #2
 8003d82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 fc1b 	bl	80045cc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	3301      	adds	r3, #1
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f47f af49 	bne.w	8003c3c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f004 f96f 	bl	8008092 <USB_ReadInterrupts>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dbe:	d122      	bne.n	8003e06 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d108      	bne.n	8003df0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003de6:	2100      	movs	r1, #0
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fe27 	bl	8004a3c <HAL_PCDEx_LPM_Callback>
 8003dee:	e002      	b.n	8003df6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f006 f9ad 	bl	800a150 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f004 f941 	bl	8008092 <USB_ReadInterrupts>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e1a:	d112      	bne.n	8003e42 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d102      	bne.n	8003e32 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f006 f969 	bl	800a104 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e40:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f004 f923 	bl	8008092 <USB_ReadInterrupts>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e56:	f040 80c7 	bne.w	8003fe8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	69fa      	ldr	r2, [r7, #28]
 8003e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2110      	movs	r1, #16
 8003e74:	4618      	mov	r0, r3
 8003e76:	f003 f9f1 	bl	800725c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e7e:	e056      	b.n	8003f2e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e92:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea4:	0151      	lsls	r1, r2, #5
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	440a      	add	r2, r1
 8003eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eb2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ec4:	0151      	lsls	r1, r2, #5
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	440a      	add	r2, r1
 8003eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ece:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ed2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ee6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef8:	0151      	lsls	r1, r2, #5
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	440a      	add	r2, r1
 8003efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f18:	0151      	lsls	r1, r2, #5
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	440a      	add	r2, r1
 8003f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f26:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d3a3      	bcc.n	8003e80 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f46:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f4a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d016      	beq.n	8003f82 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f64:	f043 030b 	orr.w	r3, r3, #11
 8003f68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f7a:	f043 030b 	orr.w	r3, r3, #11
 8003f7e:	6453      	str	r3, [r2, #68]	; 0x44
 8003f80:	e015      	b.n	8003fae <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f94:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003f98:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa8:	f043 030b 	orr.w	r3, r3, #11
 8003fac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fbc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003fc0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f004 f922 	bl	800821c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695a      	ldr	r2, [r3, #20]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003fe6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f004 f850 	bl	8008092 <USB_ReadInterrupts>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffc:	d124      	bne.n	8004048 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f004 f8e6 	bl	80081d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f003 f986 	bl	800731e <USB_GetDevSpeed>
 8004012:	4603      	mov	r3, r0
 8004014:	461a      	mov	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681c      	ldr	r4, [r3, #0]
 800401e:	f001 f945 	bl	80052ac <HAL_RCC_GetHCLKFreq>
 8004022:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004028:	b2db      	uxtb	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	4620      	mov	r0, r4
 800402e:	f002 fec3 	bl	8006db8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f006 f83d 	bl	800a0b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004046:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f004 f820 	bl	8008092 <USB_ReadInterrupts>
 8004052:	4603      	mov	r3, r0
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b08      	cmp	r3, #8
 800405a:	d10a      	bne.n	8004072 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f006 f81a 	bl	800a096 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f002 0208 	and.w	r2, r2, #8
 8004070:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f004 f80b 	bl	8008092 <USB_ReadInterrupts>
 800407c:	4603      	mov	r3, r0
 800407e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004086:	d10f      	bne.n	80040a8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	b2db      	uxtb	r3, r3
 8004090:	4619      	mov	r1, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f006 f87c 	bl	800a190 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80040a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f003 fff0 	bl	8008092 <USB_ReadInterrupts>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040bc:	d10f      	bne.n	80040de <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	4619      	mov	r1, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f006 f84f 	bl	800a16c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80040dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f003 ffd5 	bl	8008092 <USB_ReadInterrupts>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f2:	d10a      	bne.n	800410a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f006 f85d 	bl	800a1b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004108:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f003 ffbf 	bl	8008092 <USB_ReadInterrupts>
 8004114:	4603      	mov	r3, r0
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b04      	cmp	r3, #4
 800411c:	d115      	bne.n	800414a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f006 f84d 	bl	800a1d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6859      	ldr	r1, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	e000      	b.n	800414a <HAL_PCD_IRQHandler+0x75e>
      return;
 8004148:	bf00      	nop
    }
  }
}
 800414a:	3734      	adds	r7, #52	; 0x34
 800414c:	46bd      	mov	sp, r7
 800414e:	bd90      	pop	{r4, r7, pc}

08004150 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_PCD_SetAddress+0x1a>
 8004166:	2302      	movs	r3, #2
 8004168:	e013      	b.n	8004192 <HAL_PCD_SetAddress+0x42>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	78fa      	ldrb	r2, [r7, #3]
 8004176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	4611      	mov	r1, r2
 8004182:	4618      	mov	r0, r3
 8004184:	f003 ff1d 	bl	8007fc2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	4608      	mov	r0, r1
 80041a4:	4611      	mov	r1, r2
 80041a6:	461a      	mov	r2, r3
 80041a8:	4603      	mov	r3, r0
 80041aa:	70fb      	strb	r3, [r7, #3]
 80041ac:	460b      	mov	r3, r1
 80041ae:	803b      	strh	r3, [r7, #0]
 80041b0:	4613      	mov	r3, r2
 80041b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	da0f      	bge.n	80041e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	f003 020f 	and.w	r2, r3, #15
 80041c6:	4613      	mov	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	1a9b      	subs	r3, r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	3338      	adds	r3, #56	; 0x38
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	4413      	add	r3, r2
 80041d4:	3304      	adds	r3, #4
 80041d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2201      	movs	r2, #1
 80041dc:	705a      	strb	r2, [r3, #1]
 80041de:	e00f      	b.n	8004200 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	f003 020f 	and.w	r2, r3, #15
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	4413      	add	r3, r2
 80041f6:	3304      	adds	r3, #4
 80041f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	b2da      	uxtb	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800420c:	883a      	ldrh	r2, [r7, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	78ba      	ldrb	r2, [r7, #2]
 8004216:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	785b      	ldrb	r3, [r3, #1]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d004      	beq.n	800422a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800422a:	78bb      	ldrb	r3, [r7, #2]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d102      	bne.n	8004236 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_PCD_EP_Open+0xaa>
 8004240:	2302      	movs	r3, #2
 8004242:	e00e      	b.n	8004262 <HAL_PCD_EP_Open+0xc8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68f9      	ldr	r1, [r7, #12]
 8004252:	4618      	mov	r0, r3
 8004254:	f003 f888 	bl	8007368 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004260:	7afb      	ldrb	r3, [r7, #11]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	460b      	mov	r3, r1
 8004274:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004276:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800427a:	2b00      	cmp	r3, #0
 800427c:	da0f      	bge.n	800429e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800427e:	78fb      	ldrb	r3, [r7, #3]
 8004280:	f003 020f 	and.w	r2, r3, #15
 8004284:	4613      	mov	r3, r2
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	1a9b      	subs	r3, r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	3338      	adds	r3, #56	; 0x38
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	4413      	add	r3, r2
 8004292:	3304      	adds	r3, #4
 8004294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	705a      	strb	r2, [r3, #1]
 800429c:	e00f      	b.n	80042be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	f003 020f 	and.w	r2, r3, #15
 80042a4:	4613      	mov	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	4413      	add	r3, r2
 80042b4:	3304      	adds	r3, #4
 80042b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_PCD_EP_Close+0x6e>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e00e      	b.n	80042f6 <HAL_PCD_EP_Close+0x8c>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68f9      	ldr	r1, [r7, #12]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f003 f8c6 	bl	8007478 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b086      	sub	sp, #24
 8004302:	af00      	add	r7, sp, #0
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	460b      	mov	r3, r1
 800430c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800430e:	7afb      	ldrb	r3, [r7, #11]
 8004310:	f003 020f 	and.w	r2, r3, #15
 8004314:	4613      	mov	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	3304      	adds	r3, #4
 8004326:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2200      	movs	r2, #0
 8004338:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2200      	movs	r2, #0
 800433e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004340:	7afb      	ldrb	r3, [r7, #11]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	b2da      	uxtb	r2, r3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d102      	bne.n	800435a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800435a:	7afb      	ldrb	r3, [r7, #11]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	2b00      	cmp	r3, #0
 8004362:	d109      	bne.n	8004378 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	6979      	ldr	r1, [r7, #20]
 8004372:	f003 fba1 	bl	8007ab8 <USB_EP0StartXfer>
 8004376:	e008      	b.n	800438a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	461a      	mov	r2, r3
 8004384:	6979      	ldr	r1, [r7, #20]
 8004386:	f003 f953 	bl	8007630 <USB_EPStartXfer>
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	f003 020f 	and.w	r2, r3, #15
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80043b6:	681b      	ldr	r3, [r3, #0]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	460b      	mov	r3, r1
 80043d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d4:	7afb      	ldrb	r3, [r7, #11]
 80043d6:	f003 020f 	and.w	r2, r3, #15
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	3338      	adds	r3, #56	; 0x38
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	3304      	adds	r3, #4
 80043ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2200      	movs	r2, #0
 80043fc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2201      	movs	r2, #1
 8004402:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004404:	7afb      	ldrb	r3, [r7, #11]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	b2da      	uxtb	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d102      	bne.n	800441e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800441e:	7afb      	ldrb	r3, [r7, #11]
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	2b00      	cmp	r3, #0
 8004426:	d109      	bne.n	800443c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	6979      	ldr	r1, [r7, #20]
 8004436:	f003 fb3f 	bl	8007ab8 <USB_EP0StartXfer>
 800443a:	e008      	b.n	800444e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	6979      	ldr	r1, [r7, #20]
 800444a:	f003 f8f1 	bl	8007630 <USB_EPStartXfer>
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	f003 020f 	and.w	r2, r3, #15
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	429a      	cmp	r2, r3
 8004470:	d901      	bls.n	8004476 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e050      	b.n	8004518 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004476:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800447a:	2b00      	cmp	r3, #0
 800447c:	da0f      	bge.n	800449e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	f003 020f 	and.w	r2, r3, #15
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	1a9b      	subs	r3, r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	3338      	adds	r3, #56	; 0x38
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	4413      	add	r3, r2
 8004492:	3304      	adds	r3, #4
 8004494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	705a      	strb	r2, [r3, #1]
 800449c:	e00d      	b.n	80044ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	4413      	add	r3, r2
 80044b0:	3304      	adds	r3, #4
 80044b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_PCD_EP_SetStall+0x82>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e01e      	b.n	8004518 <HAL_PCD_EP_SetStall+0xc0>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68f9      	ldr	r1, [r7, #12]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f003 fc96 	bl	8007e1a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044ee:	78fb      	ldrb	r3, [r7, #3]
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10a      	bne.n	800450e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	b2d9      	uxtb	r1, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004508:	461a      	mov	r2, r3
 800450a:	f003 fe87 	bl	800821c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	f003 020f 	and.w	r2, r3, #15
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	429a      	cmp	r2, r3
 8004538:	d901      	bls.n	800453e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e042      	b.n	80045c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800453e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004542:	2b00      	cmp	r3, #0
 8004544:	da0f      	bge.n	8004566 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004546:	78fb      	ldrb	r3, [r7, #3]
 8004548:	f003 020f 	and.w	r2, r3, #15
 800454c:	4613      	mov	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	3338      	adds	r3, #56	; 0x38
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	4413      	add	r3, r2
 800455a:	3304      	adds	r3, #4
 800455c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	705a      	strb	r2, [r3, #1]
 8004564:	e00f      	b.n	8004586 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	f003 020f 	and.w	r2, r3, #15
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	4413      	add	r3, r2
 800457c:	3304      	adds	r3, #4
 800457e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	b2da      	uxtb	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_PCD_EP_ClrStall+0x86>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e00e      	b.n	80045c4 <HAL_PCD_EP_ClrStall+0xa4>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68f9      	ldr	r1, [r7, #12]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f003 fc9e 	bl	8007ef6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08a      	sub	sp, #40	; 0x28
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	3338      	adds	r3, #56	; 0x38
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	4413      	add	r3, r2
 80045f0:	3304      	adds	r3, #4
 80045f2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	699a      	ldr	r2, [r3, #24]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d901      	bls.n	8004604 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e06c      	b.n	80046de <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	695a      	ldr	r2, [r3, #20]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	69fa      	ldr	r2, [r7, #28]
 8004616:	429a      	cmp	r2, r3
 8004618:	d902      	bls.n	8004620 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	3303      	adds	r3, #3
 8004624:	089b      	lsrs	r3, r3, #2
 8004626:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004628:	e02b      	b.n	8004682 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	695a      	ldr	r2, [r3, #20]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	429a      	cmp	r2, r3
 800463e:	d902      	bls.n	8004646 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	3303      	adds	r3, #3
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	68d9      	ldr	r1, [r3, #12]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800465e:	b2db      	uxtb	r3, r3
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	4603      	mov	r3, r0
 8004664:	6978      	ldr	r0, [r7, #20]
 8004666:	f003 fb7a 	bl	8007d5e <USB_WritePacket>

    ep->xfer_buff  += len;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	441a      	add	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	441a      	add	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	b29b      	uxth	r3, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	429a      	cmp	r2, r3
 8004696:	d809      	bhi.n	80046ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	699a      	ldr	r2, [r3, #24]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d203      	bcs.n	80046ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1be      	bne.n	800462a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	695a      	ldr	r2, [r3, #20]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d811      	bhi.n	80046dc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	2201      	movs	r2, #1
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	6939      	ldr	r1, [r7, #16]
 80046d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046d8:	4013      	ands	r3, r2
 80046da:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3720      	adds	r7, #32
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	333c      	adds	r3, #60	; 0x3c
 8004700:	3304      	adds	r3, #4
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b01      	cmp	r3, #1
 800471c:	f040 80a0 	bne.w	8004860 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d015      	beq.n	8004756 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4a72      	ldr	r2, [pc, #456]	; (80048f8 <PCD_EP_OutXfrComplete_int+0x210>)
 800472e:	4293      	cmp	r3, r2
 8004730:	f240 80dd 	bls.w	80048ee <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 80d7 	beq.w	80048ee <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474c:	461a      	mov	r2, r3
 800474e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004752:	6093      	str	r3, [r2, #8]
 8004754:	e0cb      	b.n	80048ee <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d009      	beq.n	8004774 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476c:	461a      	mov	r2, r3
 800476e:	2320      	movs	r3, #32
 8004770:	6093      	str	r3, [r2, #8]
 8004772:	e0bc      	b.n	80048ee <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 80b7 	bne.w	80048ee <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4a5d      	ldr	r2, [pc, #372]	; (80048f8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d90f      	bls.n	80047a8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479e:	461a      	mov	r2, r3
 80047a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a4:	6093      	str	r3, [r2, #8]
 80047a6:	e0a2      	b.n	80048ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047ba:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	0159      	lsls	r1, r3, #5
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	440b      	add	r3, r1
 80047c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80047ce:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4403      	add	r3, r0
 80047de:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80047e2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047f6:	6819      	ldr	r1, [r3, #0]
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4403      	add	r3, r0
 8004806:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4419      	add	r1, r3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	4613      	mov	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4403      	add	r3, r0
 800481c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004820:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d114      	bne.n	8004852 <PCD_EP_OutXfrComplete_int+0x16a>
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	4613      	mov	r3, r2
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	1a9b      	subs	r3, r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d108      	bne.n	8004852 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6818      	ldr	r0, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800484a:	461a      	mov	r2, r3
 800484c:	2101      	movs	r1, #1
 800484e:	f003 fce5 	bl	800821c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	b2db      	uxtb	r3, r3
 8004856:	4619      	mov	r1, r3
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f005 fbe7 	bl	800a02c <HAL_PCD_DataOutStageCallback>
 800485e:	e046      	b.n	80048ee <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a26      	ldr	r2, [pc, #152]	; (80048fc <PCD_EP_OutXfrComplete_int+0x214>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d124      	bne.n	80048b2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487e:	461a      	mov	r2, r3
 8004880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004884:	6093      	str	r3, [r2, #8]
 8004886:	e032      	b.n	80048ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 0320 	and.w	r3, r3, #32
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489e:	461a      	mov	r2, r3
 80048a0:	2320      	movs	r3, #32
 80048a2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f005 fbbe 	bl	800a02c <HAL_PCD_DataOutStageCallback>
 80048b0:	e01d      	b.n	80048ee <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d114      	bne.n	80048e2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	1a9b      	subs	r3, r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d108      	bne.n	80048e2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6818      	ldr	r0, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048da:	461a      	mov	r2, r3
 80048dc:	2100      	movs	r1, #0
 80048de:	f003 fc9d 	bl	800821c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	4619      	mov	r1, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f005 fb9f 	bl	800a02c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	4f54300a 	.word	0x4f54300a
 80048fc:	4f54310a 	.word	0x4f54310a

08004900 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	333c      	adds	r3, #60	; 0x3c
 8004918:	3304      	adds	r3, #4
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a15      	ldr	r2, [pc, #84]	; (8004988 <PCD_EP_OutSetupPacket_int+0x88>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d90e      	bls.n	8004954 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800493c:	2b00      	cmp	r3, #0
 800493e:	d009      	beq.n	8004954 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494c:	461a      	mov	r2, r3
 800494e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004952:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f005 fb57 	bl	800a008 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4a0a      	ldr	r2, [pc, #40]	; (8004988 <PCD_EP_OutSetupPacket_int+0x88>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d90c      	bls.n	800497c <PCD_EP_OutSetupPacket_int+0x7c>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d108      	bne.n	800497c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004974:	461a      	mov	r2, r3
 8004976:	2101      	movs	r1, #1
 8004978:	f003 fc50 	bl	800821c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	4f54300a 	.word	0x4f54300a

0800498c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	70fb      	strb	r3, [r7, #3]
 8004998:	4613      	mov	r3, r2
 800499a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d107      	bne.n	80049ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80049aa:	883b      	ldrh	r3, [r7, #0]
 80049ac:	0419      	lsls	r1, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28
 80049b8:	e028      	b.n	8004a0c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	0c1b      	lsrs	r3, r3, #16
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	4413      	add	r3, r2
 80049c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049c8:	2300      	movs	r3, #0
 80049ca:	73fb      	strb	r3, [r7, #15]
 80049cc:	e00d      	b.n	80049ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	3340      	adds	r3, #64	; 0x40
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	4413      	add	r3, r2
 80049e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	3301      	adds	r3, #1
 80049e8:	73fb      	strb	r3, [r7, #15]
 80049ea:	7bfa      	ldrb	r2, [r7, #15]
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d3ec      	bcc.n	80049ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049f4:	883b      	ldrh	r3, [r7, #0]
 80049f6:	0418      	lsls	r0, r3, #16
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6819      	ldr	r1, [r3, #0]
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	4302      	orrs	r2, r0
 8004a04:	3340      	adds	r3, #64	; 0x40
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	460b      	mov	r3, r1
 8004a24:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	887a      	ldrh	r2, [r7, #2]
 8004a2c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e25b      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d075      	beq.n	8004b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a72:	4ba3      	ldr	r3, [pc, #652]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 030c 	and.w	r3, r3, #12
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d00c      	beq.n	8004a98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a7e:	4ba0      	ldr	r3, [pc, #640]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d112      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a8a:	4b9d      	ldr	r3, [pc, #628]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a96:	d10b      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a98:	4b99      	ldr	r3, [pc, #612]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d05b      	beq.n	8004b5c <HAL_RCC_OscConfig+0x108>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d157      	bne.n	8004b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e236      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab8:	d106      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x74>
 8004aba:	4b91      	ldr	r3, [pc, #580]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a90      	ldr	r2, [pc, #576]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e01d      	b.n	8004b04 <HAL_RCC_OscConfig+0xb0>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ad0:	d10c      	bne.n	8004aec <HAL_RCC_OscConfig+0x98>
 8004ad2:	4b8b      	ldr	r3, [pc, #556]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a8a      	ldr	r2, [pc, #552]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	4b88      	ldr	r3, [pc, #544]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a87      	ldr	r2, [pc, #540]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e00b      	b.n	8004b04 <HAL_RCC_OscConfig+0xb0>
 8004aec:	4b84      	ldr	r3, [pc, #528]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a83      	ldr	r2, [pc, #524]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	4b81      	ldr	r3, [pc, #516]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a80      	ldr	r2, [pc, #512]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d013      	beq.n	8004b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0c:	f7fd ff82 	bl	8002a14 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b14:	f7fd ff7e 	bl	8002a14 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b64      	cmp	r3, #100	; 0x64
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e1fb      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b26:	4b76      	ldr	r3, [pc, #472]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0f0      	beq.n	8004b14 <HAL_RCC_OscConfig+0xc0>
 8004b32:	e014      	b.n	8004b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b34:	f7fd ff6e 	bl	8002a14 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b3c:	f7fd ff6a 	bl	8002a14 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b64      	cmp	r3, #100	; 0x64
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e1e7      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4e:	4b6c      	ldr	r3, [pc, #432]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f0      	bne.n	8004b3c <HAL_RCC_OscConfig+0xe8>
 8004b5a:	e000      	b.n	8004b5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d063      	beq.n	8004c32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b6a:	4b65      	ldr	r3, [pc, #404]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 030c 	and.w	r3, r3, #12
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b76:	4b62      	ldr	r3, [pc, #392]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d11c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b82:	4b5f      	ldr	r3, [pc, #380]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d116      	bne.n	8004bbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8e:	4b5c      	ldr	r3, [pc, #368]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x152>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d001      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e1bb      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba6:	4b56      	ldr	r3, [pc, #344]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4952      	ldr	r1, [pc, #328]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bba:	e03a      	b.n	8004c32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d020      	beq.n	8004c06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc4:	4b4f      	ldr	r3, [pc, #316]	; (8004d04 <HAL_RCC_OscConfig+0x2b0>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bca:	f7fd ff23 	bl	8002a14 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bd2:	f7fd ff1f 	bl	8002a14 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e19c      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be4:	4b46      	ldr	r3, [pc, #280]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0f0      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf0:	4b43      	ldr	r3, [pc, #268]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	4940      	ldr	r1, [pc, #256]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	600b      	str	r3, [r1, #0]
 8004c04:	e015      	b.n	8004c32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c06:	4b3f      	ldr	r3, [pc, #252]	; (8004d04 <HAL_RCC_OscConfig+0x2b0>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0c:	f7fd ff02 	bl	8002a14 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c14:	f7fd fefe 	bl	8002a14 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e17b      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c26:	4b36      	ldr	r3, [pc, #216]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1f0      	bne.n	8004c14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d030      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d016      	beq.n	8004c74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c46:	4b30      	ldr	r3, [pc, #192]	; (8004d08 <HAL_RCC_OscConfig+0x2b4>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4c:	f7fd fee2 	bl	8002a14 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c54:	f7fd fede 	bl	8002a14 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e15b      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c66:	4b26      	ldr	r3, [pc, #152]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCC_OscConfig+0x200>
 8004c72:	e015      	b.n	8004ca0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c74:	4b24      	ldr	r3, [pc, #144]	; (8004d08 <HAL_RCC_OscConfig+0x2b4>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c7a:	f7fd fecb 	bl	8002a14 <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c80:	e008      	b.n	8004c94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c82:	f7fd fec7 	bl	8002a14 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e144      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c94:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f0      	bne.n	8004c82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80a0 	beq.w	8004dee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb2:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10f      	bne.n	8004cde <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	4a0e      	ldr	r2, [pc, #56]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8004cce:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd6:	60bb      	str	r3, [r7, #8]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cde:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <HAL_RCC_OscConfig+0x2b8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d121      	bne.n	8004d2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cea:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <HAL_RCC_OscConfig+0x2b8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a07      	ldr	r2, [pc, #28]	; (8004d0c <HAL_RCC_OscConfig+0x2b8>)
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf6:	f7fd fe8d 	bl	8002a14 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfc:	e011      	b.n	8004d22 <HAL_RCC_OscConfig+0x2ce>
 8004cfe:	bf00      	nop
 8004d00:	40023800 	.word	0x40023800
 8004d04:	42470000 	.word	0x42470000
 8004d08:	42470e80 	.word	0x42470e80
 8004d0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d10:	f7fd fe80 	bl	8002a14 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e0fd      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d22:	4b81      	ldr	r3, [pc, #516]	; (8004f28 <HAL_RCC_OscConfig+0x4d4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d106      	bne.n	8004d44 <HAL_RCC_OscConfig+0x2f0>
 8004d36:	4b7d      	ldr	r3, [pc, #500]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	4a7c      	ldr	r2, [pc, #496]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d3c:	f043 0301 	orr.w	r3, r3, #1
 8004d40:	6713      	str	r3, [r2, #112]	; 0x70
 8004d42:	e01c      	b.n	8004d7e <HAL_RCC_OscConfig+0x32a>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b05      	cmp	r3, #5
 8004d4a:	d10c      	bne.n	8004d66 <HAL_RCC_OscConfig+0x312>
 8004d4c:	4b77      	ldr	r3, [pc, #476]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d50:	4a76      	ldr	r2, [pc, #472]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d52:	f043 0304 	orr.w	r3, r3, #4
 8004d56:	6713      	str	r3, [r2, #112]	; 0x70
 8004d58:	4b74      	ldr	r3, [pc, #464]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5c:	4a73      	ldr	r2, [pc, #460]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	6713      	str	r3, [r2, #112]	; 0x70
 8004d64:	e00b      	b.n	8004d7e <HAL_RCC_OscConfig+0x32a>
 8004d66:	4b71      	ldr	r3, [pc, #452]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6a:	4a70      	ldr	r2, [pc, #448]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d6c:	f023 0301 	bic.w	r3, r3, #1
 8004d70:	6713      	str	r3, [r2, #112]	; 0x70
 8004d72:	4b6e      	ldr	r3, [pc, #440]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d76:	4a6d      	ldr	r2, [pc, #436]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004d78:	f023 0304 	bic.w	r3, r3, #4
 8004d7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d015      	beq.n	8004db2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d86:	f7fd fe45 	bl	8002a14 <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8c:	e00a      	b.n	8004da4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d8e:	f7fd fe41 	bl	8002a14 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e0bc      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da4:	4b61      	ldr	r3, [pc, #388]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0ee      	beq.n	8004d8e <HAL_RCC_OscConfig+0x33a>
 8004db0:	e014      	b.n	8004ddc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db2:	f7fd fe2f 	bl	8002a14 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db8:	e00a      	b.n	8004dd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dba:	f7fd fe2b 	bl	8002a14 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e0a6      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd0:	4b56      	ldr	r3, [pc, #344]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1ee      	bne.n	8004dba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ddc:	7dfb      	ldrb	r3, [r7, #23]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d105      	bne.n	8004dee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de2:	4b52      	ldr	r3, [pc, #328]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	4a51      	ldr	r2, [pc, #324]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 8092 	beq.w	8004f1c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004df8:	4b4c      	ldr	r3, [pc, #304]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 030c 	and.w	r3, r3, #12
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d05c      	beq.n	8004ebe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d141      	bne.n	8004e90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e0c:	4b48      	ldr	r3, [pc, #288]	; (8004f30 <HAL_RCC_OscConfig+0x4dc>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e12:	f7fd fdff 	bl	8002a14 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e1a:	f7fd fdfb 	bl	8002a14 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e078      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e2c:	4b3f      	ldr	r3, [pc, #252]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1f0      	bne.n	8004e1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	019b      	lsls	r3, r3, #6
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4e:	085b      	lsrs	r3, r3, #1
 8004e50:	3b01      	subs	r3, #1
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	061b      	lsls	r3, r3, #24
 8004e5c:	4933      	ldr	r1, [pc, #204]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e62:	4b33      	ldr	r3, [pc, #204]	; (8004f30 <HAL_RCC_OscConfig+0x4dc>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e68:	f7fd fdd4 	bl	8002a14 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fd fdd0 	bl	8002a14 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e04d      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e82:	4b2a      	ldr	r3, [pc, #168]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0f0      	beq.n	8004e70 <HAL_RCC_OscConfig+0x41c>
 8004e8e:	e045      	b.n	8004f1c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e90:	4b27      	ldr	r3, [pc, #156]	; (8004f30 <HAL_RCC_OscConfig+0x4dc>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e96:	f7fd fdbd 	bl	8002a14 <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e9e:	f7fd fdb9 	bl	8002a14 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e036      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb0:	4b1e      	ldr	r3, [pc, #120]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1f0      	bne.n	8004e9e <HAL_RCC_OscConfig+0x44a>
 8004ebc:	e02e      	b.n	8004f1c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e029      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004eca:	4b18      	ldr	r3, [pc, #96]	; (8004f2c <HAL_RCC_OscConfig+0x4d8>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d11c      	bne.n	8004f18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d115      	bne.n	8004f18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d10d      	bne.n	8004f18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d106      	bne.n	8004f18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d001      	beq.n	8004f1c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e000      	b.n	8004f1e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40007000 	.word	0x40007000
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	42470060 	.word	0x42470060

08004f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0cc      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f48:	4b68      	ldr	r3, [pc, #416]	; (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d90c      	bls.n	8004f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f56:	4b65      	ldr	r3, [pc, #404]	; (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5e:	4b63      	ldr	r3, [pc, #396]	; (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d001      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0b8      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d020      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f88:	4b59      	ldr	r3, [pc, #356]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	4a58      	ldr	r2, [pc, #352]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fa0:	4b53      	ldr	r3, [pc, #332]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	4a52      	ldr	r2, [pc, #328]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fac:	4b50      	ldr	r3, [pc, #320]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	494d      	ldr	r1, [pc, #308]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d044      	beq.n	8005054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d107      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fd2:	4b47      	ldr	r3, [pc, #284]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d119      	bne.n	8005012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e07f      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d003      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d107      	bne.n	8005002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff2:	4b3f      	ldr	r3, [pc, #252]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e06f      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005002:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e067      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005012:	4b37      	ldr	r3, [pc, #220]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f023 0203 	bic.w	r2, r3, #3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	4934      	ldr	r1, [pc, #208]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005020:	4313      	orrs	r3, r2
 8005022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005024:	f7fd fcf6 	bl	8002a14 <HAL_GetTick>
 8005028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502a:	e00a      	b.n	8005042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800502c:	f7fd fcf2 	bl	8002a14 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	f241 3288 	movw	r2, #5000	; 0x1388
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e04f      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005042:	4b2b      	ldr	r3, [pc, #172]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 020c 	and.w	r2, r3, #12
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	429a      	cmp	r2, r3
 8005052:	d1eb      	bne.n	800502c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005054:	4b25      	ldr	r3, [pc, #148]	; (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d20c      	bcs.n	800507c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005062:	4b22      	ldr	r3, [pc, #136]	; (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800506a:	4b20      	ldr	r3, [pc, #128]	; (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d001      	beq.n	800507c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e032      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005088:	4b19      	ldr	r3, [pc, #100]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	4916      	ldr	r1, [pc, #88]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	4313      	orrs	r3, r2
 8005098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d009      	beq.n	80050ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050a6:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	490e      	ldr	r1, [pc, #56]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050ba:	f000 f821 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 80050be:	4601      	mov	r1, r0
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	4a0a      	ldr	r2, [pc, #40]	; (80050f4 <HAL_RCC_ClockConfig+0x1c0>)
 80050cc:	5cd3      	ldrb	r3, [r2, r3]
 80050ce:	fa21 f303 	lsr.w	r3, r1, r3
 80050d2:	4a09      	ldr	r2, [pc, #36]	; (80050f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050d6:	4b09      	ldr	r3, [pc, #36]	; (80050fc <HAL_RCC_ClockConfig+0x1c8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fd fc56 	bl	800298c <HAL_InitTick>

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40023c00 	.word	0x40023c00
 80050f0:	40023800 	.word	0x40023800
 80050f4:	0800c6b4 	.word	0x0800c6b4
 80050f8:	20000040 	.word	0x20000040
 80050fc:	20000044 	.word	0x20000044

08005100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	2300      	movs	r3, #0
 8005110:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005116:	4b63      	ldr	r3, [pc, #396]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	2b04      	cmp	r3, #4
 8005120:	d007      	beq.n	8005132 <HAL_RCC_GetSysClockFreq+0x32>
 8005122:	2b08      	cmp	r3, #8
 8005124:	d008      	beq.n	8005138 <HAL_RCC_GetSysClockFreq+0x38>
 8005126:	2b00      	cmp	r3, #0
 8005128:	f040 80b4 	bne.w	8005294 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800512c:	4b5e      	ldr	r3, [pc, #376]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800512e:	60bb      	str	r3, [r7, #8]
       break;
 8005130:	e0b3      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005132:	4b5d      	ldr	r3, [pc, #372]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005134:	60bb      	str	r3, [r7, #8]
      break;
 8005136:	e0b0      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005138:	4b5a      	ldr	r3, [pc, #360]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005140:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005142:	4b58      	ldr	r3, [pc, #352]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d04a      	beq.n	80051e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800514e:	4b55      	ldr	r3, [pc, #340]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	099b      	lsrs	r3, r3, #6
 8005154:	f04f 0400 	mov.w	r4, #0
 8005158:	f240 11ff 	movw	r1, #511	; 0x1ff
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	ea03 0501 	and.w	r5, r3, r1
 8005164:	ea04 0602 	and.w	r6, r4, r2
 8005168:	4629      	mov	r1, r5
 800516a:	4632      	mov	r2, r6
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	f04f 0400 	mov.w	r4, #0
 8005174:	0154      	lsls	r4, r2, #5
 8005176:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800517a:	014b      	lsls	r3, r1, #5
 800517c:	4619      	mov	r1, r3
 800517e:	4622      	mov	r2, r4
 8005180:	1b49      	subs	r1, r1, r5
 8005182:	eb62 0206 	sbc.w	r2, r2, r6
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	f04f 0400 	mov.w	r4, #0
 800518e:	0194      	lsls	r4, r2, #6
 8005190:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005194:	018b      	lsls	r3, r1, #6
 8005196:	1a5b      	subs	r3, r3, r1
 8005198:	eb64 0402 	sbc.w	r4, r4, r2
 800519c:	f04f 0100 	mov.w	r1, #0
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	00e2      	lsls	r2, r4, #3
 80051a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80051aa:	00d9      	lsls	r1, r3, #3
 80051ac:	460b      	mov	r3, r1
 80051ae:	4614      	mov	r4, r2
 80051b0:	195b      	adds	r3, r3, r5
 80051b2:	eb44 0406 	adc.w	r4, r4, r6
 80051b6:	f04f 0100 	mov.w	r1, #0
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	02a2      	lsls	r2, r4, #10
 80051c0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80051c4:	0299      	lsls	r1, r3, #10
 80051c6:	460b      	mov	r3, r1
 80051c8:	4614      	mov	r4, r2
 80051ca:	4618      	mov	r0, r3
 80051cc:	4621      	mov	r1, r4
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f04f 0400 	mov.w	r4, #0
 80051d4:	461a      	mov	r2, r3
 80051d6:	4623      	mov	r3, r4
 80051d8:	f7fb fce6 	bl	8000ba8 <__aeabi_uldivmod>
 80051dc:	4603      	mov	r3, r0
 80051de:	460c      	mov	r4, r1
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	e049      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e4:	4b2f      	ldr	r3, [pc, #188]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	099b      	lsrs	r3, r3, #6
 80051ea:	f04f 0400 	mov.w	r4, #0
 80051ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051f2:	f04f 0200 	mov.w	r2, #0
 80051f6:	ea03 0501 	and.w	r5, r3, r1
 80051fa:	ea04 0602 	and.w	r6, r4, r2
 80051fe:	4629      	mov	r1, r5
 8005200:	4632      	mov	r2, r6
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	f04f 0400 	mov.w	r4, #0
 800520a:	0154      	lsls	r4, r2, #5
 800520c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005210:	014b      	lsls	r3, r1, #5
 8005212:	4619      	mov	r1, r3
 8005214:	4622      	mov	r2, r4
 8005216:	1b49      	subs	r1, r1, r5
 8005218:	eb62 0206 	sbc.w	r2, r2, r6
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	f04f 0400 	mov.w	r4, #0
 8005224:	0194      	lsls	r4, r2, #6
 8005226:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800522a:	018b      	lsls	r3, r1, #6
 800522c:	1a5b      	subs	r3, r3, r1
 800522e:	eb64 0402 	sbc.w	r4, r4, r2
 8005232:	f04f 0100 	mov.w	r1, #0
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	00e2      	lsls	r2, r4, #3
 800523c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005240:	00d9      	lsls	r1, r3, #3
 8005242:	460b      	mov	r3, r1
 8005244:	4614      	mov	r4, r2
 8005246:	195b      	adds	r3, r3, r5
 8005248:	eb44 0406 	adc.w	r4, r4, r6
 800524c:	f04f 0100 	mov.w	r1, #0
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	02a2      	lsls	r2, r4, #10
 8005256:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800525a:	0299      	lsls	r1, r3, #10
 800525c:	460b      	mov	r3, r1
 800525e:	4614      	mov	r4, r2
 8005260:	4618      	mov	r0, r3
 8005262:	4621      	mov	r1, r4
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f04f 0400 	mov.w	r4, #0
 800526a:	461a      	mov	r2, r3
 800526c:	4623      	mov	r3, r4
 800526e:	f7fb fc9b 	bl	8000ba8 <__aeabi_uldivmod>
 8005272:	4603      	mov	r3, r0
 8005274:	460c      	mov	r4, r1
 8005276:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005278:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	3301      	adds	r3, #1
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	60bb      	str	r3, [r7, #8]
      break;
 8005292:	e002      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005294:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005296:	60bb      	str	r3, [r7, #8]
      break;
 8005298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800529a:	68bb      	ldr	r3, [r7, #8]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052a4:	40023800 	.word	0x40023800
 80052a8:	00f42400 	.word	0x00f42400

080052ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b0:	4b03      	ldr	r3, [pc, #12]	; (80052c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052b2:	681b      	ldr	r3, [r3, #0]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20000040 	.word	0x20000040

080052c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e056      	b.n	8005384 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d106      	bne.n	80052f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7fd f85b 	bl	80023ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2202      	movs	r2, #2
 80052fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800530c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	431a      	orrs	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	ea42 0103 	orr.w	r1, r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	0c1b      	lsrs	r3, r3, #16
 8005354:	f003 0104 	and.w	r1, r3, #4
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69da      	ldr	r2, [r3, #28]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005372:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	4613      	mov	r3, r2
 800539a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d101      	bne.n	80053ae <HAL_SPI_Transmit+0x22>
 80053aa:	2302      	movs	r3, #2
 80053ac:	e11e      	b.n	80055ec <HAL_SPI_Transmit+0x260>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053b6:	f7fd fb2d 	bl	8002a14 <HAL_GetTick>
 80053ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053bc:	88fb      	ldrh	r3, [r7, #6]
 80053be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d002      	beq.n	80053d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053cc:	2302      	movs	r3, #2
 80053ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053d0:	e103      	b.n	80055da <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <HAL_SPI_Transmit+0x52>
 80053d8:	88fb      	ldrh	r3, [r7, #6]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d102      	bne.n	80053e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053e2:	e0fa      	b.n	80055da <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2203      	movs	r2, #3
 80053e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	88fa      	ldrh	r2, [r7, #6]
 80053fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	88fa      	ldrh	r2, [r7, #6]
 8005402:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800542a:	d107      	bne.n	800543c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800543a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b40      	cmp	r3, #64	; 0x40
 8005448:	d007      	beq.n	800545a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005458:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005462:	d14b      	bne.n	80054fc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <HAL_SPI_Transmit+0xe6>
 800546c:	8afb      	ldrh	r3, [r7, #22]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d13e      	bne.n	80054f0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005476:	881a      	ldrh	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005482:	1c9a      	adds	r2, r3, #2
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005496:	e02b      	b.n	80054f0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d112      	bne.n	80054cc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	881a      	ldrh	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b6:	1c9a      	adds	r2, r3, #2
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80054ca:	e011      	b.n	80054f0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054cc:	f7fd faa2 	bl	8002a14 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d803      	bhi.n	80054e4 <HAL_SPI_Transmit+0x158>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e2:	d102      	bne.n	80054ea <HAL_SPI_Transmit+0x15e>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d102      	bne.n	80054f0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054ee:	e074      	b.n	80055da <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1ce      	bne.n	8005498 <HAL_SPI_Transmit+0x10c>
 80054fa:	e04c      	b.n	8005596 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <HAL_SPI_Transmit+0x17e>
 8005504:	8afb      	ldrh	r3, [r7, #22]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d140      	bne.n	800558c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	330c      	adds	r3, #12
 8005514:	7812      	ldrb	r2, [r2, #0]
 8005516:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005530:	e02c      	b.n	800558c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b02      	cmp	r3, #2
 800553e:	d113      	bne.n	8005568 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	330c      	adds	r3, #12
 800554a:	7812      	ldrb	r2, [r2, #0]
 800554c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800555c:	b29b      	uxth	r3, r3
 800555e:	3b01      	subs	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	86da      	strh	r2, [r3, #54]	; 0x36
 8005566:	e011      	b.n	800558c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005568:	f7fd fa54 	bl	8002a14 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d803      	bhi.n	8005580 <HAL_SPI_Transmit+0x1f4>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557e:	d102      	bne.n	8005586 <HAL_SPI_Transmit+0x1fa>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d102      	bne.n	800558c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	77fb      	strb	r3, [r7, #31]
          goto error;
 800558a:	e026      	b.n	80055da <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1cd      	bne.n	8005532 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	6839      	ldr	r1, [r7, #0]
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 fdc0 	bl	8006120 <SPI_EndRxTxTransaction>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10a      	bne.n	80055ca <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055b4:	2300      	movs	r3, #0
 80055b6:	613b      	str	r3, [r7, #16]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	613b      	str	r3, [r7, #16]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	77fb      	strb	r3, [r7, #31]
 80055d6:	e000      	b.n	80055da <HAL_SPI_Transmit+0x24e>
  }

error:
 80055d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3720      	adds	r7, #32
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08c      	sub	sp, #48	; 0x30
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005602:	2301      	movs	r3, #1
 8005604:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_SPI_TransmitReceive+0x26>
 8005616:	2302      	movs	r3, #2
 8005618:	e18a      	b.n	8005930 <HAL_SPI_TransmitReceive+0x33c>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005622:	f7fd f9f7 	bl	8002a14 <HAL_GetTick>
 8005626:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800562e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005638:	887b      	ldrh	r3, [r7, #2]
 800563a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800563c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005640:	2b01      	cmp	r3, #1
 8005642:	d00f      	beq.n	8005664 <HAL_SPI_TransmitReceive+0x70>
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800564a:	d107      	bne.n	800565c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d103      	bne.n	800565c <HAL_SPI_TransmitReceive+0x68>
 8005654:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005658:	2b04      	cmp	r3, #4
 800565a:	d003      	beq.n	8005664 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800565c:	2302      	movs	r3, #2
 800565e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005662:	e15b      	b.n	800591c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d005      	beq.n	8005676 <HAL_SPI_TransmitReceive+0x82>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <HAL_SPI_TransmitReceive+0x82>
 8005670:	887b      	ldrh	r3, [r7, #2]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800567c:	e14e      	b.n	800591c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b04      	cmp	r3, #4
 8005688:	d003      	beq.n	8005692 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2205      	movs	r2, #5
 800568e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	887a      	ldrh	r2, [r7, #2]
 80056a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	887a      	ldrh	r2, [r7, #2]
 80056a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	887a      	ldrh	r2, [r7, #2]
 80056b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	887a      	ldrh	r2, [r7, #2]
 80056ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d007      	beq.n	80056e6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ee:	d178      	bne.n	80057e2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <HAL_SPI_TransmitReceive+0x10a>
 80056f8:	8b7b      	ldrh	r3, [r7, #26]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d166      	bne.n	80057cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	881a      	ldrh	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	1c9a      	adds	r2, r3, #2
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005722:	e053      	b.n	80057cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b02      	cmp	r3, #2
 8005730:	d11b      	bne.n	800576a <HAL_SPI_TransmitReceive+0x176>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d016      	beq.n	800576a <HAL_SPI_TransmitReceive+0x176>
 800573c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573e:	2b01      	cmp	r3, #1
 8005740:	d113      	bne.n	800576a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005746:	881a      	ldrh	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005752:	1c9a      	adds	r2, r3, #2
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b01      	cmp	r3, #1
 8005776:	d119      	bne.n	80057ac <HAL_SPI_TransmitReceive+0x1b8>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577c:	b29b      	uxth	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d014      	beq.n	80057ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	b292      	uxth	r2, r2
 800578e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	1c9a      	adds	r2, r3, #2
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057a8:	2301      	movs	r3, #1
 80057aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80057ac:	f7fd f932 	bl	8002a14 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d807      	bhi.n	80057cc <HAL_SPI_TransmitReceive+0x1d8>
 80057bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c2:	d003      	beq.n	80057cc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057ca:	e0a7      	b.n	800591c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1a6      	bne.n	8005724 <HAL_SPI_TransmitReceive+0x130>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057da:	b29b      	uxth	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1a1      	bne.n	8005724 <HAL_SPI_TransmitReceive+0x130>
 80057e0:	e07c      	b.n	80058dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <HAL_SPI_TransmitReceive+0x1fc>
 80057ea:	8b7b      	ldrh	r3, [r7, #26]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d16b      	bne.n	80058c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	330c      	adds	r3, #12
 80057fa:	7812      	ldrb	r2, [r2, #0]
 80057fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800580c:	b29b      	uxth	r3, r3
 800580e:	3b01      	subs	r3, #1
 8005810:	b29a      	uxth	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005816:	e057      	b.n	80058c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b02      	cmp	r3, #2
 8005824:	d11c      	bne.n	8005860 <HAL_SPI_TransmitReceive+0x26c>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d017      	beq.n	8005860 <HAL_SPI_TransmitReceive+0x26c>
 8005830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005832:	2b01      	cmp	r3, #1
 8005834:	d114      	bne.n	8005860 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	330c      	adds	r3, #12
 8005840:	7812      	ldrb	r2, [r2, #0]
 8005842:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	1c5a      	adds	r2, r3, #1
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b01      	cmp	r3, #1
 800586c:	d119      	bne.n	80058a2 <HAL_SPI_TransmitReceive+0x2ae>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005872:	b29b      	uxth	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	d014      	beq.n	80058a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005894:	b29b      	uxth	r3, r3
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800589e:	2301      	movs	r3, #1
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058a2:	f7fd f8b7 	bl	8002a14 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d803      	bhi.n	80058ba <HAL_SPI_TransmitReceive+0x2c6>
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b8:	d102      	bne.n	80058c0 <HAL_SPI_TransmitReceive+0x2cc>
 80058ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d103      	bne.n	80058c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80058c6:	e029      	b.n	800591c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1a2      	bne.n	8005818 <HAL_SPI_TransmitReceive+0x224>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d19d      	bne.n	8005818 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 fc1d 	bl	8006120 <SPI_EndRxTxTransaction>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d006      	beq.n	80058fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2220      	movs	r2, #32
 80058f6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80058f8:	e010      	b.n	800591c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10b      	bne.n	800591a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005902:	2300      	movs	r3, #0
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	617b      	str	r3, [r7, #20]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	e000      	b.n	800591c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800591a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800592c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005930:	4618      	mov	r0, r3
 8005932:	3730      	adds	r7, #48	; 0x30
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005954:	2302      	movs	r3, #2
 8005956:	e0e3      	b.n	8005b20 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005966:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800596e:	7dbb      	ldrb	r3, [r7, #22]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d00d      	beq.n	8005990 <HAL_SPI_TransmitReceive_DMA+0x58>
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800597a:	d106      	bne.n	800598a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <HAL_SPI_TransmitReceive_DMA+0x52>
 8005984:	7dbb      	ldrb	r3, [r7, #22]
 8005986:	2b04      	cmp	r3, #4
 8005988:	d002      	beq.n	8005990 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800598a:	2302      	movs	r3, #2
 800598c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800598e:	e0c2      	b.n	8005b16 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800599c:	887b      	ldrh	r3, [r7, #2]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d102      	bne.n	80059a8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059a6:	e0b6      	b.n	8005b16 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d003      	beq.n	80059bc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2205      	movs	r2, #5
 80059b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	887a      	ldrh	r2, [r7, #2]
 80059cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	887a      	ldrh	r2, [r7, #2]
 80059d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	887a      	ldrh	r2, [r7, #2]
 80059de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	887a      	ldrh	r2, [r7, #2]
 80059e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d108      	bne.n	8005a10 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a02:	4a49      	ldr	r2, [pc, #292]	; (8005b28 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005a04:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a0a:	4a48      	ldr	r2, [pc, #288]	; (8005b2c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005a0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8005a0e:	e007      	b.n	8005a20 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a14:	4a46      	ldr	r2, [pc, #280]	; (8005b30 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8005a16:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1c:	4a45      	ldr	r2, [pc, #276]	; (8005b34 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8005a1e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a24:	4a44      	ldr	r2, [pc, #272]	; (8005b38 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8005a26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	330c      	adds	r3, #12
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a40:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a46:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005a48:	f7fd f9d2 	bl	8002df0 <HAL_DMA_Start_IT>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00c      	beq.n	8005a6c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a56:	f043 0210 	orr.w	r2, r3, #16
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005a6a:	e054      	b.n	8005b16 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a80:	2200      	movs	r2, #0
 8005a82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a88:	2200      	movs	r2, #0
 8005a8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a90:	2200      	movs	r2, #0
 8005a92:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a98:	2200      	movs	r2, #0
 8005a9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	330c      	adds	r3, #12
 8005aac:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ab2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005ab4:	f7fd f99c 	bl	8002df0 <HAL_DMA_Start_IT>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00c      	beq.n	8005ad8 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac2:	f043 0210 	orr.w	r2, r3, #16
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005ad6:	e01e      	b.n	8005b16 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae2:	2b40      	cmp	r3, #64	; 0x40
 8005ae4:	d007      	beq.n	8005af6 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005af4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0220 	orr.w	r2, r2, #32
 8005b04:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 0202 	orr.w	r2, r2, #2
 8005b14:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	08005ee1 	.word	0x08005ee1
 8005b2c:	08005da9 	.word	0x08005da9
 8005b30:	08005efd 	.word	0x08005efd
 8005b34:	08005e51 	.word	0x08005e51
 8005b38:	08005f19 	.word	0x08005f19

08005b3c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b088      	sub	sp, #32
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	099b      	lsrs	r3, r3, #6
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10f      	bne.n	8005b80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	099b      	lsrs	r3, r3, #6
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d004      	beq.n	8005b80 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	4798      	blx	r3
    return;
 8005b7e:	e0d8      	b.n	8005d32 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	085b      	lsrs	r3, r3, #1
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00a      	beq.n	8005ba2 <HAL_SPI_IRQHandler+0x66>
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	09db      	lsrs	r3, r3, #7
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d004      	beq.n	8005ba2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	4798      	blx	r3
    return;
 8005ba0:	e0c7      	b.n	8005d32 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10c      	bne.n	8005bc8 <HAL_SPI_IRQHandler+0x8c>
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	099b      	lsrs	r3, r3, #6
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d106      	bne.n	8005bc8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	0a1b      	lsrs	r3, r3, #8
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 80b5 	beq.w	8005d32 <HAL_SPI_IRQHandler+0x1f6>
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 80ae 	beq.w	8005d32 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	099b      	lsrs	r3, r3, #6
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d023      	beq.n	8005c2a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d011      	beq.n	8005c12 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf2:	f043 0204 	orr.w	r2, r3, #4
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	e00b      	b.n	8005c2a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c12:	2300      	movs	r3, #0
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	613b      	str	r3, [r7, #16]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	613b      	str	r3, [r7, #16]
 8005c26:	693b      	ldr	r3, [r7, #16]
        return;
 8005c28:	e083      	b.n	8005d32 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	095b      	lsrs	r3, r3, #5
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d014      	beq.n	8005c60 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3a:	f043 0201 	orr.w	r2, r3, #1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	0a1b      	lsrs	r3, r3, #8
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00c      	beq.n	8005c86 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c70:	f043 0208 	orr.w	r2, r3, #8
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60bb      	str	r3, [r7, #8]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	60bb      	str	r3, [r7, #8]
 8005c84:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d050      	beq.n	8005d30 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c9c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d104      	bne.n	8005cba <HAL_SPI_IRQHandler+0x17e>
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d034      	beq.n	8005d24 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0203 	bic.w	r2, r2, #3
 8005cc8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d011      	beq.n	8005cf6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd6:	4a18      	ldr	r2, [pc, #96]	; (8005d38 <HAL_SPI_IRQHandler+0x1fc>)
 8005cd8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fd f8de 	bl	8002ea0 <HAL_DMA_Abort_IT>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d016      	beq.n	8005d2c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d02:	4a0d      	ldr	r2, [pc, #52]	; (8005d38 <HAL_SPI_IRQHandler+0x1fc>)
 8005d04:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fd f8c8 	bl	8002ea0 <HAL_DMA_Abort_IT>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00a      	beq.n	8005d2c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005d22:	e003      	b.n	8005d2c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f827 	bl	8005d78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d2a:	e000      	b.n	8005d2e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005d2c:	bf00      	nop
    return;
 8005d2e:	bf00      	nop
 8005d30:	bf00      	nop
  }
}
 8005d32:	3720      	adds	r7, #32
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	08005f59 	.word	0x08005f59

08005d3c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d9a:	b2db      	uxtb	r3, r3
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005db6:	f7fc fe2d 	bl	8002a14 <HAL_GetTick>
 8005dba:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dca:	d03b      	beq.n	8005e44 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0220 	bic.w	r2, r2, #32
 8005dda:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10d      	bne.n	8005e00 <SPI_DMAReceiveCplt+0x58>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dec:	d108      	bne.n	8005e00 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0203 	bic.w	r2, r2, #3
 8005dfc:	605a      	str	r2, [r3, #4]
 8005dfe:	e007      	b.n	8005e10 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0201 	bic.w	r2, r2, #1
 8005e0e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	2164      	movs	r1, #100	; 0x64
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f91d 	bl	8006054 <SPI_EndRxTransaction>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2220      	movs	r2, #32
 8005e24:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f7ff ff9b 	bl	8005d78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005e42:	e002      	b.n	8005e4a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f7ff ff79 	bl	8005d3c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e5e:	f7fc fdd9 	bl	8002a14 <HAL_GetTick>
 8005e62:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e72:	d02f      	beq.n	8005ed4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0220 	bic.w	r2, r2, #32
 8005e82:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	2164      	movs	r1, #100	; 0x64
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f949 	bl	8006120 <SPI_EndRxTxTransaction>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e98:	f043 0220 	orr.w	r2, r3, #32
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0203 	bic.w	r2, r2, #3
 8005eae:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7ff ff53 	bl	8005d78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005ed2:	e002      	b.n	8005eda <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f7fb fe45 	bl	8001b64 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f7ff ff2e 	bl	8005d50 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ef4:	bf00      	nop
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f7ff ff2a 	bl	8005d64 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f10:	bf00      	nop
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0203 	bic.w	r2, r2, #3
 8005f34:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3a:	f043 0210 	orr.w	r2, r3, #16
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f7ff ff14 	bl	8005d78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f50:	bf00      	nop
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f7ff ff00 	bl	8005d78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f78:	bf00      	nop
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f90:	e04c      	b.n	800602c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f98:	d048      	beq.n	800602c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005f9a:	f7fc fd3b 	bl	8002a14 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d902      	bls.n	8005fb0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d13d      	bne.n	800602c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fbe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fc8:	d111      	bne.n	8005fee <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fd2:	d004      	beq.n	8005fde <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fdc:	d107      	bne.n	8005fee <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff6:	d10f      	bne.n	8006018 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006016:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e00f      	b.n	800604c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	4013      	ands	r3, r2
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	429a      	cmp	r2, r3
 800603a:	bf0c      	ite	eq
 800603c:	2301      	moveq	r3, #1
 800603e:	2300      	movne	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	461a      	mov	r2, r3
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	429a      	cmp	r2, r3
 8006048:	d1a3      	bne.n	8005f92 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af02      	add	r7, sp, #8
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006068:	d111      	bne.n	800608e <SPI_EndRxTransaction+0x3a>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006072:	d004      	beq.n	800607e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800607c:	d107      	bne.n	800608e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800608c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006096:	d12a      	bne.n	80060ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a0:	d012      	beq.n	80060c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2200      	movs	r2, #0
 80060aa:	2180      	movs	r1, #128	; 0x80
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f7ff ff67 	bl	8005f80 <SPI_WaitFlagStateUntilTimeout>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d02d      	beq.n	8006114 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060bc:	f043 0220 	orr.w	r2, r3, #32
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e026      	b.n	8006116 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2200      	movs	r2, #0
 80060d0:	2101      	movs	r1, #1
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f7ff ff54 	bl	8005f80 <SPI_WaitFlagStateUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01a      	beq.n	8006114 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e2:	f043 0220 	orr.w	r2, r3, #32
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e013      	b.n	8006116 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2200      	movs	r2, #0
 80060f6:	2101      	movs	r1, #1
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f7ff ff41 	bl	8005f80 <SPI_WaitFlagStateUntilTimeout>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d007      	beq.n	8006114 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006108:	f043 0220 	orr.w	r2, r3, #32
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e000      	b.n	8006116 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
	...

08006120 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b088      	sub	sp, #32
 8006124:	af02      	add	r7, sp, #8
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800612c:	4b1b      	ldr	r3, [pc, #108]	; (800619c <SPI_EndRxTxTransaction+0x7c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a1b      	ldr	r2, [pc, #108]	; (80061a0 <SPI_EndRxTxTransaction+0x80>)
 8006132:	fba2 2303 	umull	r2, r3, r2, r3
 8006136:	0d5b      	lsrs	r3, r3, #21
 8006138:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800613c:	fb02 f303 	mul.w	r3, r2, r3
 8006140:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800614a:	d112      	bne.n	8006172 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2200      	movs	r2, #0
 8006154:	2180      	movs	r1, #128	; 0x80
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f7ff ff12 	bl	8005f80 <SPI_WaitFlagStateUntilTimeout>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d016      	beq.n	8006190 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006166:	f043 0220 	orr.w	r2, r3, #32
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e00f      	b.n	8006192 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	3b01      	subs	r3, #1
 800617c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006188:	2b80      	cmp	r3, #128	; 0x80
 800618a:	d0f2      	beq.n	8006172 <SPI_EndRxTxTransaction+0x52>
 800618c:	e000      	b.n	8006190 <SPI_EndRxTxTransaction+0x70>
        break;
 800618e:	bf00      	nop
  }

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	20000040 	.word	0x20000040
 80061a0:	165e9f81 	.word	0x165e9f81

080061a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e01d      	b.n	80061f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7fc fa40 	bl	8002650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3304      	adds	r3, #4
 80061e0:	4619      	mov	r1, r3
 80061e2:	4610      	mov	r0, r2
 80061e4:	f000 f9fa 	bl	80065dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e01d      	b.n	8006248 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d106      	bne.n	8006226 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f815 	bl	8006250 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2202      	movs	r2, #2
 800622a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3304      	adds	r3, #4
 8006236:	4619      	mov	r1, r3
 8006238:	4610      	mov	r0, r2
 800623a:	f000 f9cf 	bl	80065dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2201      	movs	r2, #1
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fc9a 	bl	8006bb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a15      	ldr	r2, [pc, #84]	; (80062d8 <HAL_TIM_PWM_Start+0x74>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d004      	beq.n	8006290 <HAL_TIM_PWM_Start+0x2c>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a14      	ldr	r2, [pc, #80]	; (80062dc <HAL_TIM_PWM_Start+0x78>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d101      	bne.n	8006294 <HAL_TIM_PWM_Start+0x30>
 8006290:	2301      	movs	r3, #1
 8006292:	e000      	b.n	8006296 <HAL_TIM_PWM_Start+0x32>
 8006294:	2300      	movs	r3, #0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d007      	beq.n	80062aa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 0307 	and.w	r3, r3, #7
 80062b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b06      	cmp	r3, #6
 80062ba:	d007      	beq.n	80062cc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0201 	orr.w	r2, r2, #1
 80062ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40010000 	.word	0x40010000
 80062dc:	40010400 	.word	0x40010400

080062e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e0b4      	b.n	8006464 <HAL_TIM_PWM_ConfigChannel+0x184>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2202      	movs	r2, #2
 8006306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b0c      	cmp	r3, #12
 800630e:	f200 809f 	bhi.w	8006450 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006312:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006318:	0800634d 	.word	0x0800634d
 800631c:	08006451 	.word	0x08006451
 8006320:	08006451 	.word	0x08006451
 8006324:	08006451 	.word	0x08006451
 8006328:	0800638d 	.word	0x0800638d
 800632c:	08006451 	.word	0x08006451
 8006330:	08006451 	.word	0x08006451
 8006334:	08006451 	.word	0x08006451
 8006338:	080063cf 	.word	0x080063cf
 800633c:	08006451 	.word	0x08006451
 8006340:	08006451 	.word	0x08006451
 8006344:	08006451 	.word	0x08006451
 8006348:	0800640f 	.word	0x0800640f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	4618      	mov	r0, r3
 8006354:	f000 f9e2 	bl	800671c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699a      	ldr	r2, [r3, #24]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0208 	orr.w	r2, r2, #8
 8006366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699a      	ldr	r2, [r3, #24]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0204 	bic.w	r2, r2, #4
 8006376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6999      	ldr	r1, [r3, #24]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	691a      	ldr	r2, [r3, #16]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	619a      	str	r2, [r3, #24]
      break;
 800638a:	e062      	b.n	8006452 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 fa32 	bl	80067fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6999      	ldr	r1, [r3, #24]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	021a      	lsls	r2, r3, #8
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	619a      	str	r2, [r3, #24]
      break;
 80063cc:	e041      	b.n	8006452 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68b9      	ldr	r1, [r7, #8]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 fa87 	bl	80068e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69da      	ldr	r2, [r3, #28]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f042 0208 	orr.w	r2, r2, #8
 80063e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69da      	ldr	r2, [r3, #28]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0204 	bic.w	r2, r2, #4
 80063f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69d9      	ldr	r1, [r3, #28]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	61da      	str	r2, [r3, #28]
      break;
 800640c:	e021      	b.n	8006452 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68b9      	ldr	r1, [r7, #8]
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fadb 	bl	80069d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69da      	ldr	r2, [r3, #28]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69da      	ldr	r2, [r3, #28]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69d9      	ldr	r1, [r3, #28]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	021a      	lsls	r2, r3, #8
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	61da      	str	r2, [r3, #28]
      break;
 800644e:	e000      	b.n	8006452 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006450:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <HAL_TIM_ConfigClockSource+0x18>
 8006480:	2302      	movs	r3, #2
 8006482:	e0a6      	b.n	80065d2 <HAL_TIM_ConfigClockSource+0x166>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b40      	cmp	r3, #64	; 0x40
 80064ba:	d067      	beq.n	800658c <HAL_TIM_ConfigClockSource+0x120>
 80064bc:	2b40      	cmp	r3, #64	; 0x40
 80064be:	d80b      	bhi.n	80064d8 <HAL_TIM_ConfigClockSource+0x6c>
 80064c0:	2b10      	cmp	r3, #16
 80064c2:	d073      	beq.n	80065ac <HAL_TIM_ConfigClockSource+0x140>
 80064c4:	2b10      	cmp	r3, #16
 80064c6:	d802      	bhi.n	80064ce <HAL_TIM_ConfigClockSource+0x62>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d06f      	beq.n	80065ac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80064cc:	e078      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80064ce:	2b20      	cmp	r3, #32
 80064d0:	d06c      	beq.n	80065ac <HAL_TIM_ConfigClockSource+0x140>
 80064d2:	2b30      	cmp	r3, #48	; 0x30
 80064d4:	d06a      	beq.n	80065ac <HAL_TIM_ConfigClockSource+0x140>
      break;
 80064d6:	e073      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80064d8:	2b70      	cmp	r3, #112	; 0x70
 80064da:	d00d      	beq.n	80064f8 <HAL_TIM_ConfigClockSource+0x8c>
 80064dc:	2b70      	cmp	r3, #112	; 0x70
 80064de:	d804      	bhi.n	80064ea <HAL_TIM_ConfigClockSource+0x7e>
 80064e0:	2b50      	cmp	r3, #80	; 0x50
 80064e2:	d033      	beq.n	800654c <HAL_TIM_ConfigClockSource+0xe0>
 80064e4:	2b60      	cmp	r3, #96	; 0x60
 80064e6:	d041      	beq.n	800656c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80064e8:	e06a      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80064ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ee:	d066      	beq.n	80065be <HAL_TIM_ConfigClockSource+0x152>
 80064f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064f4:	d017      	beq.n	8006526 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80064f6:	e063      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6818      	ldr	r0, [r3, #0]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	6899      	ldr	r1, [r3, #8]
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f000 fb32 	bl	8006b70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800651a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	609a      	str	r2, [r3, #8]
      break;
 8006524:	e04c      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6818      	ldr	r0, [r3, #0]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	6899      	ldr	r1, [r3, #8]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f000 fb1b 	bl	8006b70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006548:	609a      	str	r2, [r3, #8]
      break;
 800654a:	e039      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6818      	ldr	r0, [r3, #0]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	6859      	ldr	r1, [r3, #4]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	461a      	mov	r2, r3
 800655a:	f000 fa8f 	bl	8006a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2150      	movs	r1, #80	; 0x50
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fae8 	bl	8006b3a <TIM_ITRx_SetConfig>
      break;
 800656a:	e029      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6818      	ldr	r0, [r3, #0]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	6859      	ldr	r1, [r3, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	461a      	mov	r2, r3
 800657a:	f000 faae 	bl	8006ada <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2160      	movs	r1, #96	; 0x60
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fad8 	bl	8006b3a <TIM_ITRx_SetConfig>
      break;
 800658a:	e019      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	6859      	ldr	r1, [r3, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	461a      	mov	r2, r3
 800659a:	f000 fa6f 	bl	8006a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2140      	movs	r1, #64	; 0x40
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 fac8 	bl	8006b3a <TIM_ITRx_SetConfig>
      break;
 80065aa:	e009      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4619      	mov	r1, r3
 80065b6:	4610      	mov	r0, r2
 80065b8:	f000 fabf 	bl	8006b3a <TIM_ITRx_SetConfig>
      break;
 80065bc:	e000      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80065be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a40      	ldr	r2, [pc, #256]	; (80066f0 <TIM_Base_SetConfig+0x114>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d013      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065fa:	d00f      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a3d      	ldr	r2, [pc, #244]	; (80066f4 <TIM_Base_SetConfig+0x118>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d00b      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a3c      	ldr	r2, [pc, #240]	; (80066f8 <TIM_Base_SetConfig+0x11c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d007      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a3b      	ldr	r2, [pc, #236]	; (80066fc <TIM_Base_SetConfig+0x120>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d003      	beq.n	800661c <TIM_Base_SetConfig+0x40>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a3a      	ldr	r2, [pc, #232]	; (8006700 <TIM_Base_SetConfig+0x124>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d108      	bne.n	800662e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a2f      	ldr	r2, [pc, #188]	; (80066f0 <TIM_Base_SetConfig+0x114>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d02b      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663c:	d027      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a2c      	ldr	r2, [pc, #176]	; (80066f4 <TIM_Base_SetConfig+0x118>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d023      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a2b      	ldr	r2, [pc, #172]	; (80066f8 <TIM_Base_SetConfig+0x11c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d01f      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a2a      	ldr	r2, [pc, #168]	; (80066fc <TIM_Base_SetConfig+0x120>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d01b      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a29      	ldr	r2, [pc, #164]	; (8006700 <TIM_Base_SetConfig+0x124>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d017      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a28      	ldr	r2, [pc, #160]	; (8006704 <TIM_Base_SetConfig+0x128>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a27      	ldr	r2, [pc, #156]	; (8006708 <TIM_Base_SetConfig+0x12c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00f      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a26      	ldr	r2, [pc, #152]	; (800670c <TIM_Base_SetConfig+0x130>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00b      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a25      	ldr	r2, [pc, #148]	; (8006710 <TIM_Base_SetConfig+0x134>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d007      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a24      	ldr	r2, [pc, #144]	; (8006714 <TIM_Base_SetConfig+0x138>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_Base_SetConfig+0xb2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a23      	ldr	r2, [pc, #140]	; (8006718 <TIM_Base_SetConfig+0x13c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d108      	bne.n	80066a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a0a      	ldr	r2, [pc, #40]	; (80066f0 <TIM_Base_SetConfig+0x114>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d003      	beq.n	80066d4 <TIM_Base_SetConfig+0xf8>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a0c      	ldr	r2, [pc, #48]	; (8006700 <TIM_Base_SetConfig+0x124>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d103      	bne.n	80066dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	615a      	str	r2, [r3, #20]
}
 80066e2:	bf00      	nop
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40010000 	.word	0x40010000
 80066f4:	40000400 	.word	0x40000400
 80066f8:	40000800 	.word	0x40000800
 80066fc:	40000c00 	.word	0x40000c00
 8006700:	40010400 	.word	0x40010400
 8006704:	40014000 	.word	0x40014000
 8006708:	40014400 	.word	0x40014400
 800670c:	40014800 	.word	0x40014800
 8006710:	40001800 	.word	0x40001800
 8006714:	40001c00 	.word	0x40001c00
 8006718:	40002000 	.word	0x40002000

0800671c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f023 0201 	bic.w	r2, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0303 	bic.w	r3, r3, #3
 8006752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f023 0302 	bic.w	r3, r3, #2
 8006764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a20      	ldr	r2, [pc, #128]	; (80067f4 <TIM_OC1_SetConfig+0xd8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d003      	beq.n	8006780 <TIM_OC1_SetConfig+0x64>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a1f      	ldr	r2, [pc, #124]	; (80067f8 <TIM_OC1_SetConfig+0xdc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d10c      	bne.n	800679a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f023 0308 	bic.w	r3, r3, #8
 8006786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f023 0304 	bic.w	r3, r3, #4
 8006798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a15      	ldr	r2, [pc, #84]	; (80067f4 <TIM_OC1_SetConfig+0xd8>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d003      	beq.n	80067aa <TIM_OC1_SetConfig+0x8e>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a14      	ldr	r2, [pc, #80]	; (80067f8 <TIM_OC1_SetConfig+0xdc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d111      	bne.n	80067ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	621a      	str	r2, [r3, #32]
}
 80067e8:	bf00      	nop
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	40010000 	.word	0x40010000
 80067f8:	40010400 	.word	0x40010400

080067fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f023 0210 	bic.w	r2, r3, #16
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800682a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	021b      	lsls	r3, r3, #8
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4313      	orrs	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f023 0320 	bic.w	r3, r3, #32
 8006846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	4313      	orrs	r3, r2
 8006852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a22      	ldr	r2, [pc, #136]	; (80068e0 <TIM_OC2_SetConfig+0xe4>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d003      	beq.n	8006864 <TIM_OC2_SetConfig+0x68>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a21      	ldr	r2, [pc, #132]	; (80068e4 <TIM_OC2_SetConfig+0xe8>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d10d      	bne.n	8006880 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800686a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	4313      	orrs	r3, r2
 8006876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800687e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a17      	ldr	r2, [pc, #92]	; (80068e0 <TIM_OC2_SetConfig+0xe4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_OC2_SetConfig+0x94>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a16      	ldr	r2, [pc, #88]	; (80068e4 <TIM_OC2_SetConfig+0xe8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d113      	bne.n	80068b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800689e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40010000 	.word	0x40010000
 80068e4:	40010400 	.word	0x40010400

080068e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0303 	bic.w	r3, r3, #3
 800691e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	021b      	lsls	r3, r3, #8
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	4313      	orrs	r3, r2
 800693c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a21      	ldr	r2, [pc, #132]	; (80069c8 <TIM_OC3_SetConfig+0xe0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_OC3_SetConfig+0x66>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a20      	ldr	r2, [pc, #128]	; (80069cc <TIM_OC3_SetConfig+0xe4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d10d      	bne.n	800696a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	021b      	lsls	r3, r3, #8
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	4313      	orrs	r3, r2
 8006960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a16      	ldr	r2, [pc, #88]	; (80069c8 <TIM_OC3_SetConfig+0xe0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d003      	beq.n	800697a <TIM_OC3_SetConfig+0x92>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a15      	ldr	r2, [pc, #84]	; (80069cc <TIM_OC3_SetConfig+0xe4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d113      	bne.n	80069a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	4313      	orrs	r3, r2
 8006994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	4313      	orrs	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	621a      	str	r2, [r3, #32]
}
 80069bc:	bf00      	nop
 80069be:	371c      	adds	r7, #28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	40010000 	.word	0x40010000
 80069cc:	40010400 	.word	0x40010400

080069d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	021b      	lsls	r3, r3, #8
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	031b      	lsls	r3, r3, #12
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a12      	ldr	r2, [pc, #72]	; (8006a74 <TIM_OC4_SetConfig+0xa4>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d003      	beq.n	8006a38 <TIM_OC4_SetConfig+0x68>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a11      	ldr	r2, [pc, #68]	; (8006a78 <TIM_OC4_SetConfig+0xa8>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d109      	bne.n	8006a4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	019b      	lsls	r3, r3, #6
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	621a      	str	r2, [r3, #32]
}
 8006a66:	bf00      	nop
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40010000 	.word	0x40010000
 8006a78:	40010400 	.word	0x40010400

08006a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f023 0201 	bic.w	r2, r3, #1
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	011b      	lsls	r3, r3, #4
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f023 030a 	bic.w	r3, r3, #10
 8006ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	621a      	str	r2, [r3, #32]
}
 8006ace:	bf00      	nop
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b087      	sub	sp, #28
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	f023 0210 	bic.w	r2, r3, #16
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	031b      	lsls	r3, r3, #12
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	011b      	lsls	r3, r3, #4
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	621a      	str	r2, [r3, #32]
}
 8006b2e:	bf00      	nop
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f043 0307 	orr.w	r3, r3, #7
 8006b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	609a      	str	r2, [r3, #8]
}
 8006b64:	bf00      	nop
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
 8006b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	021a      	lsls	r2, r3, #8
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	609a      	str	r2, [r3, #8]
}
 8006ba4:	bf00      	nop
 8006ba6:	371c      	adds	r7, #28
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	f003 031f 	and.w	r3, r3, #31
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a1a      	ldr	r2, [r3, #32]
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	43db      	mvns	r3, r3
 8006bd2:	401a      	ands	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a1a      	ldr	r2, [r3, #32]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f003 031f 	and.w	r3, r3, #31
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	fa01 f303 	lsl.w	r3, r1, r3
 8006be8:	431a      	orrs	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	621a      	str	r2, [r3, #32]
}
 8006bee:	bf00      	nop
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
	...

08006bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d101      	bne.n	8006c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c10:	2302      	movs	r3, #2
 8006c12:	e05a      	b.n	8006cca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a21      	ldr	r2, [pc, #132]	; (8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d022      	beq.n	8006c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c60:	d01d      	beq.n	8006c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a1d      	ldr	r2, [pc, #116]	; (8006cdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d018      	beq.n	8006c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a1b      	ldr	r2, [pc, #108]	; (8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d013      	beq.n	8006c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a1a      	ldr	r2, [pc, #104]	; (8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00e      	beq.n	8006c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a18      	ldr	r2, [pc, #96]	; (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d009      	beq.n	8006c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a17      	ldr	r2, [pc, #92]	; (8006cec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d004      	beq.n	8006c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a15      	ldr	r2, [pc, #84]	; (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d10c      	bne.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	40010000 	.word	0x40010000
 8006cdc:	40000400 	.word	0x40000400
 8006ce0:	40000800 	.word	0x40000800
 8006ce4:	40000c00 	.word	0x40000c00
 8006ce8:	40010400 	.word	0x40010400
 8006cec:	40014000 	.word	0x40014000
 8006cf0:	40001800 	.word	0x40001800

08006cf4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	f107 001c 	add.w	r0, r7, #28
 8006d02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d122      	bne.n	8006d52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d105      	bne.n	8006d46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 fac6 	bl	80082d8 <USB_CoreReset>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	73fb      	strb	r3, [r7, #15]
 8006d50:	e01a      	b.n	8006d88 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 faba 	bl	80082d8 <USB_CoreReset>
 8006d64:	4603      	mov	r3, r0
 8006d66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d106      	bne.n	8006d7c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	639a      	str	r2, [r3, #56]	; 0x38
 8006d7a:	e005      	b.n	8006d88 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d10b      	bne.n	8006da6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f043 0206 	orr.w	r2, r3, #6
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f043 0220 	orr.w	r2, r3, #32
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006db2:	b004      	add	sp, #16
 8006db4:	4770      	bx	lr
	...

08006db8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006dc6:	79fb      	ldrb	r3, [r7, #7]
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d165      	bne.n	8006e98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	4a41      	ldr	r2, [pc, #260]	; (8006ed4 <USB_SetTurnaroundTime+0x11c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d906      	bls.n	8006de2 <USB_SetTurnaroundTime+0x2a>
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	4a40      	ldr	r2, [pc, #256]	; (8006ed8 <USB_SetTurnaroundTime+0x120>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d802      	bhi.n	8006de2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006ddc:	230f      	movs	r3, #15
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	e062      	b.n	8006ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	4a3c      	ldr	r2, [pc, #240]	; (8006ed8 <USB_SetTurnaroundTime+0x120>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d906      	bls.n	8006df8 <USB_SetTurnaroundTime+0x40>
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	4a3b      	ldr	r2, [pc, #236]	; (8006edc <USB_SetTurnaroundTime+0x124>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d802      	bhi.n	8006df8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006df2:	230e      	movs	r3, #14
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	e057      	b.n	8006ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	4a38      	ldr	r2, [pc, #224]	; (8006edc <USB_SetTurnaroundTime+0x124>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d906      	bls.n	8006e0e <USB_SetTurnaroundTime+0x56>
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4a37      	ldr	r2, [pc, #220]	; (8006ee0 <USB_SetTurnaroundTime+0x128>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d802      	bhi.n	8006e0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006e08:	230d      	movs	r3, #13
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	e04c      	b.n	8006ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	4a33      	ldr	r2, [pc, #204]	; (8006ee0 <USB_SetTurnaroundTime+0x128>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d906      	bls.n	8006e24 <USB_SetTurnaroundTime+0x6c>
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	4a32      	ldr	r2, [pc, #200]	; (8006ee4 <USB_SetTurnaroundTime+0x12c>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d802      	bhi.n	8006e24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006e1e:	230c      	movs	r3, #12
 8006e20:	617b      	str	r3, [r7, #20]
 8006e22:	e041      	b.n	8006ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	4a2f      	ldr	r2, [pc, #188]	; (8006ee4 <USB_SetTurnaroundTime+0x12c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d906      	bls.n	8006e3a <USB_SetTurnaroundTime+0x82>
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	4a2e      	ldr	r2, [pc, #184]	; (8006ee8 <USB_SetTurnaroundTime+0x130>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d802      	bhi.n	8006e3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006e34:	230b      	movs	r3, #11
 8006e36:	617b      	str	r3, [r7, #20]
 8006e38:	e036      	b.n	8006ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	4a2a      	ldr	r2, [pc, #168]	; (8006ee8 <USB_SetTurnaroundTime+0x130>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d906      	bls.n	8006e50 <USB_SetTurnaroundTime+0x98>
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	4a29      	ldr	r2, [pc, #164]	; (8006eec <USB_SetTurnaroundTime+0x134>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d802      	bhi.n	8006e50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006e4a:	230a      	movs	r3, #10
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	e02b      	b.n	8006ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	4a26      	ldr	r2, [pc, #152]	; (8006eec <USB_SetTurnaroundTime+0x134>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d906      	bls.n	8006e66 <USB_SetTurnaroundTime+0xae>
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	4a25      	ldr	r2, [pc, #148]	; (8006ef0 <USB_SetTurnaroundTime+0x138>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d802      	bhi.n	8006e66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006e60:	2309      	movs	r3, #9
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	e020      	b.n	8006ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	4a21      	ldr	r2, [pc, #132]	; (8006ef0 <USB_SetTurnaroundTime+0x138>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d906      	bls.n	8006e7c <USB_SetTurnaroundTime+0xc4>
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	4a20      	ldr	r2, [pc, #128]	; (8006ef4 <USB_SetTurnaroundTime+0x13c>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d802      	bhi.n	8006e7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006e76:	2308      	movs	r3, #8
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	e015      	b.n	8006ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	4a1d      	ldr	r2, [pc, #116]	; (8006ef4 <USB_SetTurnaroundTime+0x13c>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d906      	bls.n	8006e92 <USB_SetTurnaroundTime+0xda>
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	4a1c      	ldr	r2, [pc, #112]	; (8006ef8 <USB_SetTurnaroundTime+0x140>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d802      	bhi.n	8006e92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006e8c:	2307      	movs	r3, #7
 8006e8e:	617b      	str	r3, [r7, #20]
 8006e90:	e00a      	b.n	8006ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006e92:	2306      	movs	r3, #6
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	e007      	b.n	8006ea8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006e98:	79fb      	ldrb	r3, [r7, #7]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d102      	bne.n	8006ea4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006e9e:	2309      	movs	r3, #9
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	e001      	b.n	8006ea8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006ea4:	2309      	movs	r3, #9
 8006ea6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	029b      	lsls	r3, r3, #10
 8006ebc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006ec0:	431a      	orrs	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	371c      	adds	r7, #28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	00d8acbf 	.word	0x00d8acbf
 8006ed8:	00e4e1bf 	.word	0x00e4e1bf
 8006edc:	00f423ff 	.word	0x00f423ff
 8006ee0:	0106737f 	.word	0x0106737f
 8006ee4:	011a499f 	.word	0x011a499f
 8006ee8:	01312cff 	.word	0x01312cff
 8006eec:	014ca43f 	.word	0x014ca43f
 8006ef0:	016e35ff 	.word	0x016e35ff
 8006ef4:	01a6ab1f 	.word	0x01a6ab1f
 8006ef8:	01e847ff 	.word	0x01e847ff

08006efc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f043 0201 	orr.w	r2, r3, #1
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f023 0201 	bic.w	r2, r3, #1
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f58:	78fb      	ldrb	r3, [r7, #3]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d106      	bne.n	8006f6c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	60da      	str	r2, [r3, #12]
 8006f6a:	e00b      	b.n	8006f84 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d106      	bne.n	8006f80 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60da      	str	r2, [r3, #12]
 8006f7e:	e001      	b.n	8006f84 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e003      	b.n	8006f8c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006f84:	2032      	movs	r0, #50	; 0x32
 8006f86:	f7fb fd51 	bl	8002a2c <HAL_Delay>

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f94:	b084      	sub	sp, #16
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b086      	sub	sp, #24
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006fa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006fae:	2300      	movs	r3, #0
 8006fb0:	613b      	str	r3, [r7, #16]
 8006fb2:	e009      	b.n	8006fc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	3340      	adds	r3, #64	; 0x40
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	613b      	str	r3, [r7, #16]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	2b0e      	cmp	r3, #14
 8006fcc:	d9f2      	bls.n	8006fb4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d11c      	bne.n	800700e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fe2:	f043 0302 	orr.w	r3, r3, #2
 8006fe6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007004:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	639a      	str	r2, [r3, #56]	; 0x38
 800700c:	e00b      	b.n	8007026 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800702c:	461a      	mov	r2, r3
 800702e:	2300      	movs	r3, #0
 8007030:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007038:	4619      	mov	r1, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007040:	461a      	mov	r2, r3
 8007042:	680b      	ldr	r3, [r1, #0]
 8007044:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	2b01      	cmp	r3, #1
 800704a:	d10c      	bne.n	8007066 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	2b00      	cmp	r3, #0
 8007050:	d104      	bne.n	800705c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007052:	2100      	movs	r1, #0
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f949 	bl	80072ec <USB_SetDevSpeed>
 800705a:	e008      	b.n	800706e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800705c:	2101      	movs	r1, #1
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f944 	bl	80072ec <USB_SetDevSpeed>
 8007064:	e003      	b.n	800706e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007066:	2103      	movs	r1, #3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f93f 	bl	80072ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800706e:	2110      	movs	r1, #16
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f8f3 	bl	800725c <USB_FlushTxFifo>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f911 	bl	80072a8 <USB_FlushRxFifo>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007096:	461a      	mov	r2, r3
 8007098:	2300      	movs	r3, #0
 800709a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a2:	461a      	mov	r2, r3
 80070a4:	2300      	movs	r3, #0
 80070a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ae:	461a      	mov	r2, r3
 80070b0:	2300      	movs	r3, #0
 80070b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070b4:	2300      	movs	r3, #0
 80070b6:	613b      	str	r3, [r7, #16]
 80070b8:	e043      	b.n	8007142 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070d0:	d118      	bne.n	8007104 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10a      	bne.n	80070ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e4:	461a      	mov	r2, r3
 80070e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070ea:	6013      	str	r3, [r2, #0]
 80070ec:	e013      	b.n	8007116 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fa:	461a      	mov	r2, r3
 80070fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	e008      	b.n	8007116 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007110:	461a      	mov	r2, r3
 8007112:	2300      	movs	r3, #0
 8007114:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007122:	461a      	mov	r2, r3
 8007124:	2300      	movs	r3, #0
 8007126:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007134:	461a      	mov	r2, r3
 8007136:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800713a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	3301      	adds	r3, #1
 8007140:	613b      	str	r3, [r7, #16]
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	429a      	cmp	r2, r3
 8007148:	d3b7      	bcc.n	80070ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800714a:	2300      	movs	r3, #0
 800714c:	613b      	str	r3, [r7, #16]
 800714e:	e043      	b.n	80071d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007162:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007166:	d118      	bne.n	800719a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10a      	bne.n	8007184 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	4413      	add	r3, r2
 8007176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717a:	461a      	mov	r2, r3
 800717c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	e013      	b.n	80071ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007190:	461a      	mov	r2, r3
 8007192:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	e008      	b.n	80071ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	015a      	lsls	r2, r3, #5
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a6:	461a      	mov	r2, r3
 80071a8:	2300      	movs	r3, #0
 80071aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b8:	461a      	mov	r2, r3
 80071ba:	2300      	movs	r3, #0
 80071bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ca:	461a      	mov	r2, r3
 80071cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	3301      	adds	r3, #1
 80071d6:	613b      	str	r3, [r7, #16]
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d3b7      	bcc.n	8007150 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007200:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	2b00      	cmp	r3, #0
 8007206:	d105      	bne.n	8007214 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	f043 0210 	orr.w	r2, r3, #16
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	699a      	ldr	r2, [r3, #24]
 8007218:	4b0f      	ldr	r3, [pc, #60]	; (8007258 <USB_DevInit+0x2c4>)
 800721a:	4313      	orrs	r3, r2
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007222:	2b00      	cmp	r3, #0
 8007224:	d005      	beq.n	8007232 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	f043 0208 	orr.w	r2, r3, #8
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007234:	2b01      	cmp	r3, #1
 8007236:	d107      	bne.n	8007248 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007240:	f043 0304 	orr.w	r3, r3, #4
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007248:	7dfb      	ldrb	r3, [r7, #23]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007254:	b004      	add	sp, #16
 8007256:	4770      	bx	lr
 8007258:	803c3800 	.word	0x803c3800

0800725c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	019b      	lsls	r3, r3, #6
 800726e:	f043 0220 	orr.w	r2, r3, #32
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	3301      	adds	r3, #1
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4a09      	ldr	r2, [pc, #36]	; (80072a4 <USB_FlushTxFifo+0x48>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d901      	bls.n	8007288 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e006      	b.n	8007296 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b20      	cmp	r3, #32
 8007292:	d0f0      	beq.n	8007276 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	00030d40 	.word	0x00030d40

080072a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2210      	movs	r2, #16
 80072b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3301      	adds	r3, #1
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4a09      	ldr	r2, [pc, #36]	; (80072e8 <USB_FlushRxFifo+0x40>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d901      	bls.n	80072cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e006      	b.n	80072da <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	f003 0310 	and.w	r3, r3, #16
 80072d4:	2b10      	cmp	r3, #16
 80072d6:	d0f0      	beq.n	80072ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	00030d40 	.word	0x00030d40

080072ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	78fb      	ldrb	r3, [r7, #3]
 8007306:	68f9      	ldr	r1, [r7, #12]
 8007308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800730c:	4313      	orrs	r3, r2
 800730e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800731e:	b480      	push	{r7}
 8007320:	b087      	sub	sp, #28
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f003 0306 	and.w	r3, r3, #6
 8007336:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d102      	bne.n	8007344 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800733e:	2300      	movs	r3, #0
 8007340:	75fb      	strb	r3, [r7, #23]
 8007342:	e00a      	b.n	800735a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2b02      	cmp	r3, #2
 8007348:	d002      	beq.n	8007350 <USB_GetDevSpeed+0x32>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b06      	cmp	r3, #6
 800734e:	d102      	bne.n	8007356 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007350:	2302      	movs	r3, #2
 8007352:	75fb      	strb	r3, [r7, #23]
 8007354:	e001      	b.n	800735a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007356:	230f      	movs	r3, #15
 8007358:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800735a:	7dfb      	ldrb	r3, [r7, #23]
}
 800735c:	4618      	mov	r0, r3
 800735e:	371c      	adds	r7, #28
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	785b      	ldrb	r3, [r3, #1]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d13a      	bne.n	80073fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738a:	69da      	ldr	r2, [r3, #28]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	f003 030f 	and.w	r3, r3, #15
 8007394:	2101      	movs	r1, #1
 8007396:	fa01 f303 	lsl.w	r3, r1, r3
 800739a:	b29b      	uxth	r3, r3
 800739c:	68f9      	ldr	r1, [r7, #12]
 800739e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073a2:	4313      	orrs	r3, r2
 80073a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d155      	bne.n	8007468 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	78db      	ldrb	r3, [r3, #3]
 80073d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	059b      	lsls	r3, r3, #22
 80073de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073e0:	4313      	orrs	r3, r2
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	0151      	lsls	r1, r2, #5
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	440a      	add	r2, r1
 80073ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f6:	6013      	str	r3, [r2, #0]
 80073f8:	e036      	b.n	8007468 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007400:	69da      	ldr	r2, [r3, #28]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	f003 030f 	and.w	r3, r3, #15
 800740a:	2101      	movs	r1, #1
 800740c:	fa01 f303 	lsl.w	r3, r1, r3
 8007410:	041b      	lsls	r3, r3, #16
 8007412:	68f9      	ldr	r1, [r7, #12]
 8007414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007418:	4313      	orrs	r3, r2
 800741a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d11a      	bne.n	8007468 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	4413      	add	r3, r2
 800743a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	78db      	ldrb	r3, [r3, #3]
 800744c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800744e:	430b      	orrs	r3, r1
 8007450:	4313      	orrs	r3, r2
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	0151      	lsls	r1, r2, #5
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	440a      	add	r2, r1
 800745a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800745e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007466:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
	...

08007478 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	785b      	ldrb	r3, [r3, #1]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d161      	bne.n	8007558 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074aa:	d11f      	bne.n	80074ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	0151      	lsls	r1, r2, #5
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	440a      	add	r2, r1
 80074c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	0151      	lsls	r1, r2, #5
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	440a      	add	r2, r1
 80074e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	f003 030f 	and.w	r3, r3, #15
 80074fc:	2101      	movs	r1, #1
 80074fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007502:	b29b      	uxth	r3, r3
 8007504:	43db      	mvns	r3, r3
 8007506:	68f9      	ldr	r1, [r7, #12]
 8007508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800750c:	4013      	ands	r3, r2
 800750e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007516:	69da      	ldr	r2, [r3, #28]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	f003 030f 	and.w	r3, r3, #15
 8007520:	2101      	movs	r1, #1
 8007522:	fa01 f303 	lsl.w	r3, r1, r3
 8007526:	b29b      	uxth	r3, r3
 8007528:	43db      	mvns	r3, r3
 800752a:	68f9      	ldr	r1, [r7, #12]
 800752c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007530:	4013      	ands	r3, r2
 8007532:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	0159      	lsls	r1, r3, #5
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	440b      	add	r3, r1
 800754a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754e:	4619      	mov	r1, r3
 8007550:	4b35      	ldr	r3, [pc, #212]	; (8007628 <USB_DeactivateEndpoint+0x1b0>)
 8007552:	4013      	ands	r3, r2
 8007554:	600b      	str	r3, [r1, #0]
 8007556:	e060      	b.n	800761a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800756a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800756e:	d11f      	bne.n	80075b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4413      	add	r3, r2
 8007578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	0151      	lsls	r1, r2, #5
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	440a      	add	r2, r1
 8007586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800758a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800758e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	0151      	lsls	r1, r2, #5
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	440a      	add	r2, r1
 80075a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	f003 030f 	and.w	r3, r3, #15
 80075c0:	2101      	movs	r1, #1
 80075c2:	fa01 f303 	lsl.w	r3, r1, r3
 80075c6:	041b      	lsls	r3, r3, #16
 80075c8:	43db      	mvns	r3, r3
 80075ca:	68f9      	ldr	r1, [r7, #12]
 80075cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075d0:	4013      	ands	r3, r2
 80075d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075da:	69da      	ldr	r2, [r3, #28]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	f003 030f 	and.w	r3, r3, #15
 80075e4:	2101      	movs	r1, #1
 80075e6:	fa01 f303 	lsl.w	r3, r1, r3
 80075ea:	041b      	lsls	r3, r3, #16
 80075ec:	43db      	mvns	r3, r3
 80075ee:	68f9      	ldr	r1, [r7, #12]
 80075f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075f4:	4013      	ands	r3, r2
 80075f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	0159      	lsls	r1, r3, #5
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	440b      	add	r3, r1
 800760e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007612:	4619      	mov	r1, r3
 8007614:	4b05      	ldr	r3, [pc, #20]	; (800762c <USB_DeactivateEndpoint+0x1b4>)
 8007616:	4013      	ands	r3, r2
 8007618:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	ec337800 	.word	0xec337800
 800762c:	eff37800 	.word	0xeff37800

08007630 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08a      	sub	sp, #40	; 0x28
 8007634:	af02      	add	r7, sp, #8
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	4613      	mov	r3, r2
 800763c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	785b      	ldrb	r3, [r3, #1]
 800764c:	2b01      	cmp	r3, #1
 800764e:	f040 815c 	bne.w	800790a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d132      	bne.n	80076c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	69ba      	ldr	r2, [r7, #24]
 800766a:	0151      	lsls	r1, r2, #5
 800766c:	69fa      	ldr	r2, [r7, #28]
 800766e:	440a      	add	r2, r1
 8007670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007674:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007678:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800767c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	0151      	lsls	r1, r2, #5
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	440a      	add	r2, r1
 8007694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007698:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800769c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	0151      	lsls	r1, r2, #5
 80076b0:	69fa      	ldr	r2, [r7, #28]
 80076b2:	440a      	add	r2, r1
 80076b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b8:	0cdb      	lsrs	r3, r3, #19
 80076ba:	04db      	lsls	r3, r3, #19
 80076bc:	6113      	str	r3, [r2, #16]
 80076be:	e074      	b.n	80077aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	0151      	lsls	r1, r2, #5
 80076d2:	69fa      	ldr	r2, [r7, #28]
 80076d4:	440a      	add	r2, r1
 80076d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076da:	0cdb      	lsrs	r3, r3, #19
 80076dc:	04db      	lsls	r3, r3, #19
 80076de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	0151      	lsls	r1, r2, #5
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	440a      	add	r2, r1
 80076f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007702:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007710:	691a      	ldr	r2, [r3, #16]
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	6959      	ldr	r1, [r3, #20]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	440b      	add	r3, r1
 800771c:	1e59      	subs	r1, r3, #1
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	fbb1 f3f3 	udiv	r3, r1, r3
 8007726:	04d9      	lsls	r1, r3, #19
 8007728:	4b9d      	ldr	r3, [pc, #628]	; (80079a0 <USB_EPStartXfer+0x370>)
 800772a:	400b      	ands	r3, r1
 800772c:	69b9      	ldr	r1, [r7, #24]
 800772e:	0148      	lsls	r0, r1, #5
 8007730:	69f9      	ldr	r1, [r7, #28]
 8007732:	4401      	add	r1, r0
 8007734:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007738:	4313      	orrs	r3, r2
 800773a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007748:	691a      	ldr	r2, [r3, #16]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007752:	69b9      	ldr	r1, [r7, #24]
 8007754:	0148      	lsls	r0, r1, #5
 8007756:	69f9      	ldr	r1, [r7, #28]
 8007758:	4401      	add	r1, r0
 800775a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800775e:	4313      	orrs	r3, r2
 8007760:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	78db      	ldrb	r3, [r3, #3]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d11f      	bne.n	80077aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	015a      	lsls	r2, r3, #5
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	4413      	add	r3, r2
 8007772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	69ba      	ldr	r2, [r7, #24]
 800777a:	0151      	lsls	r1, r2, #5
 800777c:	69fa      	ldr	r2, [r7, #28]
 800777e:	440a      	add	r2, r1
 8007780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007784:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007788:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	4413      	add	r3, r2
 8007792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	0151      	lsls	r1, r2, #5
 800779c:	69fa      	ldr	r2, [r7, #28]
 800779e:	440a      	add	r2, r1
 80077a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80077aa:	79fb      	ldrb	r3, [r7, #7]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d14b      	bne.n	8007848 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d009      	beq.n	80077cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	015a      	lsls	r2, r3, #5
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	4413      	add	r3, r2
 80077c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c4:	461a      	mov	r2, r3
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	78db      	ldrb	r3, [r3, #3]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d128      	bne.n	8007826 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d110      	bne.n	8007806 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	0151      	lsls	r1, r2, #5
 80077f6:	69fa      	ldr	r2, [r7, #28]
 80077f8:	440a      	add	r2, r1
 80077fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	e00f      	b.n	8007826 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	0151      	lsls	r1, r2, #5
 8007818:	69fa      	ldr	r2, [r7, #28]
 800781a:	440a      	add	r2, r1
 800781c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007824:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	4413      	add	r3, r2
 800782e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	69ba      	ldr	r2, [r7, #24]
 8007836:	0151      	lsls	r1, r2, #5
 8007838:	69fa      	ldr	r2, [r7, #28]
 800783a:	440a      	add	r2, r1
 800783c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007840:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	e12f      	b.n	8007aa8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	4413      	add	r3, r2
 8007850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	0151      	lsls	r1, r2, #5
 800785a:	69fa      	ldr	r2, [r7, #28]
 800785c:	440a      	add	r2, r1
 800785e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007862:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007866:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	78db      	ldrb	r3, [r3, #3]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d015      	beq.n	800789c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	695b      	ldr	r3, [r3, #20]
 8007874:	2b00      	cmp	r3, #0
 8007876:	f000 8117 	beq.w	8007aa8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	f003 030f 	and.w	r3, r3, #15
 800788a:	2101      	movs	r1, #1
 800788c:	fa01 f303 	lsl.w	r3, r1, r3
 8007890:	69f9      	ldr	r1, [r7, #28]
 8007892:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007896:	4313      	orrs	r3, r2
 8007898:	634b      	str	r3, [r1, #52]	; 0x34
 800789a:	e105      	b.n	8007aa8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d110      	bne.n	80078ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	0151      	lsls	r1, r2, #5
 80078be:	69fa      	ldr	r2, [r7, #28]
 80078c0:	440a      	add	r2, r1
 80078c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	e00f      	b.n	80078ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	0151      	lsls	r1, r2, #5
 80078e0:	69fa      	ldr	r2, [r7, #28]
 80078e2:	440a      	add	r2, r1
 80078e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	68d9      	ldr	r1, [r3, #12]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	781a      	ldrb	r2, [r3, #0]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	b298      	uxth	r0, r3
 80078fc:	79fb      	ldrb	r3, [r7, #7]
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	4603      	mov	r3, r0
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 fa2b 	bl	8007d5e <USB_WritePacket>
 8007908:	e0ce      	b.n	8007aa8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	0151      	lsls	r1, r2, #5
 800791c:	69fa      	ldr	r2, [r7, #28]
 800791e:	440a      	add	r2, r1
 8007920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007924:	0cdb      	lsrs	r3, r3, #19
 8007926:	04db      	lsls	r3, r3, #19
 8007928:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	4413      	add	r3, r2
 8007932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	69ba      	ldr	r2, [r7, #24]
 800793a:	0151      	lsls	r1, r2, #5
 800793c:	69fa      	ldr	r2, [r7, #28]
 800793e:	440a      	add	r2, r1
 8007940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007944:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007948:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800794c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d126      	bne.n	80079a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	015a      	lsls	r2, r3, #5
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	4413      	add	r3, r2
 800795e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007962:	691a      	ldr	r2, [r3, #16]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800796c:	69b9      	ldr	r1, [r7, #24]
 800796e:	0148      	lsls	r0, r1, #5
 8007970:	69f9      	ldr	r1, [r7, #28]
 8007972:	4401      	add	r1, r0
 8007974:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007978:	4313      	orrs	r3, r2
 800797a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	4413      	add	r3, r2
 8007984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	0151      	lsls	r1, r2, #5
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	440a      	add	r2, r1
 8007992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007996:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800799a:	6113      	str	r3, [r2, #16]
 800799c:	e036      	b.n	8007a0c <USB_EPStartXfer+0x3dc>
 800799e:	bf00      	nop
 80079a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	695a      	ldr	r2, [r3, #20]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	4413      	add	r3, r2
 80079ae:	1e5a      	subs	r2, r3, #1
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c6:	691a      	ldr	r2, [r3, #16]
 80079c8:	8afb      	ldrh	r3, [r7, #22]
 80079ca:	04d9      	lsls	r1, r3, #19
 80079cc:	4b39      	ldr	r3, [pc, #228]	; (8007ab4 <USB_EPStartXfer+0x484>)
 80079ce:	400b      	ands	r3, r1
 80079d0:	69b9      	ldr	r1, [r7, #24]
 80079d2:	0148      	lsls	r0, r1, #5
 80079d4:	69f9      	ldr	r1, [r7, #28]
 80079d6:	4401      	add	r1, r0
 80079d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079dc:	4313      	orrs	r3, r2
 80079de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ec:	691a      	ldr	r2, [r3, #16]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	8af9      	ldrh	r1, [r7, #22]
 80079f4:	fb01 f303 	mul.w	r3, r1, r3
 80079f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079fc:	69b9      	ldr	r1, [r7, #24]
 80079fe:	0148      	lsls	r0, r1, #5
 8007a00:	69f9      	ldr	r1, [r7, #28]
 8007a02:	4401      	add	r1, r0
 8007a04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d10d      	bne.n	8007a2e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d009      	beq.n	8007a2e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	68d9      	ldr	r1, [r3, #12]
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2a:	460a      	mov	r2, r1
 8007a2c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	78db      	ldrb	r3, [r3, #3]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d128      	bne.n	8007a88 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d110      	bne.n	8007a68 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	0151      	lsls	r1, r2, #5
 8007a58:	69fa      	ldr	r2, [r7, #28]
 8007a5a:	440a      	add	r2, r1
 8007a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a64:	6013      	str	r3, [r2, #0]
 8007a66:	e00f      	b.n	8007a88 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	69ba      	ldr	r2, [r7, #24]
 8007a78:	0151      	lsls	r1, r2, #5
 8007a7a:	69fa      	ldr	r2, [r7, #28]
 8007a7c:	440a      	add	r2, r1
 8007a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a86:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	0151      	lsls	r1, r2, #5
 8007a9a:	69fa      	ldr	r2, [r7, #28]
 8007a9c:	440a      	add	r2, r1
 8007a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aa2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007aa6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3720      	adds	r7, #32
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	1ff80000 	.word	0x1ff80000

08007ab8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	785b      	ldrb	r3, [r3, #1]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	f040 80cd 	bne.w	8007c74 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d132      	bne.n	8007b48 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	0151      	lsls	r1, r2, #5
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	440a      	add	r2, r1
 8007af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007afc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	0151      	lsls	r1, r2, #5
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	440a      	add	r2, r1
 8007b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	0151      	lsls	r1, r2, #5
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	440a      	add	r2, r1
 8007b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b40:	0cdb      	lsrs	r3, r3, #19
 8007b42:	04db      	lsls	r3, r3, #19
 8007b44:	6113      	str	r3, [r2, #16]
 8007b46:	e04e      	b.n	8007be6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	015a      	lsls	r2, r3, #5
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	0151      	lsls	r1, r2, #5
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	440a      	add	r2, r1
 8007b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b62:	0cdb      	lsrs	r3, r3, #19
 8007b64:	04db      	lsls	r3, r3, #19
 8007b66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	0151      	lsls	r1, r2, #5
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	440a      	add	r2, r1
 8007b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b8a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	695a      	ldr	r2, [r3, #20]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d903      	bls.n	8007ba0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	0151      	lsls	r1, r2, #5
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	440a      	add	r2, r1
 8007bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bcc:	691a      	ldr	r2, [r3, #16]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bd6:	6939      	ldr	r1, [r7, #16]
 8007bd8:	0148      	lsls	r0, r1, #5
 8007bda:	6979      	ldr	r1, [r7, #20]
 8007bdc:	4401      	add	r1, r0
 8007bde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007be2:	4313      	orrs	r3, r2
 8007be4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007be6:	79fb      	ldrb	r3, [r7, #7]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d11e      	bne.n	8007c2a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d009      	beq.n	8007c08 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c00:	461a      	mov	r2, r3
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	693a      	ldr	r2, [r7, #16]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	e092      	b.n	8007d50 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	0151      	lsls	r1, r2, #5
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	440a      	add	r2, r1
 8007c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c48:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d07e      	beq.n	8007d50 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	f003 030f 	and.w	r3, r3, #15
 8007c62:	2101      	movs	r1, #1
 8007c64:	fa01 f303 	lsl.w	r3, r1, r3
 8007c68:	6979      	ldr	r1, [r7, #20]
 8007c6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	634b      	str	r3, [r1, #52]	; 0x34
 8007c72:	e06d      	b.n	8007d50 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	0151      	lsls	r1, r2, #5
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	440a      	add	r2, r1
 8007c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c8e:	0cdb      	lsrs	r3, r3, #19
 8007c90:	04db      	lsls	r3, r3, #19
 8007c92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	0151      	lsls	r1, r2, #5
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	440a      	add	r2, r1
 8007caa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007cb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007cb6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	695b      	ldr	r3, [r3, #20]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	0151      	lsls	r1, r2, #5
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	440a      	add	r2, r1
 8007cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ce2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ce6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf4:	691a      	ldr	r2, [r3, #16]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cfe:	6939      	ldr	r1, [r7, #16]
 8007d00:	0148      	lsls	r0, r1, #5
 8007d02:	6979      	ldr	r1, [r7, #20]
 8007d04:	4401      	add	r1, r0
 8007d06:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d10d      	bne.n	8007d30 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d009      	beq.n	8007d30 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	68d9      	ldr	r1, [r3, #12]
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2c:	460a      	mov	r2, r1
 8007d2e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	0151      	lsls	r1, r2, #5
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	440a      	add	r2, r1
 8007d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	371c      	adds	r7, #28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b089      	sub	sp, #36	; 0x24
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	60f8      	str	r0, [r7, #12]
 8007d66:	60b9      	str	r1, [r7, #8]
 8007d68:	4611      	mov	r1, r2
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	71fb      	strb	r3, [r7, #7]
 8007d70:	4613      	mov	r3, r2
 8007d72:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007d7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d11a      	bne.n	8007dba <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d84:	88bb      	ldrh	r3, [r7, #4]
 8007d86:	3303      	adds	r3, #3
 8007d88:	089b      	lsrs	r3, r3, #2
 8007d8a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	61bb      	str	r3, [r7, #24]
 8007d90:	e00f      	b.n	8007db2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	031a      	lsls	r2, r3, #12
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d9e:	461a      	mov	r2, r3
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	3304      	adds	r3, #4
 8007daa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	3301      	adds	r3, #1
 8007db0:	61bb      	str	r3, [r7, #24]
 8007db2:	69ba      	ldr	r2, [r7, #24]
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d3eb      	bcc.n	8007d92 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3724      	adds	r7, #36	; 0x24
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b089      	sub	sp, #36	; 0x24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007dde:	88fb      	ldrh	r3, [r7, #6]
 8007de0:	3303      	adds	r3, #3
 8007de2:	089b      	lsrs	r3, r3, #2
 8007de4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007de6:	2300      	movs	r3, #0
 8007de8:	61bb      	str	r3, [r7, #24]
 8007dea:	e00b      	b.n	8007e04 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	601a      	str	r2, [r3, #0]
    pDest++;
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	3301      	adds	r3, #1
 8007e02:	61bb      	str	r3, [r7, #24]
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d3ef      	bcc.n	8007dec <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007e0c:	69fb      	ldr	r3, [r7, #28]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3724      	adds	r7, #36	; 0x24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b085      	sub	sp, #20
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	785b      	ldrb	r3, [r3, #1]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d12c      	bne.n	8007e90 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	db12      	blt.n	8007e6e <USB_EPSetStall+0x54>
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00f      	beq.n	8007e6e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	0151      	lsls	r1, r2, #5
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	440a      	add	r2, r1
 8007e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e6c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	0151      	lsls	r1, r2, #5
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	440a      	add	r2, r1
 8007e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	e02b      	b.n	8007ee8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	db12      	blt.n	8007ec8 <USB_EPSetStall+0xae>
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00f      	beq.n	8007ec8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	0151      	lsls	r1, r2, #5
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	440a      	add	r2, r1
 8007ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ec2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ec6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	0151      	lsls	r1, r2, #5
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	440a      	add	r2, r1
 8007ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ee2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ee6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b085      	sub	sp, #20
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	785b      	ldrb	r3, [r3, #1]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d128      	bne.n	8007f64 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	0151      	lsls	r1, r2, #5
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	440a      	add	r2, r1
 8007f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	78db      	ldrb	r3, [r3, #3]
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d003      	beq.n	8007f42 <USB_EPClearStall+0x4c>
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	78db      	ldrb	r3, [r3, #3]
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d138      	bne.n	8007fb4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	0151      	lsls	r1, r2, #5
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	440a      	add	r2, r1
 8007f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f60:	6013      	str	r3, [r2, #0]
 8007f62:	e027      	b.n	8007fb4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	0151      	lsls	r1, r2, #5
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	440a      	add	r2, r1
 8007f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f82:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	78db      	ldrb	r3, [r3, #3]
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d003      	beq.n	8007f94 <USB_EPClearStall+0x9e>
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	78db      	ldrb	r3, [r3, #3]
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d10f      	bne.n	8007fb4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	015a      	lsls	r2, r3, #5
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	0151      	lsls	r1, r2, #5
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	440a      	add	r2, r1
 8007faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fb2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b085      	sub	sp, #20
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fe0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007fe4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	78fb      	ldrb	r3, [r7, #3]
 8007ff0:	011b      	lsls	r3, r3, #4
 8007ff2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007ff6:	68f9      	ldr	r1, [r7, #12]
 8007ff8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800800e:	b480      	push	{r7}
 8008010:	b085      	sub	sp, #20
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008028:	f023 0303 	bic.w	r3, r3, #3
 800802c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800803c:	f023 0302 	bic.w	r3, r3, #2
 8008040:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800806a:	f023 0303 	bic.w	r3, r3, #3
 800806e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800807e:	f043 0302 	orr.w	r3, r3, #2
 8008082:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008092:	b480      	push	{r7}
 8008094:	b085      	sub	sp, #20
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	4013      	ands	r3, r2
 80080a8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80080aa:	68fb      	ldr	r3, [r7, #12]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	4013      	ands	r3, r2
 80080da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	0c1b      	lsrs	r3, r3, #16
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	4013      	ands	r3, r2
 800810e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	b29b      	uxth	r3, r3
}
 8008114:	4618      	mov	r0, r3
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008130:	78fb      	ldrb	r3, [r7, #3]
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	4413      	add	r3, r2
 8008138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008146:	695b      	ldr	r3, [r3, #20]
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	4013      	ands	r3, r2
 800814c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800814e:	68bb      	ldr	r3, [r7, #8]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800815c:	b480      	push	{r7}
 800815e:	b087      	sub	sp, #28
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008180:	78fb      	ldrb	r3, [r7, #3]
 8008182:	f003 030f 	and.w	r3, r3, #15
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	fa22 f303 	lsr.w	r3, r2, r3
 800818c:	01db      	lsls	r3, r3, #7
 800818e:	b2db      	uxtb	r3, r3
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	4313      	orrs	r3, r2
 8008194:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008196:	78fb      	ldrb	r3, [r7, #3]
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	4413      	add	r3, r2
 800819e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	4013      	ands	r3, r2
 80081a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80081aa:	68bb      	ldr	r3, [r7, #8]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	371c      	adds	r7, #28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	f003 0301 	and.w	r3, r3, #1
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80081f2:	f023 0307 	bic.w	r3, r3, #7
 80081f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800820a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
	...

0800821c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800821c:	b480      	push	{r7}
 800821e:	b087      	sub	sp, #28
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	460b      	mov	r3, r1
 8008226:	607a      	str	r2, [r7, #4]
 8008228:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	333c      	adds	r3, #60	; 0x3c
 8008232:	3304      	adds	r3, #4
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	4a26      	ldr	r2, [pc, #152]	; (80082d4 <USB_EP0_OutStart+0xb8>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d90a      	bls.n	8008256 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800824c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008250:	d101      	bne.n	8008256 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	e037      	b.n	80082c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825c:	461a      	mov	r2, r3
 800825e:	2300      	movs	r3, #0
 8008260:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008270:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008274:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008284:	f043 0318 	orr.w	r3, r3, #24
 8008288:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	697a      	ldr	r2, [r7, #20]
 8008294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008298:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800829c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800829e:	7afb      	ldrb	r3, [r7, #11]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d10f      	bne.n	80082c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082aa:	461a      	mov	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80082c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	371c      	adds	r7, #28
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	4f54300a 	.word	0x4f54300a

080082d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	3301      	adds	r3, #1
 80082e8:	60fb      	str	r3, [r7, #12]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4a13      	ldr	r2, [pc, #76]	; (800833c <USB_CoreReset+0x64>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d901      	bls.n	80082f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e01b      	b.n	800832e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	daf2      	bge.n	80082e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80082fe:	2300      	movs	r3, #0
 8008300:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f043 0201 	orr.w	r2, r3, #1
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3301      	adds	r3, #1
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	4a09      	ldr	r2, [pc, #36]	; (800833c <USB_CoreReset+0x64>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d901      	bls.n	8008320 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e006      	b.n	800832e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	2b01      	cmp	r3, #1
 800832a:	d0f0      	beq.n	800830e <USB_CoreReset+0x36>

  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	00030d40 	.word	0x00030d40

08008340 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800834c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008350:	f002 f92c 	bl	800a5ac <malloc>
 8008354:	4603      	mov	r3, r0
 8008356:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d105      	bne.n	800836a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008366:	2302      	movs	r3, #2
 8008368:	e066      	b.n	8008438 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	7c1b      	ldrb	r3, [r3, #16]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d119      	bne.n	80083ae <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800837a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800837e:	2202      	movs	r2, #2
 8008380:	2181      	movs	r1, #129	; 0x81
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f001 ff99 	bl	800a2ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800838e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008392:	2202      	movs	r2, #2
 8008394:	2101      	movs	r1, #1
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f001 ff8f 	bl	800a2ba <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2210      	movs	r2, #16
 80083a8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80083ac:	e016      	b.n	80083dc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80083ae:	2340      	movs	r3, #64	; 0x40
 80083b0:	2202      	movs	r2, #2
 80083b2:	2181      	movs	r1, #129	; 0x81
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f001 ff80 	bl	800a2ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80083c0:	2340      	movs	r3, #64	; 0x40
 80083c2:	2202      	movs	r2, #2
 80083c4:	2101      	movs	r1, #1
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f001 ff77 	bl	800a2ba <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2210      	movs	r2, #16
 80083d8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80083dc:	2308      	movs	r3, #8
 80083de:	2203      	movs	r2, #3
 80083e0:	2182      	movs	r1, #130	; 0x82
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f001 ff69 	bl	800a2ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	7c1b      	ldrb	r3, [r3, #16]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d109      	bne.n	8008426 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800841c:	2101      	movs	r1, #1
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f002 f83a 	bl	800a498 <USBD_LL_PrepareReceive>
 8008424:	e007      	b.n	8008436 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800842c:	2340      	movs	r3, #64	; 0x40
 800842e:	2101      	movs	r1, #1
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f002 f831 	bl	800a498 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	460b      	mov	r3, r1
 800844a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008450:	2181      	movs	r1, #129	; 0x81
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f001 ff57 	bl	800a306 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800845e:	2101      	movs	r1, #1
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 ff50 	bl	800a306 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800846e:	2182      	movs	r1, #130	; 0x82
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f001 ff48 	bl	800a306 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00e      	beq.n	80084ae <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084a0:	4618      	mov	r0, r3
 80084a2:	f002 f88b 	bl	800a5bc <free>
    pdev->pClassData = NULL;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084c8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80084ce:	2300      	movs	r3, #0
 80084d0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d03a      	beq.n	8008558 <USBD_CDC_Setup+0xa0>
 80084e2:	2b20      	cmp	r3, #32
 80084e4:	f040 8097 	bne.w	8008616 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	88db      	ldrh	r3, [r3, #6]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d029      	beq.n	8008544 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	b25b      	sxtb	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	da11      	bge.n	800851e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8008506:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	88d2      	ldrh	r2, [r2, #6]
 800850c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800850e:	6939      	ldr	r1, [r7, #16]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	88db      	ldrh	r3, [r3, #6]
 8008514:	461a      	mov	r2, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 fa9d 	bl	8009a56 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800851c:	e082      	b.n	8008624 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	785a      	ldrb	r2, [r3, #1]
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	88db      	ldrh	r3, [r3, #6]
 800852c:	b2da      	uxtb	r2, r3
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008534:	6939      	ldr	r1, [r7, #16]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	88db      	ldrh	r3, [r3, #6]
 800853a:	461a      	mov	r2, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f001 fab6 	bl	8009aae <USBD_CtlPrepareRx>
    break;
 8008542:	e06f      	b.n	8008624 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	7850      	ldrb	r0, [r2, #1]
 8008550:	2200      	movs	r2, #0
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	4798      	blx	r3
    break;
 8008556:	e065      	b.n	8008624 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	785b      	ldrb	r3, [r3, #1]
 800855c:	2b0b      	cmp	r3, #11
 800855e:	d84f      	bhi.n	8008600 <USBD_CDC_Setup+0x148>
 8008560:	a201      	add	r2, pc, #4	; (adr r2, 8008568 <USBD_CDC_Setup+0xb0>)
 8008562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008566:	bf00      	nop
 8008568:	08008599 	.word	0x08008599
 800856c:	0800860f 	.word	0x0800860f
 8008570:	08008601 	.word	0x08008601
 8008574:	08008601 	.word	0x08008601
 8008578:	08008601 	.word	0x08008601
 800857c:	08008601 	.word	0x08008601
 8008580:	08008601 	.word	0x08008601
 8008584:	08008601 	.word	0x08008601
 8008588:	08008601 	.word	0x08008601
 800858c:	08008601 	.word	0x08008601
 8008590:	080085c1 	.word	0x080085c1
 8008594:	080085e9 	.word	0x080085e9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d107      	bne.n	80085b2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80085a2:	f107 030c 	add.w	r3, r7, #12
 80085a6:	2202      	movs	r2, #2
 80085a8:	4619      	mov	r1, r3
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f001 fa53 	bl	8009a56 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80085b0:	e030      	b.n	8008614 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f001 f9dd 	bl	8009974 <USBD_CtlError>
        ret = USBD_FAIL;
 80085ba:	2303      	movs	r3, #3
 80085bc:	75fb      	strb	r3, [r7, #23]
      break;
 80085be:	e029      	b.n	8008614 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d107      	bne.n	80085da <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80085ca:	f107 030f 	add.w	r3, r7, #15
 80085ce:	2201      	movs	r2, #1
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f001 fa3f 	bl	8009a56 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80085d8:	e01c      	b.n	8008614 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f001 f9c9 	bl	8009974 <USBD_CtlError>
        ret = USBD_FAIL;
 80085e2:	2303      	movs	r3, #3
 80085e4:	75fb      	strb	r3, [r7, #23]
      break;
 80085e6:	e015      	b.n	8008614 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d00f      	beq.n	8008612 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80085f2:	6839      	ldr	r1, [r7, #0]
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f001 f9bd 	bl	8009974 <USBD_CtlError>
        ret = USBD_FAIL;
 80085fa:	2303      	movs	r3, #3
 80085fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80085fe:	e008      	b.n	8008612 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f001 f9b6 	bl	8009974 <USBD_CtlError>
      ret = USBD_FAIL;
 8008608:	2303      	movs	r3, #3
 800860a:	75fb      	strb	r3, [r7, #23]
      break;
 800860c:	e002      	b.n	8008614 <USBD_CDC_Setup+0x15c>
      break;
 800860e:	bf00      	nop
 8008610:	e008      	b.n	8008624 <USBD_CDC_Setup+0x16c>
      break;
 8008612:	bf00      	nop
    }
    break;
 8008614:	e006      	b.n	8008624 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 f9ab 	bl	8009974 <USBD_CtlError>
    ret = USBD_FAIL;
 800861e:	2303      	movs	r3, #3
 8008620:	75fb      	strb	r3, [r7, #23]
    break;
 8008622:	bf00      	nop
  }

  return (uint8_t)ret;
 8008624:	7dfb      	ldrb	r3, [r7, #23]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop

08008630 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008642:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800864e:	2303      	movs	r3, #3
 8008650:	e049      	b.n	80086e6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008658:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800865a:	78fa      	ldrb	r2, [r7, #3]
 800865c:	6879      	ldr	r1, [r7, #4]
 800865e:	4613      	mov	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	440b      	add	r3, r1
 8008668:	3318      	adds	r3, #24
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d029      	beq.n	80086c4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008670:	78fa      	ldrb	r2, [r7, #3]
 8008672:	6879      	ldr	r1, [r7, #4]
 8008674:	4613      	mov	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4413      	add	r3, r2
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	440b      	add	r3, r1
 800867e:	3318      	adds	r3, #24
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	78f9      	ldrb	r1, [r7, #3]
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	460b      	mov	r3, r1
 8008688:	00db      	lsls	r3, r3, #3
 800868a:	1a5b      	subs	r3, r3, r1
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4403      	add	r3, r0
 8008690:	3344      	adds	r3, #68	; 0x44
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	fbb2 f1f3 	udiv	r1, r2, r3
 8008698:	fb03 f301 	mul.w	r3, r3, r1
 800869c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d110      	bne.n	80086c4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80086a2:	78fa      	ldrb	r2, [r7, #3]
 80086a4:	6879      	ldr	r1, [r7, #4]
 80086a6:	4613      	mov	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	440b      	add	r3, r1
 80086b0:	3318      	adds	r3, #24
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80086b6:	78f9      	ldrb	r1, [r7, #3]
 80086b8:	2300      	movs	r3, #0
 80086ba:	2200      	movs	r2, #0
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f001 feca 	bl	800a456 <USBD_LL_Transmit>
 80086c2:	e00f      	b.n	80086e4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	68ba      	ldr	r2, [r7, #8]
 80086d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80086e0:	78fa      	ldrb	r2, [r7, #3]
 80086e2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b084      	sub	sp, #16
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	460b      	mov	r3, r1
 80086f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008700:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800870c:	2303      	movs	r3, #3
 800870e:	e015      	b.n	800873c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	4619      	mov	r1, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f001 fee0 	bl	800a4da <USBD_LL_GetRxDataSize>
 800871a:	4602      	mov	r2, r0
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008736:	4611      	mov	r1, r2
 8008738:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008752:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d015      	beq.n	800878a <USBD_CDC_EP0_RxReady+0x46>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008764:	2bff      	cmp	r3, #255	; 0xff
 8008766:	d010      	beq.n	800878a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008776:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800877e:	b292      	uxth	r2, r2
 8008780:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	22ff      	movs	r2, #255	; 0xff
 8008786:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2243      	movs	r2, #67	; 0x43
 80087a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80087a2:	4b03      	ldr	r3, [pc, #12]	; (80087b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	200000d4 	.word	0x200000d4

080087b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2243      	movs	r2, #67	; 0x43
 80087c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80087c2:	4b03      	ldr	r3, [pc, #12]	; (80087d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	20000090 	.word	0x20000090

080087d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2243      	movs	r2, #67	; 0x43
 80087e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80087e2:	4b03      	ldr	r3, [pc, #12]	; (80087f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	20000118 	.word	0x20000118

080087f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	220a      	movs	r2, #10
 8008800:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008802:	4b03      	ldr	r3, [pc, #12]	; (8008810 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	2000004c 	.word	0x2000004c

08008814 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008824:	2303      	movs	r3, #3
 8008826:	e004      	b.n	8008832 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	683a      	ldr	r2, [r7, #0]
 800882c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800883e:	b480      	push	{r7}
 8008840:	b087      	sub	sp, #28
 8008842:	af00      	add	r7, sp, #0
 8008844:	60f8      	str	r0, [r7, #12]
 8008846:	60b9      	str	r1, [r7, #8]
 8008848:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008850:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	371c      	adds	r7, #28
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008880:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	683a      	ldr	r2, [r7, #0]
 8008886:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3714      	adds	r7, #20
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088a6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80088a8:	2301      	movs	r3, #1
 80088aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e01a      	b.n	80088f0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d114      	bne.n	80088ee <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80088e2:	2181      	movs	r1, #129	; 0x81
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f001 fdb6 	bl	800a456 <USBD_LL_Transmit>

    ret = USBD_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008906:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008912:	2303      	movs	r3, #3
 8008914:	e016      	b.n	8008944 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	7c1b      	ldrb	r3, [r3, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d109      	bne.n	8008932 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008928:	2101      	movs	r1, #1
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f001 fdb4 	bl	800a498 <USBD_LL_PrepareReceive>
 8008930:	e007      	b.n	8008942 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008938:	2340      	movs	r3, #64	; 0x40
 800893a:	2101      	movs	r1, #1
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 fdab 	bl	800a498 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	4613      	mov	r3, r2
 8008958:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008960:	2303      	movs	r3, #3
 8008962:	e025      	b.n	80089b0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800897c:	2b00      	cmp	r3, #0
 800897e:	d003      	beq.n	8008988 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2201      	movs	r2, #1
 800899a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	79fa      	ldrb	r2, [r7, #7]
 80089a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f001 fc21 	bl	800a1ec <USBD_LL_Init>
 80089aa:	4603      	mov	r3, r0
 80089ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80089ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3718      	adds	r7, #24
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089c2:	2300      	movs	r3, #0
 80089c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e010      	b.n	80089f2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	683a      	ldr	r2, [r7, #0]
 80089d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e0:	f107 020e 	add.w	r2, r7, #14
 80089e4:	4610      	mov	r0, r2
 80089e6:	4798      	blx	r3
 80089e8:	4602      	mov	r2, r0
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f001 fc3e 	bl	800a284 <USBD_LL_Start>
 8008a08:	4603      	mov	r3, r0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b083      	sub	sp, #12
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	460b      	mov	r3, r1
 8008a32:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008a34:	2303      	movs	r3, #3
 8008a36:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d009      	beq.n	8008a56 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	78fa      	ldrb	r2, [r7, #3]
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	4798      	blx	r3
 8008a52:	4603      	mov	r3, r0
 8008a54:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d007      	beq.n	8008a86 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	78fa      	ldrb	r2, [r7, #3]
 8008a80:	4611      	mov	r1, r2
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	4798      	blx	r3
  }

  return USBD_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 ff2c 	bl	8009900 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ac4:	f003 031f 	and.w	r3, r3, #31
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d00e      	beq.n	8008aea <USBD_LL_SetupStage+0x5a>
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d302      	bcc.n	8008ad6 <USBD_LL_SetupStage+0x46>
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d014      	beq.n	8008afe <USBD_LL_SetupStage+0x6e>
 8008ad4:	e01d      	b.n	8008b12 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008adc:	4619      	mov	r1, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fa18 	bl	8008f14 <USBD_StdDevReq>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ae8:	e020      	b.n	8008b2c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fa7c 	bl	8008ff0 <USBD_StdItfReq>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73fb      	strb	r3, [r7, #15]
      break;
 8008afc:	e016      	b.n	8008b2c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b04:	4619      	mov	r1, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fab8 	bl	800907c <USBD_StdEPReq>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b10:	e00c      	b.n	8008b2c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f001 fc0f 	bl	800a344 <USBD_LL_StallEP>
 8008b26:	4603      	mov	r3, r0
 8008b28:	73fb      	strb	r3, [r7, #15]
      break;
 8008b2a:	bf00      	nop
  }

  return ret;
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b086      	sub	sp, #24
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	60f8      	str	r0, [r7, #12]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	607a      	str	r2, [r7, #4]
 8008b42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008b44:	7afb      	ldrb	r3, [r7, #11]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d137      	bne.n	8008bba <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b50:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d14a      	bne.n	8008bf2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	689a      	ldr	r2, [r3, #8]
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d913      	bls.n	8008b90 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	689a      	ldr	r2, [r3, #8]
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	1ad2      	subs	r2, r2, r3
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	68da      	ldr	r2, [r3, #12]
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	bf28      	it	cs
 8008b82:	4613      	movcs	r3, r2
 8008b84:	461a      	mov	r2, r3
 8008b86:	6879      	ldr	r1, [r7, #4]
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 ffad 	bl	8009ae8 <USBD_CtlContinueRx>
 8008b8e:	e030      	b.n	8008bf2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00a      	beq.n	8008bb2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	d105      	bne.n	8008bb2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f000 ffa9 	bl	8009b0a <USBD_CtlSendStatus>
 8008bb8:	e01b      	b.n	8008bf2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d013      	beq.n	8008bee <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008bcc:	2b03      	cmp	r3, #3
 8008bce:	d10e      	bne.n	8008bee <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	7afa      	ldrb	r2, [r7, #11]
 8008bda:	4611      	mov	r1, r2
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	4798      	blx	r3
 8008be0:	4603      	mov	r3, r0
 8008be2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	e002      	b.n	8008bf4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e000      	b.n	8008bf4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	460b      	mov	r3, r1
 8008c06:	607a      	str	r2, [r7, #4]
 8008c08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008c0a:	7afb      	ldrb	r3, [r7, #11]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d16a      	bne.n	8008ce6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	3314      	adds	r3, #20
 8008c14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d155      	bne.n	8008ccc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	689a      	ldr	r2, [r3, #8]
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d914      	bls.n	8008c56 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	689a      	ldr	r2, [r3, #8]
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	1ad2      	subs	r2, r2, r3
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	6879      	ldr	r1, [r7, #4]
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 ff22 	bl	8009a8c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c48:	2300      	movs	r3, #0
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f001 fc22 	bl	800a498 <USBD_LL_PrepareReceive>
 8008c54:	e03a      	b.n	8008ccc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	68da      	ldr	r2, [r3, #12]
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d11c      	bne.n	8008c9c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d316      	bcc.n	8008c9c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d20f      	bcs.n	8008c9c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	2100      	movs	r1, #0
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 ff03 	bl	8009a8c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c8e:	2300      	movs	r3, #0
 8008c90:	2200      	movs	r2, #0
 8008c92:	2100      	movs	r1, #0
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f001 fbff 	bl	800a498 <USBD_LL_PrepareReceive>
 8008c9a:	e017      	b.n	8008ccc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00a      	beq.n	8008cbe <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	d105      	bne.n	8008cbe <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cbe:	2180      	movs	r1, #128	; 0x80
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f001 fb3f 	bl	800a344 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 ff32 	bl	8009b30 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d123      	bne.n	8008d1e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f7ff fe9b 	bl	8008a12 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008ce4:	e01b      	b.n	8008d1e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d013      	beq.n	8008d1a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d10e      	bne.n	8008d1a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d02:	695b      	ldr	r3, [r3, #20]
 8008d04:	7afa      	ldrb	r2, [r7, #11]
 8008d06:	4611      	mov	r1, r2
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	4798      	blx	r3
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008d10:	7dfb      	ldrb	r3, [r7, #23]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d003      	beq.n	8008d1e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
 8008d18:	e002      	b.n	8008d20 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	e000      	b.n	8008d20 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3718      	adds	r7, #24
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d009      	beq.n	8008d6c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	6852      	ldr	r2, [r2, #4]
 8008d64:	b2d2      	uxtb	r2, r2
 8008d66:	4611      	mov	r1, r2
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d6c:	2340      	movs	r3, #64	; 0x40
 8008d6e:	2200      	movs	r2, #0
 8008d70:	2100      	movs	r1, #0
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f001 faa1 	bl	800a2ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2240      	movs	r2, #64	; 0x40
 8008d84:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d88:	2340      	movs	r3, #64	; 0x40
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	2180      	movs	r1, #128	; 0x80
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f001 fa93 	bl	800a2ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2240      	movs	r2, #64	; 0x40
 8008d9e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008daa:	b480      	push	{r7}
 8008dac:	b083      	sub	sp, #12
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	460b      	mov	r3, r1
 8008db4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	78fa      	ldrb	r2, [r7, #3]
 8008dba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b083      	sub	sp, #12
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2204      	movs	r2, #4
 8008de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e02:	2b04      	cmp	r3, #4
 8008e04:	d105      	bne.n	8008e12 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	d10b      	bne.n	8008e4a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e38:	69db      	ldr	r3, [r3, #28]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d005      	beq.n	8008e4a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	460b      	mov	r3, r1
 8008e78:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	370c      	adds	r7, #12
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr

08008e9e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b082      	sub	sp, #8
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d009      	beq.n	8008ecc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	6852      	ldr	r2, [r2, #4]
 8008ec4:	b2d2      	uxtb	r2, r2
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	4798      	blx	r3
  }

  return USBD_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b087      	sub	sp, #28
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	3301      	adds	r3, #1
 8008eec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008ef4:	8a3b      	ldrh	r3, [r7, #16]
 8008ef6:	021b      	lsls	r3, r3, #8
 8008ef8:	b21a      	sxth	r2, r3
 8008efa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	b21b      	sxth	r3, r3
 8008f02:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008f04:	89fb      	ldrh	r3, [r7, #14]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	371c      	adds	r7, #28
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
	...

08008f14 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f2a:	2b20      	cmp	r3, #32
 8008f2c:	d004      	beq.n	8008f38 <USBD_StdDevReq+0x24>
 8008f2e:	2b40      	cmp	r3, #64	; 0x40
 8008f30:	d002      	beq.n	8008f38 <USBD_StdDevReq+0x24>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00a      	beq.n	8008f4c <USBD_StdDevReq+0x38>
 8008f36:	e050      	b.n	8008fda <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	4798      	blx	r3
 8008f46:	4603      	mov	r3, r0
 8008f48:	73fb      	strb	r3, [r7, #15]
    break;
 8008f4a:	e04b      	b.n	8008fe4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	785b      	ldrb	r3, [r3, #1]
 8008f50:	2b09      	cmp	r3, #9
 8008f52:	d83c      	bhi.n	8008fce <USBD_StdDevReq+0xba>
 8008f54:	a201      	add	r2, pc, #4	; (adr r2, 8008f5c <USBD_StdDevReq+0x48>)
 8008f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5a:	bf00      	nop
 8008f5c:	08008fb1 	.word	0x08008fb1
 8008f60:	08008fc5 	.word	0x08008fc5
 8008f64:	08008fcf 	.word	0x08008fcf
 8008f68:	08008fbb 	.word	0x08008fbb
 8008f6c:	08008fcf 	.word	0x08008fcf
 8008f70:	08008f8f 	.word	0x08008f8f
 8008f74:	08008f85 	.word	0x08008f85
 8008f78:	08008fcf 	.word	0x08008fcf
 8008f7c:	08008fa7 	.word	0x08008fa7
 8008f80:	08008f99 	.word	0x08008f99
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f9ce 	bl	8009328 <USBD_GetDescriptor>
      break;
 8008f8c:	e024      	b.n	8008fd8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fb33 	bl	80095fc <USBD_SetAddress>
      break;
 8008f96:	e01f      	b.n	8008fd8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008f98:	6839      	ldr	r1, [r7, #0]
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fb70 	bl	8009680 <USBD_SetConfig>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8008fa4:	e018      	b.n	8008fd8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fc0d 	bl	80097c8 <USBD_GetConfig>
      break;
 8008fae:	e013      	b.n	8008fd8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fc3c 	bl	8009830 <USBD_GetStatus>
      break;
 8008fb8:	e00e      	b.n	8008fd8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fc6a 	bl	8009896 <USBD_SetFeature>
      break;
 8008fc2:	e009      	b.n	8008fd8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fc79 	bl	80098be <USBD_ClrFeature>
      break;
 8008fcc:	e004      	b.n	8008fd8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008fce:	6839      	ldr	r1, [r7, #0]
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fccf 	bl	8009974 <USBD_CtlError>
      break;
 8008fd6:	bf00      	nop
    }
    break;
 8008fd8:	e004      	b.n	8008fe4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008fda:	6839      	ldr	r1, [r7, #0]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fcc9 	bl	8009974 <USBD_CtlError>
    break;
 8008fe2:	bf00      	nop
  }

  return ret;
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop

08008ff0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009006:	2b20      	cmp	r3, #32
 8009008:	d003      	beq.n	8009012 <USBD_StdItfReq+0x22>
 800900a:	2b40      	cmp	r3, #64	; 0x40
 800900c:	d001      	beq.n	8009012 <USBD_StdItfReq+0x22>
 800900e:	2b00      	cmp	r3, #0
 8009010:	d12a      	bne.n	8009068 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009018:	3b01      	subs	r3, #1
 800901a:	2b02      	cmp	r3, #2
 800901c:	d81d      	bhi.n	800905a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	889b      	ldrh	r3, [r3, #4]
 8009022:	b2db      	uxtb	r3, r3
 8009024:	2b01      	cmp	r3, #1
 8009026:	d813      	bhi.n	8009050 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	4798      	blx	r3
 8009036:	4603      	mov	r3, r0
 8009038:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	88db      	ldrh	r3, [r3, #6]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d110      	bne.n	8009064 <USBD_StdItfReq+0x74>
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10d      	bne.n	8009064 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fd5e 	bl	8009b0a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800904e:	e009      	b.n	8009064 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fc8e 	bl	8009974 <USBD_CtlError>
      break;
 8009058:	e004      	b.n	8009064 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fc89 	bl	8009974 <USBD_CtlError>
      break;
 8009062:	e000      	b.n	8009066 <USBD_StdItfReq+0x76>
      break;
 8009064:	bf00      	nop
    }
    break;
 8009066:	e004      	b.n	8009072 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fc82 	bl	8009974 <USBD_CtlError>
    break;
 8009070:	bf00      	nop
  }

  return ret;
 8009072:	7bfb      	ldrb	r3, [r7, #15]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009086:	2300      	movs	r3, #0
 8009088:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	889b      	ldrh	r3, [r3, #4]
 800908e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009098:	2b20      	cmp	r3, #32
 800909a:	d004      	beq.n	80090a6 <USBD_StdEPReq+0x2a>
 800909c:	2b40      	cmp	r3, #64	; 0x40
 800909e:	d002      	beq.n	80090a6 <USBD_StdEPReq+0x2a>
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00a      	beq.n	80090ba <USBD_StdEPReq+0x3e>
 80090a4:	e135      	b.n	8009312 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	4798      	blx	r3
 80090b4:	4603      	mov	r3, r0
 80090b6:	73fb      	strb	r3, [r7, #15]
    break;
 80090b8:	e130      	b.n	800931c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	785b      	ldrb	r3, [r3, #1]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d03e      	beq.n	8009140 <USBD_StdEPReq+0xc4>
 80090c2:	2b03      	cmp	r3, #3
 80090c4:	d002      	beq.n	80090cc <USBD_StdEPReq+0x50>
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d077      	beq.n	80091ba <USBD_StdEPReq+0x13e>
 80090ca:	e11c      	b.n	8009306 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d002      	beq.n	80090dc <USBD_StdEPReq+0x60>
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	d015      	beq.n	8009106 <USBD_StdEPReq+0x8a>
 80090da:	e02b      	b.n	8009134 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00c      	beq.n	80090fc <USBD_StdEPReq+0x80>
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
 80090e4:	2b80      	cmp	r3, #128	; 0x80
 80090e6:	d009      	beq.n	80090fc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80090e8:	7bbb      	ldrb	r3, [r7, #14]
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f001 f929 	bl	800a344 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80090f2:	2180      	movs	r1, #128	; 0x80
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f001 f925 	bl	800a344 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80090fa:	e020      	b.n	800913e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fc38 	bl	8009974 <USBD_CtlError>
        break;
 8009104:	e01b      	b.n	800913e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	885b      	ldrh	r3, [r3, #2]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10e      	bne.n	800912c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800910e:	7bbb      	ldrb	r3, [r7, #14]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00b      	beq.n	800912c <USBD_StdEPReq+0xb0>
 8009114:	7bbb      	ldrb	r3, [r7, #14]
 8009116:	2b80      	cmp	r3, #128	; 0x80
 8009118:	d008      	beq.n	800912c <USBD_StdEPReq+0xb0>
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	88db      	ldrh	r3, [r3, #6]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d104      	bne.n	800912c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009122:	7bbb      	ldrb	r3, [r7, #14]
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f001 f90c 	bl	800a344 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fcec 	bl	8009b0a <USBD_CtlSendStatus>

        break;
 8009132:	e004      	b.n	800913e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fc1c 	bl	8009974 <USBD_CtlError>
        break;
 800913c:	bf00      	nop
      }
      break;
 800913e:	e0e7      	b.n	8009310 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009146:	2b02      	cmp	r3, #2
 8009148:	d002      	beq.n	8009150 <USBD_StdEPReq+0xd4>
 800914a:	2b03      	cmp	r3, #3
 800914c:	d015      	beq.n	800917a <USBD_StdEPReq+0xfe>
 800914e:	e02d      	b.n	80091ac <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009150:	7bbb      	ldrb	r3, [r7, #14]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00c      	beq.n	8009170 <USBD_StdEPReq+0xf4>
 8009156:	7bbb      	ldrb	r3, [r7, #14]
 8009158:	2b80      	cmp	r3, #128	; 0x80
 800915a:	d009      	beq.n	8009170 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800915c:	7bbb      	ldrb	r3, [r7, #14]
 800915e:	4619      	mov	r1, r3
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f001 f8ef 	bl	800a344 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009166:	2180      	movs	r1, #128	; 0x80
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f001 f8eb 	bl	800a344 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800916e:	e023      	b.n	80091b8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fbfe 	bl	8009974 <USBD_CtlError>
        break;
 8009178:	e01e      	b.n	80091b8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	885b      	ldrh	r3, [r3, #2]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d119      	bne.n	80091b6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009182:	7bbb      	ldrb	r3, [r7, #14]
 8009184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009188:	2b00      	cmp	r3, #0
 800918a:	d004      	beq.n	8009196 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800918c:	7bbb      	ldrb	r3, [r7, #14]
 800918e:	4619      	mov	r1, r3
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f001 f8f6 	bl	800a382 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fcb7 	bl	8009b0a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	4798      	blx	r3
        }
        break;
 80091aa:	e004      	b.n	80091b6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fbe0 	bl	8009974 <USBD_CtlError>
        break;
 80091b4:	e000      	b.n	80091b8 <USBD_StdEPReq+0x13c>
        break;
 80091b6:	bf00      	nop
      }
      break;
 80091b8:	e0aa      	b.n	8009310 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d002      	beq.n	80091ca <USBD_StdEPReq+0x14e>
 80091c4:	2b03      	cmp	r3, #3
 80091c6:	d032      	beq.n	800922e <USBD_StdEPReq+0x1b2>
 80091c8:	e097      	b.n	80092fa <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091ca:	7bbb      	ldrb	r3, [r7, #14]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d007      	beq.n	80091e0 <USBD_StdEPReq+0x164>
 80091d0:	7bbb      	ldrb	r3, [r7, #14]
 80091d2:	2b80      	cmp	r3, #128	; 0x80
 80091d4:	d004      	beq.n	80091e0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 fbcb 	bl	8009974 <USBD_CtlError>
          break;
 80091de:	e091      	b.n	8009304 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	da0b      	bge.n	8009200 <USBD_StdEPReq+0x184>
 80091e8:	7bbb      	ldrb	r3, [r7, #14]
 80091ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091ee:	4613      	mov	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4413      	add	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	3310      	adds	r3, #16
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	4413      	add	r3, r2
 80091fc:	3304      	adds	r3, #4
 80091fe:	e00b      	b.n	8009218 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009200:	7bbb      	ldrb	r3, [r7, #14]
 8009202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009206:	4613      	mov	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	4413      	add	r3, r2
 8009216:	3304      	adds	r3, #4
 8009218:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	2200      	movs	r2, #0
 800921e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	2202      	movs	r2, #2
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fc15 	bl	8009a56 <USBD_CtlSendData>
        break;
 800922c:	e06a      	b.n	8009304 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800922e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009232:	2b00      	cmp	r3, #0
 8009234:	da11      	bge.n	800925a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009236:	7bbb      	ldrb	r3, [r7, #14]
 8009238:	f003 020f 	and.w	r2, r3, #15
 800923c:	6879      	ldr	r1, [r7, #4]
 800923e:	4613      	mov	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	440b      	add	r3, r1
 8009248:	3324      	adds	r3, #36	; 0x24
 800924a:	881b      	ldrh	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d117      	bne.n	8009280 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fb8e 	bl	8009974 <USBD_CtlError>
            break;
 8009258:	e054      	b.n	8009304 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	f003 020f 	and.w	r2, r3, #15
 8009260:	6879      	ldr	r1, [r7, #4]
 8009262:	4613      	mov	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	440b      	add	r3, r1
 800926c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d104      	bne.n	8009280 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fb7b 	bl	8009974 <USBD_CtlError>
            break;
 800927e:	e041      	b.n	8009304 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009280:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009284:	2b00      	cmp	r3, #0
 8009286:	da0b      	bge.n	80092a0 <USBD_StdEPReq+0x224>
 8009288:	7bbb      	ldrb	r3, [r7, #14]
 800928a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800928e:	4613      	mov	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	3310      	adds	r3, #16
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	4413      	add	r3, r2
 800929c:	3304      	adds	r3, #4
 800929e:	e00b      	b.n	80092b8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
 80092a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092a6:	4613      	mov	r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4413      	add	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	4413      	add	r3, r2
 80092b6:	3304      	adds	r3, #4
 80092b8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80092ba:	7bbb      	ldrb	r3, [r7, #14]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d002      	beq.n	80092c6 <USBD_StdEPReq+0x24a>
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
 80092c2:	2b80      	cmp	r3, #128	; 0x80
 80092c4:	d103      	bne.n	80092ce <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	2200      	movs	r2, #0
 80092ca:	601a      	str	r2, [r3, #0]
 80092cc:	e00e      	b.n	80092ec <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80092ce:	7bbb      	ldrb	r3, [r7, #14]
 80092d0:	4619      	mov	r1, r3
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f001 f874 	bl	800a3c0 <USBD_LL_IsStallEP>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d003      	beq.n	80092e6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	2201      	movs	r2, #1
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	e002      	b.n	80092ec <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	2200      	movs	r2, #0
 80092ea:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2202      	movs	r2, #2
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fbaf 	bl	8009a56 <USBD_CtlSendData>
          break;
 80092f8:	e004      	b.n	8009304 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fb39 	bl	8009974 <USBD_CtlError>
        break;
 8009302:	bf00      	nop
      }
      break;
 8009304:	e004      	b.n	8009310 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8009306:	6839      	ldr	r1, [r7, #0]
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 fb33 	bl	8009974 <USBD_CtlError>
      break;
 800930e:	bf00      	nop
    }
    break;
 8009310:	e004      	b.n	800931c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8009312:	6839      	ldr	r1, [r7, #0]
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fb2d 	bl	8009974 <USBD_CtlError>
    break;
 800931a:	bf00      	nop
  }

  return ret;
 800931c:	7bfb      	ldrb	r3, [r7, #15]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
	...

08009328 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009332:	2300      	movs	r3, #0
 8009334:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009336:	2300      	movs	r3, #0
 8009338:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800933a:	2300      	movs	r3, #0
 800933c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	885b      	ldrh	r3, [r3, #2]
 8009342:	0a1b      	lsrs	r3, r3, #8
 8009344:	b29b      	uxth	r3, r3
 8009346:	3b01      	subs	r3, #1
 8009348:	2b06      	cmp	r3, #6
 800934a:	f200 8128 	bhi.w	800959e <USBD_GetDescriptor+0x276>
 800934e:	a201      	add	r2, pc, #4	; (adr r2, 8009354 <USBD_GetDescriptor+0x2c>)
 8009350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009354:	08009371 	.word	0x08009371
 8009358:	08009389 	.word	0x08009389
 800935c:	080093c9 	.word	0x080093c9
 8009360:	0800959f 	.word	0x0800959f
 8009364:	0800959f 	.word	0x0800959f
 8009368:	0800953f 	.word	0x0800953f
 800936c:	0800956b 	.word	0x0800956b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	7c12      	ldrb	r2, [r2, #16]
 800937c:	f107 0108 	add.w	r1, r7, #8
 8009380:	4610      	mov	r0, r2
 8009382:	4798      	blx	r3
 8009384:	60f8      	str	r0, [r7, #12]
    break;
 8009386:	e112      	b.n	80095ae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	7c1b      	ldrb	r3, [r3, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10d      	bne.n	80093ac <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009398:	f107 0208 	add.w	r2, r7, #8
 800939c:	4610      	mov	r0, r2
 800939e:	4798      	blx	r3
 80093a0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3301      	adds	r3, #1
 80093a6:	2202      	movs	r2, #2
 80093a8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80093aa:	e100      	b.n	80095ae <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b4:	f107 0208 	add.w	r2, r7, #8
 80093b8:	4610      	mov	r0, r2
 80093ba:	4798      	blx	r3
 80093bc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	3301      	adds	r3, #1
 80093c2:	2202      	movs	r2, #2
 80093c4:	701a      	strb	r2, [r3, #0]
    break;
 80093c6:	e0f2      	b.n	80095ae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	885b      	ldrh	r3, [r3, #2]
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b05      	cmp	r3, #5
 80093d0:	f200 80ac 	bhi.w	800952c <USBD_GetDescriptor+0x204>
 80093d4:	a201      	add	r2, pc, #4	; (adr r2, 80093dc <USBD_GetDescriptor+0xb4>)
 80093d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093da:	bf00      	nop
 80093dc:	080093f5 	.word	0x080093f5
 80093e0:	08009429 	.word	0x08009429
 80093e4:	0800945d 	.word	0x0800945d
 80093e8:	08009491 	.word	0x08009491
 80093ec:	080094c5 	.word	0x080094c5
 80093f0:	080094f9 	.word	0x080094f9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00b      	beq.n	8009418 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	7c12      	ldrb	r2, [r2, #16]
 800940c:	f107 0108 	add.w	r1, r7, #8
 8009410:	4610      	mov	r0, r2
 8009412:	4798      	blx	r3
 8009414:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009416:	e091      	b.n	800953c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 faaa 	bl	8009974 <USBD_CtlError>
        err++;
 8009420:	7afb      	ldrb	r3, [r7, #11]
 8009422:	3301      	adds	r3, #1
 8009424:	72fb      	strb	r3, [r7, #11]
      break;
 8009426:	e089      	b.n	800953c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00b      	beq.n	800944c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	7c12      	ldrb	r2, [r2, #16]
 8009440:	f107 0108 	add.w	r1, r7, #8
 8009444:	4610      	mov	r0, r2
 8009446:	4798      	blx	r3
 8009448:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800944a:	e077      	b.n	800953c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fa90 	bl	8009974 <USBD_CtlError>
        err++;
 8009454:	7afb      	ldrb	r3, [r7, #11]
 8009456:	3301      	adds	r3, #1
 8009458:	72fb      	strb	r3, [r7, #11]
      break;
 800945a:	e06f      	b.n	800953c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00b      	beq.n	8009480 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	7c12      	ldrb	r2, [r2, #16]
 8009474:	f107 0108 	add.w	r1, r7, #8
 8009478:	4610      	mov	r0, r2
 800947a:	4798      	blx	r3
 800947c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800947e:	e05d      	b.n	800953c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fa76 	bl	8009974 <USBD_CtlError>
        err++;
 8009488:	7afb      	ldrb	r3, [r7, #11]
 800948a:	3301      	adds	r3, #1
 800948c:	72fb      	strb	r3, [r7, #11]
      break;
 800948e:	e055      	b.n	800953c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00b      	beq.n	80094b4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	7c12      	ldrb	r2, [r2, #16]
 80094a8:	f107 0108 	add.w	r1, r7, #8
 80094ac:	4610      	mov	r0, r2
 80094ae:	4798      	blx	r3
 80094b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094b2:	e043      	b.n	800953c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fa5c 	bl	8009974 <USBD_CtlError>
        err++;
 80094bc:	7afb      	ldrb	r3, [r7, #11]
 80094be:	3301      	adds	r3, #1
 80094c0:	72fb      	strb	r3, [r7, #11]
      break;
 80094c2:	e03b      	b.n	800953c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00b      	beq.n	80094e8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	7c12      	ldrb	r2, [r2, #16]
 80094dc:	f107 0108 	add.w	r1, r7, #8
 80094e0:	4610      	mov	r0, r2
 80094e2:	4798      	blx	r3
 80094e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094e6:	e029      	b.n	800953c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fa42 	bl	8009974 <USBD_CtlError>
        err++;
 80094f0:	7afb      	ldrb	r3, [r7, #11]
 80094f2:	3301      	adds	r3, #1
 80094f4:	72fb      	strb	r3, [r7, #11]
      break;
 80094f6:	e021      	b.n	800953c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00b      	beq.n	800951c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	7c12      	ldrb	r2, [r2, #16]
 8009510:	f107 0108 	add.w	r1, r7, #8
 8009514:	4610      	mov	r0, r2
 8009516:	4798      	blx	r3
 8009518:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800951a:	e00f      	b.n	800953c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800951c:	6839      	ldr	r1, [r7, #0]
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fa28 	bl	8009974 <USBD_CtlError>
        err++;
 8009524:	7afb      	ldrb	r3, [r7, #11]
 8009526:	3301      	adds	r3, #1
 8009528:	72fb      	strb	r3, [r7, #11]
      break;
 800952a:	e007      	b.n	800953c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fa20 	bl	8009974 <USBD_CtlError>
      err++;
 8009534:	7afb      	ldrb	r3, [r7, #11]
 8009536:	3301      	adds	r3, #1
 8009538:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800953a:	bf00      	nop
    }
    break;
 800953c:	e037      	b.n	80095ae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	7c1b      	ldrb	r3, [r3, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d109      	bne.n	800955a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800954c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800954e:	f107 0208 	add.w	r2, r7, #8
 8009552:	4610      	mov	r0, r2
 8009554:	4798      	blx	r3
 8009556:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009558:	e029      	b.n	80095ae <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800955a:	6839      	ldr	r1, [r7, #0]
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 fa09 	bl	8009974 <USBD_CtlError>
      err++;
 8009562:	7afb      	ldrb	r3, [r7, #11]
 8009564:	3301      	adds	r3, #1
 8009566:	72fb      	strb	r3, [r7, #11]
    break;
 8009568:	e021      	b.n	80095ae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	7c1b      	ldrb	r3, [r3, #16]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10d      	bne.n	800958e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957a:	f107 0208 	add.w	r2, r7, #8
 800957e:	4610      	mov	r0, r2
 8009580:	4798      	blx	r3
 8009582:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	3301      	adds	r3, #1
 8009588:	2207      	movs	r2, #7
 800958a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800958c:	e00f      	b.n	80095ae <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f9ef 	bl	8009974 <USBD_CtlError>
      err++;
 8009596:	7afb      	ldrb	r3, [r7, #11]
 8009598:	3301      	adds	r3, #1
 800959a:	72fb      	strb	r3, [r7, #11]
    break;
 800959c:	e007      	b.n	80095ae <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800959e:	6839      	ldr	r1, [r7, #0]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f9e7 	bl	8009974 <USBD_CtlError>
    err++;
 80095a6:	7afb      	ldrb	r3, [r7, #11]
 80095a8:	3301      	adds	r3, #1
 80095aa:	72fb      	strb	r3, [r7, #11]
    break;
 80095ac:	bf00      	nop
  }

  if (err != 0U)
 80095ae:	7afb      	ldrb	r3, [r7, #11]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d11e      	bne.n	80095f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	88db      	ldrh	r3, [r3, #6]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d016      	beq.n	80095ea <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80095bc:	893b      	ldrh	r3, [r7, #8]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00e      	beq.n	80095e0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	88da      	ldrh	r2, [r3, #6]
 80095c6:	893b      	ldrh	r3, [r7, #8]
 80095c8:	4293      	cmp	r3, r2
 80095ca:	bf28      	it	cs
 80095cc:	4613      	movcs	r3, r2
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80095d2:	893b      	ldrh	r3, [r7, #8]
 80095d4:	461a      	mov	r2, r3
 80095d6:	68f9      	ldr	r1, [r7, #12]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fa3c 	bl	8009a56 <USBD_CtlSendData>
 80095de:	e009      	b.n	80095f4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f9c6 	bl	8009974 <USBD_CtlError>
 80095e8:	e004      	b.n	80095f4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fa8d 	bl	8009b0a <USBD_CtlSendStatus>
 80095f0:	e000      	b.n	80095f4 <USBD_GetDescriptor+0x2cc>
    return;
 80095f2:	bf00      	nop
    }
  }
}
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop

080095fc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	889b      	ldrh	r3, [r3, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d130      	bne.n	8009670 <USBD_SetAddress+0x74>
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	88db      	ldrh	r3, [r3, #6]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d12c      	bne.n	8009670 <USBD_SetAddress+0x74>
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	885b      	ldrh	r3, [r3, #2]
 800961a:	2b7f      	cmp	r3, #127	; 0x7f
 800961c:	d828      	bhi.n	8009670 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	885b      	ldrh	r3, [r3, #2]
 8009622:	b2db      	uxtb	r3, r3
 8009624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009628:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009630:	2b03      	cmp	r3, #3
 8009632:	d104      	bne.n	800963e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f99c 	bl	8009974 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800963c:	e01c      	b.n	8009678 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	7bfa      	ldrb	r2, [r7, #15]
 8009642:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009646:	7bfb      	ldrb	r3, [r7, #15]
 8009648:	4619      	mov	r1, r3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fee4 	bl	800a418 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fa5a 	bl	8009b0a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009656:	7bfb      	ldrb	r3, [r7, #15]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d004      	beq.n	8009666 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2202      	movs	r2, #2
 8009660:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009664:	e008      	b.n	8009678 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800966e:	e003      	b.n	8009678 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f97e 	bl	8009974 <USBD_CtlError>
  }
}
 8009678:	bf00      	nop
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	885b      	ldrh	r3, [r3, #2]
 8009692:	b2da      	uxtb	r2, r3
 8009694:	4b4b      	ldr	r3, [pc, #300]	; (80097c4 <USBD_SetConfig+0x144>)
 8009696:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009698:	4b4a      	ldr	r3, [pc, #296]	; (80097c4 <USBD_SetConfig+0x144>)
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d905      	bls.n	80096ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f966 	bl	8009974 <USBD_CtlError>
    return USBD_FAIL;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e087      	b.n	80097bc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d002      	beq.n	80096bc <USBD_SetConfig+0x3c>
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	d025      	beq.n	8009706 <USBD_SetConfig+0x86>
 80096ba:	e071      	b.n	80097a0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80096bc:	4b41      	ldr	r3, [pc, #260]	; (80097c4 <USBD_SetConfig+0x144>)
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d01c      	beq.n	80096fe <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80096c4:	4b3f      	ldr	r3, [pc, #252]	; (80097c4 <USBD_SetConfig+0x144>)
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	461a      	mov	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80096ce:	4b3d      	ldr	r3, [pc, #244]	; (80097c4 <USBD_SetConfig+0x144>)
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7ff f9a7 	bl	8008a28 <USBD_SetClassConfig>
 80096da:	4603      	mov	r3, r0
 80096dc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80096de:	7bfb      	ldrb	r3, [r7, #15]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d004      	beq.n	80096ee <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f944 	bl	8009974 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80096ec:	e065      	b.n	80097ba <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fa0b 	bl	8009b0a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2203      	movs	r2, #3
 80096f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80096fc:	e05d      	b.n	80097ba <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fa03 	bl	8009b0a <USBD_CtlSendStatus>
    break;
 8009704:	e059      	b.n	80097ba <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009706:	4b2f      	ldr	r3, [pc, #188]	; (80097c4 <USBD_SetConfig+0x144>)
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d112      	bne.n	8009734 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2202      	movs	r2, #2
 8009712:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009716:	4b2b      	ldr	r3, [pc, #172]	; (80097c4 <USBD_SetConfig+0x144>)
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	461a      	mov	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009720:	4b28      	ldr	r3, [pc, #160]	; (80097c4 <USBD_SetConfig+0x144>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7ff f99a 	bl	8008a60 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f9ec 	bl	8009b0a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009732:	e042      	b.n	80097ba <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009734:	4b23      	ldr	r3, [pc, #140]	; (80097c4 <USBD_SetConfig+0x144>)
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	461a      	mov	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	429a      	cmp	r2, r3
 8009740:	d02a      	beq.n	8009798 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	b2db      	uxtb	r3, r3
 8009748:	4619      	mov	r1, r3
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7ff f988 	bl	8008a60 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009750:	4b1c      	ldr	r3, [pc, #112]	; (80097c4 <USBD_SetConfig+0x144>)
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	461a      	mov	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800975a:	4b1a      	ldr	r3, [pc, #104]	; (80097c4 <USBD_SetConfig+0x144>)
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	4619      	mov	r1, r3
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7ff f961 	bl	8008a28 <USBD_SetClassConfig>
 8009766:	4603      	mov	r3, r0
 8009768:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800976a:	7bfb      	ldrb	r3, [r7, #15]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00f      	beq.n	8009790 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f8fe 	bl	8009974 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	b2db      	uxtb	r3, r3
 800977e:	4619      	mov	r1, r3
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f7ff f96d 	bl	8008a60 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2202      	movs	r2, #2
 800978a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800978e:	e014      	b.n	80097ba <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f9ba 	bl	8009b0a <USBD_CtlSendStatus>
    break;
 8009796:	e010      	b.n	80097ba <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f9b6 	bl	8009b0a <USBD_CtlSendStatus>
    break;
 800979e:	e00c      	b.n	80097ba <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f8e6 	bl	8009974 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80097a8:	4b06      	ldr	r3, [pc, #24]	; (80097c4 <USBD_SetConfig+0x144>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7ff f956 	bl	8008a60 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80097b4:	2303      	movs	r3, #3
 80097b6:	73fb      	strb	r3, [r7, #15]
    break;
 80097b8:	bf00      	nop
  }

  return ret;
 80097ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	200003b0 	.word	0x200003b0

080097c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	88db      	ldrh	r3, [r3, #6]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d004      	beq.n	80097e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f8c9 	bl	8009974 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80097e2:	e021      	b.n	8009828 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	db17      	blt.n	800981e <USBD_GetConfig+0x56>
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	dd02      	ble.n	80097f8 <USBD_GetConfig+0x30>
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d00b      	beq.n	800980e <USBD_GetConfig+0x46>
 80097f6:	e012      	b.n	800981e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	3308      	adds	r3, #8
 8009802:	2201      	movs	r2, #1
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f925 	bl	8009a56 <USBD_CtlSendData>
      break;
 800980c:	e00c      	b.n	8009828 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	3304      	adds	r3, #4
 8009812:	2201      	movs	r2, #1
 8009814:	4619      	mov	r1, r3
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f91d 	bl	8009a56 <USBD_CtlSendData>
      break;
 800981c:	e004      	b.n	8009828 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 f8a7 	bl	8009974 <USBD_CtlError>
      break;
 8009826:	bf00      	nop
}
 8009828:	bf00      	nop
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009840:	3b01      	subs	r3, #1
 8009842:	2b02      	cmp	r3, #2
 8009844:	d81e      	bhi.n	8009884 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	88db      	ldrh	r3, [r3, #6]
 800984a:	2b02      	cmp	r3, #2
 800984c:	d004      	beq.n	8009858 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800984e:	6839      	ldr	r1, [r7, #0]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f88f 	bl	8009974 <USBD_CtlError>
      break;
 8009856:	e01a      	b.n	800988e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009864:	2b00      	cmp	r3, #0
 8009866:	d005      	beq.n	8009874 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	f043 0202 	orr.w	r2, r3, #2
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	330c      	adds	r3, #12
 8009878:	2202      	movs	r2, #2
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f8ea 	bl	8009a56 <USBD_CtlSendData>
    break;
 8009882:	e004      	b.n	800988e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f874 	bl	8009974 <USBD_CtlError>
    break;
 800988c:	bf00      	nop
  }
}
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b082      	sub	sp, #8
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	885b      	ldrh	r3, [r3, #2]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d106      	bne.n	80098b6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f92a 	bl	8009b0a <USBD_CtlSendStatus>
  }
}
 80098b6:	bf00      	nop
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b082      	sub	sp, #8
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ce:	3b01      	subs	r3, #1
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	d80b      	bhi.n	80098ec <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	885b      	ldrh	r3, [r3, #2]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d10c      	bne.n	80098f6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f910 	bl	8009b0a <USBD_CtlSendStatus>
      }
      break;
 80098ea:	e004      	b.n	80098f6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f840 	bl	8009974 <USBD_CtlError>
      break;
 80098f4:	e000      	b.n	80098f8 <USBD_ClrFeature+0x3a>
      break;
 80098f6:	bf00      	nop
  }
}
 80098f8:	bf00      	nop
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	781a      	ldrb	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3301      	adds	r3, #1
 800991a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	781a      	ldrb	r2, [r3, #0]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	3301      	adds	r3, #1
 8009928:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f7ff fad3 	bl	8008ed6 <SWAPBYTE>
 8009930:	4603      	mov	r3, r0
 8009932:	461a      	mov	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3301      	adds	r3, #1
 800993c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	3301      	adds	r3, #1
 8009942:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f7ff fac6 	bl	8008ed6 <SWAPBYTE>
 800994a:	4603      	mov	r3, r0
 800994c:	461a      	mov	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	3301      	adds	r3, #1
 8009956:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	3301      	adds	r3, #1
 800995c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f7ff fab9 	bl	8008ed6 <SWAPBYTE>
 8009964:	4603      	mov	r3, r0
 8009966:	461a      	mov	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	80da      	strh	r2, [r3, #6]
}
 800996c:	bf00      	nop
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800997e:	2180      	movs	r1, #128	; 0x80
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 fcdf 	bl	800a344 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009986:	2100      	movs	r1, #0
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fcdb 	bl	800a344 <USBD_LL_StallEP>
}
 800998e:	bf00      	nop
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b086      	sub	sp, #24
 800999a:	af00      	add	r7, sp, #0
 800999c:	60f8      	str	r0, [r7, #12]
 800999e:	60b9      	str	r1, [r7, #8]
 80099a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d036      	beq.n	8009a1a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80099b0:	6938      	ldr	r0, [r7, #16]
 80099b2:	f000 f836 	bl	8009a22 <USBD_GetLen>
 80099b6:	4603      	mov	r3, r0
 80099b8:	3301      	adds	r3, #1
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	b29a      	uxth	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80099c4:	7dfb      	ldrb	r3, [r7, #23]
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	4413      	add	r3, r2
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	7812      	ldrb	r2, [r2, #0]
 80099ce:	701a      	strb	r2, [r3, #0]
  idx++;
 80099d0:	7dfb      	ldrb	r3, [r7, #23]
 80099d2:	3301      	adds	r3, #1
 80099d4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80099d6:	7dfb      	ldrb	r3, [r7, #23]
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	4413      	add	r3, r2
 80099dc:	2203      	movs	r2, #3
 80099de:	701a      	strb	r2, [r3, #0]
  idx++;
 80099e0:	7dfb      	ldrb	r3, [r7, #23]
 80099e2:	3301      	adds	r3, #1
 80099e4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80099e6:	e013      	b.n	8009a10 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80099e8:	7dfb      	ldrb	r3, [r7, #23]
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	4413      	add	r3, r2
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	7812      	ldrb	r2, [r2, #0]
 80099f2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	3301      	adds	r3, #1
 80099f8:	613b      	str	r3, [r7, #16]
    idx++;
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
 80099fc:	3301      	adds	r3, #1
 80099fe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009a00:	7dfb      	ldrb	r3, [r7, #23]
 8009a02:	68ba      	ldr	r2, [r7, #8]
 8009a04:	4413      	add	r3, r2
 8009a06:	2200      	movs	r2, #0
 8009a08:	701a      	strb	r2, [r3, #0]
    idx++;
 8009a0a:	7dfb      	ldrb	r3, [r7, #23]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1e7      	bne.n	80099e8 <USBD_GetString+0x52>
 8009a18:	e000      	b.n	8009a1c <USBD_GetString+0x86>
    return;
 8009a1a:	bf00      	nop
  }
}
 8009a1c:	3718      	adds	r7, #24
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a22:	b480      	push	{r7}
 8009a24:	b085      	sub	sp, #20
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009a32:	e005      	b.n	8009a40 <USBD_GetLen+0x1e>
  {
    len++;
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
 8009a36:	3301      	adds	r3, #1
 8009a38:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1f5      	bne.n	8009a34 <USBD_GetLen+0x12>
  }

  return len;
 8009a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b084      	sub	sp, #16
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	60f8      	str	r0, [r7, #12]
 8009a5e:	60b9      	str	r1, [r7, #8]
 8009a60:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2202      	movs	r2, #2
 8009a66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f000 fcea 	bl	800a456 <USBD_LL_Transmit>

  return USBD_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f000 fcd9 	bl	800a456 <USBD_LL_Transmit>

  return USBD_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	60f8      	str	r0, [r7, #12]
 8009ab6:	60b9      	str	r1, [r7, #8]
 8009ab8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2203      	movs	r2, #3
 8009abe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 fcdd 	bl	800a498 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	68ba      	ldr	r2, [r7, #8]
 8009af8:	2100      	movs	r1, #0
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f000 fccc 	bl	800a498 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b082      	sub	sp, #8
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2204      	movs	r2, #4
 8009b16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	2100      	movs	r1, #0
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 fc98 	bl	800a456 <USBD_LL_Transmit>

  return USBD_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2205      	movs	r2, #5
 8009b3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b40:	2300      	movs	r3, #0
 8009b42:	2200      	movs	r2, #0
 8009b44:	2100      	movs	r1, #0
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fca6 	bl	800a498 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
	...

08009b58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	4912      	ldr	r1, [pc, #72]	; (8009ba8 <MX_USB_DEVICE_Init+0x50>)
 8009b60:	4812      	ldr	r0, [pc, #72]	; (8009bac <MX_USB_DEVICE_Init+0x54>)
 8009b62:	f7fe fef3 	bl	800894c <USBD_Init>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d001      	beq.n	8009b70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b6c:	f7f8 fbee 	bl	800234c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009b70:	490f      	ldr	r1, [pc, #60]	; (8009bb0 <MX_USB_DEVICE_Init+0x58>)
 8009b72:	480e      	ldr	r0, [pc, #56]	; (8009bac <MX_USB_DEVICE_Init+0x54>)
 8009b74:	f7fe ff20 	bl	80089b8 <USBD_RegisterClass>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d001      	beq.n	8009b82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b7e:	f7f8 fbe5 	bl	800234c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b82:	490c      	ldr	r1, [pc, #48]	; (8009bb4 <MX_USB_DEVICE_Init+0x5c>)
 8009b84:	4809      	ldr	r0, [pc, #36]	; (8009bac <MX_USB_DEVICE_Init+0x54>)
 8009b86:	f7fe fe45 	bl	8008814 <USBD_CDC_RegisterInterface>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b90:	f7f8 fbdc 	bl	800234c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b94:	4805      	ldr	r0, [pc, #20]	; (8009bac <MX_USB_DEVICE_Init+0x54>)
 8009b96:	f7fe ff30 	bl	80089fa <USBD_Start>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d001      	beq.n	8009ba4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009ba0:	f7f8 fbd4 	bl	800234c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ba4:	bf00      	nop
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	20000170 	.word	0x20000170
 8009bac:	2000073c 	.word	0x2000073c
 8009bb0:	20000058 	.word	0x20000058
 8009bb4:	2000015c 	.word	0x2000015c

08009bb8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	4905      	ldr	r1, [pc, #20]	; (8009bd4 <CDC_Init_FS+0x1c>)
 8009bc0:	4805      	ldr	r0, [pc, #20]	; (8009bd8 <CDC_Init_FS+0x20>)
 8009bc2:	f7fe fe3c 	bl	800883e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009bc6:	4905      	ldr	r1, [pc, #20]	; (8009bdc <CDC_Init_FS+0x24>)
 8009bc8:	4803      	ldr	r0, [pc, #12]	; (8009bd8 <CDC_Init_FS+0x20>)
 8009bca:	f7fe fe51 	bl	8008870 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009bce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	2000120c 	.word	0x2000120c
 8009bd8:	2000073c 	.word	0x2000073c
 8009bdc:	20000a0c 	.word	0x20000a0c

08009be0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009be0:	b480      	push	{r7}
 8009be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009be4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	6039      	str	r1, [r7, #0]
 8009bfa:	71fb      	strb	r3, [r7, #7]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009c00:	79fb      	ldrb	r3, [r7, #7]
 8009c02:	2b23      	cmp	r3, #35	; 0x23
 8009c04:	d84a      	bhi.n	8009c9c <CDC_Control_FS+0xac>
 8009c06:	a201      	add	r2, pc, #4	; (adr r2, 8009c0c <CDC_Control_FS+0x1c>)
 8009c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0c:	08009c9d 	.word	0x08009c9d
 8009c10:	08009c9d 	.word	0x08009c9d
 8009c14:	08009c9d 	.word	0x08009c9d
 8009c18:	08009c9d 	.word	0x08009c9d
 8009c1c:	08009c9d 	.word	0x08009c9d
 8009c20:	08009c9d 	.word	0x08009c9d
 8009c24:	08009c9d 	.word	0x08009c9d
 8009c28:	08009c9d 	.word	0x08009c9d
 8009c2c:	08009c9d 	.word	0x08009c9d
 8009c30:	08009c9d 	.word	0x08009c9d
 8009c34:	08009c9d 	.word	0x08009c9d
 8009c38:	08009c9d 	.word	0x08009c9d
 8009c3c:	08009c9d 	.word	0x08009c9d
 8009c40:	08009c9d 	.word	0x08009c9d
 8009c44:	08009c9d 	.word	0x08009c9d
 8009c48:	08009c9d 	.word	0x08009c9d
 8009c4c:	08009c9d 	.word	0x08009c9d
 8009c50:	08009c9d 	.word	0x08009c9d
 8009c54:	08009c9d 	.word	0x08009c9d
 8009c58:	08009c9d 	.word	0x08009c9d
 8009c5c:	08009c9d 	.word	0x08009c9d
 8009c60:	08009c9d 	.word	0x08009c9d
 8009c64:	08009c9d 	.word	0x08009c9d
 8009c68:	08009c9d 	.word	0x08009c9d
 8009c6c:	08009c9d 	.word	0x08009c9d
 8009c70:	08009c9d 	.word	0x08009c9d
 8009c74:	08009c9d 	.word	0x08009c9d
 8009c78:	08009c9d 	.word	0x08009c9d
 8009c7c:	08009c9d 	.word	0x08009c9d
 8009c80:	08009c9d 	.word	0x08009c9d
 8009c84:	08009c9d 	.word	0x08009c9d
 8009c88:	08009c9d 	.word	0x08009c9d
 8009c8c:	08009c9d 	.word	0x08009c9d
 8009c90:	08009c9d 	.word	0x08009c9d
 8009c94:	08009c9d 	.word	0x08009c9d
 8009c98:	08009c9d 	.word	0x08009c9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c9c:	bf00      	nop
  }

  return (USBD_OK);
 8009c9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009cb6:	6879      	ldr	r1, [r7, #4]
 8009cb8:	4805      	ldr	r0, [pc, #20]	; (8009cd0 <CDC_Receive_FS+0x24>)
 8009cba:	f7fe fdd9 	bl	8008870 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009cbe:	4804      	ldr	r0, [pc, #16]	; (8009cd0 <CDC_Receive_FS+0x24>)
 8009cc0:	f7fe fe1a 	bl	80088f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009cc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	2000073c 	.word	0x2000073c

08009cd4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009ce4:	4b0d      	ldr	r3, [pc, #52]	; (8009d1c <CDC_Transmit_FS+0x48>)
 8009ce6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e00b      	b.n	8009d12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009cfa:	887b      	ldrh	r3, [r7, #2]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	6879      	ldr	r1, [r7, #4]
 8009d00:	4806      	ldr	r0, [pc, #24]	; (8009d1c <CDC_Transmit_FS+0x48>)
 8009d02:	f7fe fd9c 	bl	800883e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009d06:	4805      	ldr	r0, [pc, #20]	; (8009d1c <CDC_Transmit_FS+0x48>)
 8009d08:	f7fe fdc6 	bl	8008898 <USBD_CDC_TransmitPacket>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	2000073c 	.word	0x2000073c

08009d20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b087      	sub	sp, #28
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009d32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	371c      	adds	r7, #28
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
	...

08009d44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	6039      	str	r1, [r7, #0]
 8009d4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	2212      	movs	r2, #18
 8009d54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009d56:	4b03      	ldr	r3, [pc, #12]	; (8009d64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	2000018c 	.word	0x2000018c

08009d68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	4603      	mov	r3, r0
 8009d70:	6039      	str	r1, [r7, #0]
 8009d72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	2204      	movs	r2, #4
 8009d78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d7a:	4b03      	ldr	r3, [pc, #12]	; (8009d88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	200001a0 	.word	0x200001a0

08009d8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	4603      	mov	r3, r0
 8009d94:	6039      	str	r1, [r7, #0]
 8009d96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d98:	79fb      	ldrb	r3, [r7, #7]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d105      	bne.n	8009daa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	4907      	ldr	r1, [pc, #28]	; (8009dc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009da2:	4808      	ldr	r0, [pc, #32]	; (8009dc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009da4:	f7ff fdf7 	bl	8009996 <USBD_GetString>
 8009da8:	e004      	b.n	8009db4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	4904      	ldr	r1, [pc, #16]	; (8009dc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009dae:	4805      	ldr	r0, [pc, #20]	; (8009dc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009db0:	f7ff fdf1 	bl	8009996 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009db4:	4b02      	ldr	r3, [pc, #8]	; (8009dc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	20001a0c 	.word	0x20001a0c
 8009dc4:	0800c66c 	.word	0x0800c66c

08009dc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	6039      	str	r1, [r7, #0]
 8009dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009dd4:	683a      	ldr	r2, [r7, #0]
 8009dd6:	4904      	ldr	r1, [pc, #16]	; (8009de8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009dd8:	4804      	ldr	r0, [pc, #16]	; (8009dec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009dda:	f7ff fddc 	bl	8009996 <USBD_GetString>
  return USBD_StrDesc;
 8009dde:	4b02      	ldr	r3, [pc, #8]	; (8009de8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20001a0c 	.word	0x20001a0c
 8009dec:	0800c684 	.word	0x0800c684

08009df0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	4603      	mov	r3, r0
 8009df8:	6039      	str	r1, [r7, #0]
 8009dfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	221a      	movs	r2, #26
 8009e00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e02:	f000 f843 	bl	8009e8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009e06:	4b02      	ldr	r3, [pc, #8]	; (8009e10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	200001a4 	.word	0x200001a4

08009e14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	6039      	str	r1, [r7, #0]
 8009e1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e20:	79fb      	ldrb	r3, [r7, #7]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d105      	bne.n	8009e32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e26:	683a      	ldr	r2, [r7, #0]
 8009e28:	4907      	ldr	r1, [pc, #28]	; (8009e48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e2a:	4808      	ldr	r0, [pc, #32]	; (8009e4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e2c:	f7ff fdb3 	bl	8009996 <USBD_GetString>
 8009e30:	e004      	b.n	8009e3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e32:	683a      	ldr	r2, [r7, #0]
 8009e34:	4904      	ldr	r1, [pc, #16]	; (8009e48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e36:	4805      	ldr	r0, [pc, #20]	; (8009e4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e38:	f7ff fdad 	bl	8009996 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e3c:	4b02      	ldr	r3, [pc, #8]	; (8009e48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	20001a0c 	.word	0x20001a0c
 8009e4c:	0800c698 	.word	0x0800c698

08009e50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	4603      	mov	r3, r0
 8009e58:	6039      	str	r1, [r7, #0]
 8009e5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e5c:	79fb      	ldrb	r3, [r7, #7]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d105      	bne.n	8009e6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	4907      	ldr	r1, [pc, #28]	; (8009e84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e66:	4808      	ldr	r0, [pc, #32]	; (8009e88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e68:	f7ff fd95 	bl	8009996 <USBD_GetString>
 8009e6c:	e004      	b.n	8009e78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	4904      	ldr	r1, [pc, #16]	; (8009e84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e72:	4805      	ldr	r0, [pc, #20]	; (8009e88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e74:	f7ff fd8f 	bl	8009996 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e78:	4b02      	ldr	r3, [pc, #8]	; (8009e84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3708      	adds	r7, #8
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	20001a0c 	.word	0x20001a0c
 8009e88:	0800c6a4 	.word	0x0800c6a4

08009e8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e92:	4b0f      	ldr	r3, [pc, #60]	; (8009ed0 <Get_SerialNum+0x44>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e98:	4b0e      	ldr	r3, [pc, #56]	; (8009ed4 <Get_SerialNum+0x48>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e9e:	4b0e      	ldr	r3, [pc, #56]	; (8009ed8 <Get_SerialNum+0x4c>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d009      	beq.n	8009ec6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009eb2:	2208      	movs	r2, #8
 8009eb4:	4909      	ldr	r1, [pc, #36]	; (8009edc <Get_SerialNum+0x50>)
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f000 f814 	bl	8009ee4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ebc:	2204      	movs	r2, #4
 8009ebe:	4908      	ldr	r1, [pc, #32]	; (8009ee0 <Get_SerialNum+0x54>)
 8009ec0:	68b8      	ldr	r0, [r7, #8]
 8009ec2:	f000 f80f 	bl	8009ee4 <IntToUnicode>
  }
}
 8009ec6:	bf00      	nop
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	1fff7a10 	.word	0x1fff7a10
 8009ed4:	1fff7a14 	.word	0x1fff7a14
 8009ed8:	1fff7a18 	.word	0x1fff7a18
 8009edc:	200001a6 	.word	0x200001a6
 8009ee0:	200001b6 	.word	0x200001b6

08009ee4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b087      	sub	sp, #28
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	75fb      	strb	r3, [r7, #23]
 8009efa:	e027      	b.n	8009f4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	0f1b      	lsrs	r3, r3, #28
 8009f00:	2b09      	cmp	r3, #9
 8009f02:	d80b      	bhi.n	8009f1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	0f1b      	lsrs	r3, r3, #28
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	7dfb      	ldrb	r3, [r7, #23]
 8009f0c:	005b      	lsls	r3, r3, #1
 8009f0e:	4619      	mov	r1, r3
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	440b      	add	r3, r1
 8009f14:	3230      	adds	r2, #48	; 0x30
 8009f16:	b2d2      	uxtb	r2, r2
 8009f18:	701a      	strb	r2, [r3, #0]
 8009f1a:	e00a      	b.n	8009f32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	0f1b      	lsrs	r3, r3, #28
 8009f20:	b2da      	uxtb	r2, r3
 8009f22:	7dfb      	ldrb	r3, [r7, #23]
 8009f24:	005b      	lsls	r3, r3, #1
 8009f26:	4619      	mov	r1, r3
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	440b      	add	r3, r1
 8009f2c:	3237      	adds	r2, #55	; 0x37
 8009f2e:	b2d2      	uxtb	r2, r2
 8009f30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	011b      	lsls	r3, r3, #4
 8009f36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f38:	7dfb      	ldrb	r3, [r7, #23]
 8009f3a:	005b      	lsls	r3, r3, #1
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	4413      	add	r3, r2
 8009f42:	2200      	movs	r2, #0
 8009f44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f46:	7dfb      	ldrb	r3, [r7, #23]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	75fb      	strb	r3, [r7, #23]
 8009f4c:	7dfa      	ldrb	r2, [r7, #23]
 8009f4e:	79fb      	ldrb	r3, [r7, #7]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d3d3      	bcc.n	8009efc <IntToUnicode+0x18>
  }
}
 8009f54:	bf00      	nop
 8009f56:	371c      	adds	r7, #28
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b08a      	sub	sp, #40	; 0x28
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f68:	f107 0314 	add.w	r3, r7, #20
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	605a      	str	r2, [r3, #4]
 8009f72:	609a      	str	r2, [r3, #8]
 8009f74:	60da      	str	r2, [r3, #12]
 8009f76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f80:	d13a      	bne.n	8009ff8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f82:	2300      	movs	r3, #0
 8009f84:	613b      	str	r3, [r7, #16]
 8009f86:	4b1e      	ldr	r3, [pc, #120]	; (800a000 <HAL_PCD_MspInit+0xa0>)
 8009f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8a:	4a1d      	ldr	r2, [pc, #116]	; (800a000 <HAL_PCD_MspInit+0xa0>)
 8009f8c:	f043 0301 	orr.w	r3, r3, #1
 8009f90:	6313      	str	r3, [r2, #48]	; 0x30
 8009f92:	4b1b      	ldr	r3, [pc, #108]	; (800a000 <HAL_PCD_MspInit+0xa0>)
 8009f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f96:	f003 0301 	and.w	r3, r3, #1
 8009f9a:	613b      	str	r3, [r7, #16]
 8009f9c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009f9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fac:	2303      	movs	r3, #3
 8009fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009fb0:	230a      	movs	r3, #10
 8009fb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009fb4:	f107 0314 	add.w	r3, r7, #20
 8009fb8:	4619      	mov	r1, r3
 8009fba:	4812      	ldr	r0, [pc, #72]	; (800a004 <HAL_PCD_MspInit+0xa4>)
 8009fbc:	f7f9 f9fa 	bl	80033b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009fc0:	4b0f      	ldr	r3, [pc, #60]	; (800a000 <HAL_PCD_MspInit+0xa0>)
 8009fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc4:	4a0e      	ldr	r2, [pc, #56]	; (800a000 <HAL_PCD_MspInit+0xa0>)
 8009fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fca:	6353      	str	r3, [r2, #52]	; 0x34
 8009fcc:	2300      	movs	r3, #0
 8009fce:	60fb      	str	r3, [r7, #12]
 8009fd0:	4b0b      	ldr	r3, [pc, #44]	; (800a000 <HAL_PCD_MspInit+0xa0>)
 8009fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fd4:	4a0a      	ldr	r2, [pc, #40]	; (800a000 <HAL_PCD_MspInit+0xa0>)
 8009fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009fda:	6453      	str	r3, [r2, #68]	; 0x44
 8009fdc:	4b08      	ldr	r3, [pc, #32]	; (800a000 <HAL_PCD_MspInit+0xa0>)
 8009fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fe4:	60fb      	str	r3, [r7, #12]
 8009fe6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009fe8:	2200      	movs	r2, #0
 8009fea:	2100      	movs	r1, #0
 8009fec:	2043      	movs	r0, #67	; 0x43
 8009fee:	f7f8 fe1a 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ff2:	2043      	movs	r0, #67	; 0x43
 8009ff4:	f7f8 fe33 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ff8:	bf00      	nop
 8009ffa:	3728      	adds	r7, #40	; 0x28
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	40023800 	.word	0x40023800
 800a004:	40020000 	.word	0x40020000

0800a008 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a01c:	4619      	mov	r1, r3
 800a01e:	4610      	mov	r0, r2
 800a020:	f7fe fd36 	bl	8008a90 <USBD_LL_SetupStage>
}
 800a024:	bf00      	nop
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	460b      	mov	r3, r1
 800a036:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a03e:	78fa      	ldrb	r2, [r7, #3]
 800a040:	6879      	ldr	r1, [r7, #4]
 800a042:	4613      	mov	r3, r2
 800a044:	00db      	lsls	r3, r3, #3
 800a046:	1a9b      	subs	r3, r3, r2
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	440b      	add	r3, r1
 800a04c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	78fb      	ldrb	r3, [r7, #3]
 800a054:	4619      	mov	r1, r3
 800a056:	f7fe fd6e 	bl	8008b36 <USBD_LL_DataOutStage>
}
 800a05a:	bf00      	nop
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b082      	sub	sp, #8
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	460b      	mov	r3, r1
 800a06c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a074:	78fa      	ldrb	r2, [r7, #3]
 800a076:	6879      	ldr	r1, [r7, #4]
 800a078:	4613      	mov	r3, r2
 800a07a:	00db      	lsls	r3, r3, #3
 800a07c:	1a9b      	subs	r3, r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	440b      	add	r3, r1
 800a082:	3348      	adds	r3, #72	; 0x48
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	78fb      	ldrb	r3, [r7, #3]
 800a088:	4619      	mov	r1, r3
 800a08a:	f7fe fdb7 	bl	8008bfc <USBD_LL_DataInStage>
}
 800a08e:	bf00      	nop
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b082      	sub	sp, #8
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fe febb 	bl	8008e20 <USBD_LL_SOF>
}
 800a0aa:	bf00      	nop
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d102      	bne.n	800a0cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	73fb      	strb	r3, [r7, #15]
 800a0ca:	e008      	b.n	800a0de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d102      	bne.n	800a0da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	73fb      	strb	r3, [r7, #15]
 800a0d8:	e001      	b.n	800a0de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a0da:	f7f8 f937 	bl	800234c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0e4:	7bfa      	ldrb	r2, [r7, #15]
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7fe fe5e 	bl	8008daa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fe fe17 	bl	8008d28 <USBD_LL_Reset>
}
 800a0fa:	bf00      	nop
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
	...

0800a104 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a112:	4618      	mov	r0, r3
 800a114:	f7fe fe59 	bl	8008dca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	6812      	ldr	r2, [r2, #0]
 800a126:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a12a:	f043 0301 	orr.w	r3, r3, #1
 800a12e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a1b      	ldr	r3, [r3, #32]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d005      	beq.n	800a144 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a138:	4b04      	ldr	r3, [pc, #16]	; (800a14c <HAL_PCD_SuspendCallback+0x48>)
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	4a03      	ldr	r2, [pc, #12]	; (800a14c <HAL_PCD_SuspendCallback+0x48>)
 800a13e:	f043 0306 	orr.w	r3, r3, #6
 800a142:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a144:	bf00      	nop
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	e000ed00 	.word	0xe000ed00

0800a150 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe fe48 	bl	8008df4 <USBD_LL_Resume>
}
 800a164:	bf00      	nop
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	460b      	mov	r3, r1
 800a176:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a17e:	78fa      	ldrb	r2, [r7, #3]
 800a180:	4611      	mov	r1, r2
 800a182:	4618      	mov	r0, r3
 800a184:	f7fe fe73 	bl	8008e6e <USBD_LL_IsoOUTIncomplete>
}
 800a188:	bf00      	nop
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	460b      	mov	r3, r1
 800a19a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a1a2:	78fa      	ldrb	r2, [r7, #3]
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fe fe54 	bl	8008e54 <USBD_LL_IsoINIncomplete>
}
 800a1ac:	bf00      	nop
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7fe fe60 	bl	8008e88 <USBD_LL_DevConnected>
}
 800a1c8:	bf00      	nop
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7fe fe5d 	bl	8008e9e <USBD_LL_DevDisconnected>
}
 800a1e4:	bf00      	nop
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d13c      	bne.n	800a276 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a1fc:	4a20      	ldr	r2, [pc, #128]	; (800a280 <USBD_LL_Init+0x94>)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a1e      	ldr	r2, [pc, #120]	; (800a280 <USBD_LL_Init+0x94>)
 800a208:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a20c:	4b1c      	ldr	r3, [pc, #112]	; (800a280 <USBD_LL_Init+0x94>)
 800a20e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a212:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a214:	4b1a      	ldr	r3, [pc, #104]	; (800a280 <USBD_LL_Init+0x94>)
 800a216:	2204      	movs	r2, #4
 800a218:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a21a:	4b19      	ldr	r3, [pc, #100]	; (800a280 <USBD_LL_Init+0x94>)
 800a21c:	2202      	movs	r2, #2
 800a21e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a220:	4b17      	ldr	r3, [pc, #92]	; (800a280 <USBD_LL_Init+0x94>)
 800a222:	2200      	movs	r2, #0
 800a224:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a226:	4b16      	ldr	r3, [pc, #88]	; (800a280 <USBD_LL_Init+0x94>)
 800a228:	2202      	movs	r2, #2
 800a22a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a22c:	4b14      	ldr	r3, [pc, #80]	; (800a280 <USBD_LL_Init+0x94>)
 800a22e:	2200      	movs	r2, #0
 800a230:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a232:	4b13      	ldr	r3, [pc, #76]	; (800a280 <USBD_LL_Init+0x94>)
 800a234:	2200      	movs	r2, #0
 800a236:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a238:	4b11      	ldr	r3, [pc, #68]	; (800a280 <USBD_LL_Init+0x94>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a23e:	4b10      	ldr	r3, [pc, #64]	; (800a280 <USBD_LL_Init+0x94>)
 800a240:	2200      	movs	r2, #0
 800a242:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a244:	4b0e      	ldr	r3, [pc, #56]	; (800a280 <USBD_LL_Init+0x94>)
 800a246:	2200      	movs	r2, #0
 800a248:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a24a:	480d      	ldr	r0, [pc, #52]	; (800a280 <USBD_LL_Init+0x94>)
 800a24c:	f7f9 fa7e 	bl	800374c <HAL_PCD_Init>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a256:	f7f8 f879 	bl	800234c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a25a:	2180      	movs	r1, #128	; 0x80
 800a25c:	4808      	ldr	r0, [pc, #32]	; (800a280 <USBD_LL_Init+0x94>)
 800a25e:	f7fa fbdc 	bl	8004a1a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a262:	2240      	movs	r2, #64	; 0x40
 800a264:	2100      	movs	r1, #0
 800a266:	4806      	ldr	r0, [pc, #24]	; (800a280 <USBD_LL_Init+0x94>)
 800a268:	f7fa fb90 	bl	800498c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a26c:	2280      	movs	r2, #128	; 0x80
 800a26e:	2101      	movs	r1, #1
 800a270:	4803      	ldr	r0, [pc, #12]	; (800a280 <USBD_LL_Init+0x94>)
 800a272:	f7fa fb8b 	bl	800498c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	20001c0c 	.word	0x20001c0c

0800a284 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a290:	2300      	movs	r3, #0
 800a292:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7f9 fb73 	bl	8003986 <HAL_PCD_Start>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 f92a 	bl	800a500 <USBD_Get_USB_Status>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b084      	sub	sp, #16
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	4608      	mov	r0, r1
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	70fb      	strb	r3, [r7, #3]
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	70bb      	strb	r3, [r7, #2]
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a2e2:	78bb      	ldrb	r3, [r7, #2]
 800a2e4:	883a      	ldrh	r2, [r7, #0]
 800a2e6:	78f9      	ldrb	r1, [r7, #3]
 800a2e8:	f7f9 ff57 	bl	800419a <HAL_PCD_EP_Open>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2f0:	7bfb      	ldrb	r3, [r7, #15]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f000 f904 	bl	800a500 <USBD_Get_USB_Status>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a2fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b084      	sub	sp, #16
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	460b      	mov	r3, r1
 800a310:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a312:	2300      	movs	r3, #0
 800a314:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a316:	2300      	movs	r3, #0
 800a318:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a320:	78fa      	ldrb	r2, [r7, #3]
 800a322:	4611      	mov	r1, r2
 800a324:	4618      	mov	r0, r3
 800a326:	f7f9 ffa0 	bl	800426a <HAL_PCD_EP_Close>
 800a32a:	4603      	mov	r3, r0
 800a32c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800a32e:	7bfb      	ldrb	r3, [r7, #15]
 800a330:	4618      	mov	r0, r3
 800a332:	f000 f8e5 	bl	800a500 <USBD_Get_USB_Status>
 800a336:	4603      	mov	r3, r0
 800a338:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800a33a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a350:	2300      	movs	r3, #0
 800a352:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a354:	2300      	movs	r3, #0
 800a356:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a35e:	78fa      	ldrb	r2, [r7, #3]
 800a360:	4611      	mov	r1, r2
 800a362:	4618      	mov	r0, r3
 800a364:	f7fa f878 	bl	8004458 <HAL_PCD_EP_SetStall>
 800a368:	4603      	mov	r3, r0
 800a36a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a36c:	7bfb      	ldrb	r3, [r7, #15]
 800a36e:	4618      	mov	r0, r3
 800a370:	f000 f8c6 	bl	800a500 <USBD_Get_USB_Status>
 800a374:	4603      	mov	r3, r0
 800a376:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800a378:	7bbb      	ldrb	r3, [r7, #14]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b084      	sub	sp, #16
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
 800a38a:	460b      	mov	r3, r1
 800a38c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a38e:	2300      	movs	r3, #0
 800a390:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a39c:	78fa      	ldrb	r2, [r7, #3]
 800a39e:	4611      	mov	r1, r2
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7fa f8bd 	bl	8004520 <HAL_PCD_EP_ClrStall>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f000 f8a7 	bl	800a500 <USBD_Get_USB_Status>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800a3b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3d2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800a3d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	da0b      	bge.n	800a3f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800a3dc:	78fb      	ldrb	r3, [r7, #3]
 800a3de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3e2:	68f9      	ldr	r1, [r7, #12]
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	00db      	lsls	r3, r3, #3
 800a3e8:	1a9b      	subs	r3, r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	440b      	add	r3, r1
 800a3ee:	333e      	adds	r3, #62	; 0x3e
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	e00b      	b.n	800a40c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800a3f4:	78fb      	ldrb	r3, [r7, #3]
 800a3f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3fa:	68f9      	ldr	r1, [r7, #12]
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	00db      	lsls	r3, r3, #3
 800a400:	1a9b      	subs	r3, r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	440b      	add	r3, r1
 800a406:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a40a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3714      	adds	r7, #20
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	460b      	mov	r3, r1
 800a422:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a424:	2300      	movs	r3, #0
 800a426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a428:	2300      	movs	r3, #0
 800a42a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a432:	78fa      	ldrb	r2, [r7, #3]
 800a434:	4611      	mov	r1, r2
 800a436:	4618      	mov	r0, r3
 800a438:	f7f9 fe8a 	bl	8004150 <HAL_PCD_SetAddress>
 800a43c:	4603      	mov	r3, r0
 800a43e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a440:	7bfb      	ldrb	r3, [r7, #15]
 800a442:	4618      	mov	r0, r3
 800a444:	f000 f85c 	bl	800a500 <USBD_Get_USB_Status>
 800a448:	4603      	mov	r3, r0
 800a44a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800a44c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b086      	sub	sp, #24
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	60f8      	str	r0, [r7, #12]
 800a45e:	607a      	str	r2, [r7, #4]
 800a460:	603b      	str	r3, [r7, #0]
 800a462:	460b      	mov	r3, r1
 800a464:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a46a:	2300      	movs	r3, #0
 800a46c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a474:	7af9      	ldrb	r1, [r7, #11]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	f7f9 ffa3 	bl	80043c4 <HAL_PCD_EP_Transmit>
 800a47e:	4603      	mov	r3, r0
 800a480:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800a482:	7dfb      	ldrb	r3, [r7, #23]
 800a484:	4618      	mov	r0, r3
 800a486:	f000 f83b 	bl	800a500 <USBD_Get_USB_Status>
 800a48a:	4603      	mov	r3, r0
 800a48c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800a48e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3718      	adds	r7, #24
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	607a      	str	r2, [r7, #4]
 800a4a2:	603b      	str	r3, [r7, #0]
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a4b6:	7af9      	ldrb	r1, [r7, #11]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	f7f9 ff1f 	bl	80042fe <HAL_PCD_EP_Receive>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800a4c4:	7dfb      	ldrb	r3, [r7, #23]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f000 f81a 	bl	800a500 <USBD_Get_USB_Status>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800a4d0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3718      	adds	r7, #24
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b082      	sub	sp, #8
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a4ec:	78fa      	ldrb	r2, [r7, #3]
 800a4ee:	4611      	mov	r1, r2
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7f9 ff4f 	bl	8004394 <HAL_PCD_EP_GetRxCount>
 800a4f6:	4603      	mov	r3, r0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	4603      	mov	r3, r0
 800a508:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a50e:	79fb      	ldrb	r3, [r7, #7]
 800a510:	2b03      	cmp	r3, #3
 800a512:	d817      	bhi.n	800a544 <USBD_Get_USB_Status+0x44>
 800a514:	a201      	add	r2, pc, #4	; (adr r2, 800a51c <USBD_Get_USB_Status+0x1c>)
 800a516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51a:	bf00      	nop
 800a51c:	0800a52d 	.word	0x0800a52d
 800a520:	0800a533 	.word	0x0800a533
 800a524:	0800a539 	.word	0x0800a539
 800a528:	0800a53f 	.word	0x0800a53f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a52c:	2300      	movs	r3, #0
 800a52e:	73fb      	strb	r3, [r7, #15]
    break;
 800a530:	e00b      	b.n	800a54a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a532:	2303      	movs	r3, #3
 800a534:	73fb      	strb	r3, [r7, #15]
    break;
 800a536:	e008      	b.n	800a54a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a538:	2301      	movs	r3, #1
 800a53a:	73fb      	strb	r3, [r7, #15]
    break;
 800a53c:	e005      	b.n	800a54a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a53e:	2303      	movs	r3, #3
 800a540:	73fb      	strb	r3, [r7, #15]
    break;
 800a542:	e002      	b.n	800a54a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a544:	2303      	movs	r3, #3
 800a546:	73fb      	strb	r3, [r7, #15]
    break;
 800a548:	bf00      	nop
  }
  return usb_status;
 800a54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3714      	adds	r7, #20
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <__errno>:
 800a558:	4b01      	ldr	r3, [pc, #4]	; (800a560 <__errno+0x8>)
 800a55a:	6818      	ldr	r0, [r3, #0]
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	200001c0 	.word	0x200001c0

0800a564 <__libc_init_array>:
 800a564:	b570      	push	{r4, r5, r6, lr}
 800a566:	4e0d      	ldr	r6, [pc, #52]	; (800a59c <__libc_init_array+0x38>)
 800a568:	4c0d      	ldr	r4, [pc, #52]	; (800a5a0 <__libc_init_array+0x3c>)
 800a56a:	1ba4      	subs	r4, r4, r6
 800a56c:	10a4      	asrs	r4, r4, #2
 800a56e:	2500      	movs	r5, #0
 800a570:	42a5      	cmp	r5, r4
 800a572:	d109      	bne.n	800a588 <__libc_init_array+0x24>
 800a574:	4e0b      	ldr	r6, [pc, #44]	; (800a5a4 <__libc_init_array+0x40>)
 800a576:	4c0c      	ldr	r4, [pc, #48]	; (800a5a8 <__libc_init_array+0x44>)
 800a578:	f002 f866 	bl	800c648 <_init>
 800a57c:	1ba4      	subs	r4, r4, r6
 800a57e:	10a4      	asrs	r4, r4, #2
 800a580:	2500      	movs	r5, #0
 800a582:	42a5      	cmp	r5, r4
 800a584:	d105      	bne.n	800a592 <__libc_init_array+0x2e>
 800a586:	bd70      	pop	{r4, r5, r6, pc}
 800a588:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a58c:	4798      	blx	r3
 800a58e:	3501      	adds	r5, #1
 800a590:	e7ee      	b.n	800a570 <__libc_init_array+0xc>
 800a592:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a596:	4798      	blx	r3
 800a598:	3501      	adds	r5, #1
 800a59a:	e7f2      	b.n	800a582 <__libc_init_array+0x1e>
 800a59c:	0800c930 	.word	0x0800c930
 800a5a0:	0800c930 	.word	0x0800c930
 800a5a4:	0800c930 	.word	0x0800c930
 800a5a8:	0800c934 	.word	0x0800c934

0800a5ac <malloc>:
 800a5ac:	4b02      	ldr	r3, [pc, #8]	; (800a5b8 <malloc+0xc>)
 800a5ae:	4601      	mov	r1, r0
 800a5b0:	6818      	ldr	r0, [r3, #0]
 800a5b2:	f000 b861 	b.w	800a678 <_malloc_r>
 800a5b6:	bf00      	nop
 800a5b8:	200001c0 	.word	0x200001c0

0800a5bc <free>:
 800a5bc:	4b02      	ldr	r3, [pc, #8]	; (800a5c8 <free+0xc>)
 800a5be:	4601      	mov	r1, r0
 800a5c0:	6818      	ldr	r0, [r3, #0]
 800a5c2:	f000 b80b 	b.w	800a5dc <_free_r>
 800a5c6:	bf00      	nop
 800a5c8:	200001c0 	.word	0x200001c0

0800a5cc <memset>:
 800a5cc:	4402      	add	r2, r0
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d100      	bne.n	800a5d6 <memset+0xa>
 800a5d4:	4770      	bx	lr
 800a5d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a5da:	e7f9      	b.n	800a5d0 <memset+0x4>

0800a5dc <_free_r>:
 800a5dc:	b538      	push	{r3, r4, r5, lr}
 800a5de:	4605      	mov	r5, r0
 800a5e0:	2900      	cmp	r1, #0
 800a5e2:	d045      	beq.n	800a670 <_free_r+0x94>
 800a5e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5e8:	1f0c      	subs	r4, r1, #4
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	bfb8      	it	lt
 800a5ee:	18e4      	addlt	r4, r4, r3
 800a5f0:	f001 fb87 	bl	800bd02 <__malloc_lock>
 800a5f4:	4a1f      	ldr	r2, [pc, #124]	; (800a674 <_free_r+0x98>)
 800a5f6:	6813      	ldr	r3, [r2, #0]
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	b933      	cbnz	r3, 800a60a <_free_r+0x2e>
 800a5fc:	6063      	str	r3, [r4, #4]
 800a5fe:	6014      	str	r4, [r2, #0]
 800a600:	4628      	mov	r0, r5
 800a602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a606:	f001 bb7d 	b.w	800bd04 <__malloc_unlock>
 800a60a:	42a3      	cmp	r3, r4
 800a60c:	d90c      	bls.n	800a628 <_free_r+0x4c>
 800a60e:	6821      	ldr	r1, [r4, #0]
 800a610:	1862      	adds	r2, r4, r1
 800a612:	4293      	cmp	r3, r2
 800a614:	bf04      	itt	eq
 800a616:	681a      	ldreq	r2, [r3, #0]
 800a618:	685b      	ldreq	r3, [r3, #4]
 800a61a:	6063      	str	r3, [r4, #4]
 800a61c:	bf04      	itt	eq
 800a61e:	1852      	addeq	r2, r2, r1
 800a620:	6022      	streq	r2, [r4, #0]
 800a622:	6004      	str	r4, [r0, #0]
 800a624:	e7ec      	b.n	800a600 <_free_r+0x24>
 800a626:	4613      	mov	r3, r2
 800a628:	685a      	ldr	r2, [r3, #4]
 800a62a:	b10a      	cbz	r2, 800a630 <_free_r+0x54>
 800a62c:	42a2      	cmp	r2, r4
 800a62e:	d9fa      	bls.n	800a626 <_free_r+0x4a>
 800a630:	6819      	ldr	r1, [r3, #0]
 800a632:	1858      	adds	r0, r3, r1
 800a634:	42a0      	cmp	r0, r4
 800a636:	d10b      	bne.n	800a650 <_free_r+0x74>
 800a638:	6820      	ldr	r0, [r4, #0]
 800a63a:	4401      	add	r1, r0
 800a63c:	1858      	adds	r0, r3, r1
 800a63e:	4282      	cmp	r2, r0
 800a640:	6019      	str	r1, [r3, #0]
 800a642:	d1dd      	bne.n	800a600 <_free_r+0x24>
 800a644:	6810      	ldr	r0, [r2, #0]
 800a646:	6852      	ldr	r2, [r2, #4]
 800a648:	605a      	str	r2, [r3, #4]
 800a64a:	4401      	add	r1, r0
 800a64c:	6019      	str	r1, [r3, #0]
 800a64e:	e7d7      	b.n	800a600 <_free_r+0x24>
 800a650:	d902      	bls.n	800a658 <_free_r+0x7c>
 800a652:	230c      	movs	r3, #12
 800a654:	602b      	str	r3, [r5, #0]
 800a656:	e7d3      	b.n	800a600 <_free_r+0x24>
 800a658:	6820      	ldr	r0, [r4, #0]
 800a65a:	1821      	adds	r1, r4, r0
 800a65c:	428a      	cmp	r2, r1
 800a65e:	bf04      	itt	eq
 800a660:	6811      	ldreq	r1, [r2, #0]
 800a662:	6852      	ldreq	r2, [r2, #4]
 800a664:	6062      	str	r2, [r4, #4]
 800a666:	bf04      	itt	eq
 800a668:	1809      	addeq	r1, r1, r0
 800a66a:	6021      	streq	r1, [r4, #0]
 800a66c:	605c      	str	r4, [r3, #4]
 800a66e:	e7c7      	b.n	800a600 <_free_r+0x24>
 800a670:	bd38      	pop	{r3, r4, r5, pc}
 800a672:	bf00      	nop
 800a674:	200003b4 	.word	0x200003b4

0800a678 <_malloc_r>:
 800a678:	b570      	push	{r4, r5, r6, lr}
 800a67a:	1ccd      	adds	r5, r1, #3
 800a67c:	f025 0503 	bic.w	r5, r5, #3
 800a680:	3508      	adds	r5, #8
 800a682:	2d0c      	cmp	r5, #12
 800a684:	bf38      	it	cc
 800a686:	250c      	movcc	r5, #12
 800a688:	2d00      	cmp	r5, #0
 800a68a:	4606      	mov	r6, r0
 800a68c:	db01      	blt.n	800a692 <_malloc_r+0x1a>
 800a68e:	42a9      	cmp	r1, r5
 800a690:	d903      	bls.n	800a69a <_malloc_r+0x22>
 800a692:	230c      	movs	r3, #12
 800a694:	6033      	str	r3, [r6, #0]
 800a696:	2000      	movs	r0, #0
 800a698:	bd70      	pop	{r4, r5, r6, pc}
 800a69a:	f001 fb32 	bl	800bd02 <__malloc_lock>
 800a69e:	4a21      	ldr	r2, [pc, #132]	; (800a724 <_malloc_r+0xac>)
 800a6a0:	6814      	ldr	r4, [r2, #0]
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	b991      	cbnz	r1, 800a6cc <_malloc_r+0x54>
 800a6a6:	4c20      	ldr	r4, [pc, #128]	; (800a728 <_malloc_r+0xb0>)
 800a6a8:	6823      	ldr	r3, [r4, #0]
 800a6aa:	b91b      	cbnz	r3, 800a6b4 <_malloc_r+0x3c>
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	f000 fc99 	bl	800afe4 <_sbrk_r>
 800a6b2:	6020      	str	r0, [r4, #0]
 800a6b4:	4629      	mov	r1, r5
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	f000 fc94 	bl	800afe4 <_sbrk_r>
 800a6bc:	1c43      	adds	r3, r0, #1
 800a6be:	d124      	bne.n	800a70a <_malloc_r+0x92>
 800a6c0:	230c      	movs	r3, #12
 800a6c2:	6033      	str	r3, [r6, #0]
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	f001 fb1d 	bl	800bd04 <__malloc_unlock>
 800a6ca:	e7e4      	b.n	800a696 <_malloc_r+0x1e>
 800a6cc:	680b      	ldr	r3, [r1, #0]
 800a6ce:	1b5b      	subs	r3, r3, r5
 800a6d0:	d418      	bmi.n	800a704 <_malloc_r+0x8c>
 800a6d2:	2b0b      	cmp	r3, #11
 800a6d4:	d90f      	bls.n	800a6f6 <_malloc_r+0x7e>
 800a6d6:	600b      	str	r3, [r1, #0]
 800a6d8:	50cd      	str	r5, [r1, r3]
 800a6da:	18cc      	adds	r4, r1, r3
 800a6dc:	4630      	mov	r0, r6
 800a6de:	f001 fb11 	bl	800bd04 <__malloc_unlock>
 800a6e2:	f104 000b 	add.w	r0, r4, #11
 800a6e6:	1d23      	adds	r3, r4, #4
 800a6e8:	f020 0007 	bic.w	r0, r0, #7
 800a6ec:	1ac3      	subs	r3, r0, r3
 800a6ee:	d0d3      	beq.n	800a698 <_malloc_r+0x20>
 800a6f0:	425a      	negs	r2, r3
 800a6f2:	50e2      	str	r2, [r4, r3]
 800a6f4:	e7d0      	b.n	800a698 <_malloc_r+0x20>
 800a6f6:	428c      	cmp	r4, r1
 800a6f8:	684b      	ldr	r3, [r1, #4]
 800a6fa:	bf16      	itet	ne
 800a6fc:	6063      	strne	r3, [r4, #4]
 800a6fe:	6013      	streq	r3, [r2, #0]
 800a700:	460c      	movne	r4, r1
 800a702:	e7eb      	b.n	800a6dc <_malloc_r+0x64>
 800a704:	460c      	mov	r4, r1
 800a706:	6849      	ldr	r1, [r1, #4]
 800a708:	e7cc      	b.n	800a6a4 <_malloc_r+0x2c>
 800a70a:	1cc4      	adds	r4, r0, #3
 800a70c:	f024 0403 	bic.w	r4, r4, #3
 800a710:	42a0      	cmp	r0, r4
 800a712:	d005      	beq.n	800a720 <_malloc_r+0xa8>
 800a714:	1a21      	subs	r1, r4, r0
 800a716:	4630      	mov	r0, r6
 800a718:	f000 fc64 	bl	800afe4 <_sbrk_r>
 800a71c:	3001      	adds	r0, #1
 800a71e:	d0cf      	beq.n	800a6c0 <_malloc_r+0x48>
 800a720:	6025      	str	r5, [r4, #0]
 800a722:	e7db      	b.n	800a6dc <_malloc_r+0x64>
 800a724:	200003b4 	.word	0x200003b4
 800a728:	200003b8 	.word	0x200003b8

0800a72c <__cvt>:
 800a72c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a730:	ec55 4b10 	vmov	r4, r5, d0
 800a734:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a736:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a73a:	2d00      	cmp	r5, #0
 800a73c:	460e      	mov	r6, r1
 800a73e:	4691      	mov	r9, r2
 800a740:	4619      	mov	r1, r3
 800a742:	bfb8      	it	lt
 800a744:	4622      	movlt	r2, r4
 800a746:	462b      	mov	r3, r5
 800a748:	f027 0720 	bic.w	r7, r7, #32
 800a74c:	bfbb      	ittet	lt
 800a74e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a752:	461d      	movlt	r5, r3
 800a754:	2300      	movge	r3, #0
 800a756:	232d      	movlt	r3, #45	; 0x2d
 800a758:	bfb8      	it	lt
 800a75a:	4614      	movlt	r4, r2
 800a75c:	2f46      	cmp	r7, #70	; 0x46
 800a75e:	700b      	strb	r3, [r1, #0]
 800a760:	d004      	beq.n	800a76c <__cvt+0x40>
 800a762:	2f45      	cmp	r7, #69	; 0x45
 800a764:	d100      	bne.n	800a768 <__cvt+0x3c>
 800a766:	3601      	adds	r6, #1
 800a768:	2102      	movs	r1, #2
 800a76a:	e000      	b.n	800a76e <__cvt+0x42>
 800a76c:	2103      	movs	r1, #3
 800a76e:	ab03      	add	r3, sp, #12
 800a770:	9301      	str	r3, [sp, #4]
 800a772:	ab02      	add	r3, sp, #8
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	4632      	mov	r2, r6
 800a778:	4653      	mov	r3, sl
 800a77a:	ec45 4b10 	vmov	d0, r4, r5
 800a77e:	f000 fcef 	bl	800b160 <_dtoa_r>
 800a782:	2f47      	cmp	r7, #71	; 0x47
 800a784:	4680      	mov	r8, r0
 800a786:	d102      	bne.n	800a78e <__cvt+0x62>
 800a788:	f019 0f01 	tst.w	r9, #1
 800a78c:	d026      	beq.n	800a7dc <__cvt+0xb0>
 800a78e:	2f46      	cmp	r7, #70	; 0x46
 800a790:	eb08 0906 	add.w	r9, r8, r6
 800a794:	d111      	bne.n	800a7ba <__cvt+0x8e>
 800a796:	f898 3000 	ldrb.w	r3, [r8]
 800a79a:	2b30      	cmp	r3, #48	; 0x30
 800a79c:	d10a      	bne.n	800a7b4 <__cvt+0x88>
 800a79e:	2200      	movs	r2, #0
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	4629      	mov	r1, r5
 800a7a6:	f7f6 f98f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7aa:	b918      	cbnz	r0, 800a7b4 <__cvt+0x88>
 800a7ac:	f1c6 0601 	rsb	r6, r6, #1
 800a7b0:	f8ca 6000 	str.w	r6, [sl]
 800a7b4:	f8da 3000 	ldr.w	r3, [sl]
 800a7b8:	4499      	add	r9, r3
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2300      	movs	r3, #0
 800a7be:	4620      	mov	r0, r4
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	f7f6 f981 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7c6:	b938      	cbnz	r0, 800a7d8 <__cvt+0xac>
 800a7c8:	2230      	movs	r2, #48	; 0x30
 800a7ca:	9b03      	ldr	r3, [sp, #12]
 800a7cc:	454b      	cmp	r3, r9
 800a7ce:	d205      	bcs.n	800a7dc <__cvt+0xb0>
 800a7d0:	1c59      	adds	r1, r3, #1
 800a7d2:	9103      	str	r1, [sp, #12]
 800a7d4:	701a      	strb	r2, [r3, #0]
 800a7d6:	e7f8      	b.n	800a7ca <__cvt+0x9e>
 800a7d8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a7dc:	9b03      	ldr	r3, [sp, #12]
 800a7de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7e0:	eba3 0308 	sub.w	r3, r3, r8
 800a7e4:	4640      	mov	r0, r8
 800a7e6:	6013      	str	r3, [r2, #0]
 800a7e8:	b004      	add	sp, #16
 800a7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a7ee <__exponent>:
 800a7ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7f0:	2900      	cmp	r1, #0
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	bfba      	itte	lt
 800a7f6:	4249      	neglt	r1, r1
 800a7f8:	232d      	movlt	r3, #45	; 0x2d
 800a7fa:	232b      	movge	r3, #43	; 0x2b
 800a7fc:	2909      	cmp	r1, #9
 800a7fe:	f804 2b02 	strb.w	r2, [r4], #2
 800a802:	7043      	strb	r3, [r0, #1]
 800a804:	dd20      	ble.n	800a848 <__exponent+0x5a>
 800a806:	f10d 0307 	add.w	r3, sp, #7
 800a80a:	461f      	mov	r7, r3
 800a80c:	260a      	movs	r6, #10
 800a80e:	fb91 f5f6 	sdiv	r5, r1, r6
 800a812:	fb06 1115 	mls	r1, r6, r5, r1
 800a816:	3130      	adds	r1, #48	; 0x30
 800a818:	2d09      	cmp	r5, #9
 800a81a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a81e:	f103 32ff 	add.w	r2, r3, #4294967295
 800a822:	4629      	mov	r1, r5
 800a824:	dc09      	bgt.n	800a83a <__exponent+0x4c>
 800a826:	3130      	adds	r1, #48	; 0x30
 800a828:	3b02      	subs	r3, #2
 800a82a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a82e:	42bb      	cmp	r3, r7
 800a830:	4622      	mov	r2, r4
 800a832:	d304      	bcc.n	800a83e <__exponent+0x50>
 800a834:	1a10      	subs	r0, r2, r0
 800a836:	b003      	add	sp, #12
 800a838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a83a:	4613      	mov	r3, r2
 800a83c:	e7e7      	b.n	800a80e <__exponent+0x20>
 800a83e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a842:	f804 2b01 	strb.w	r2, [r4], #1
 800a846:	e7f2      	b.n	800a82e <__exponent+0x40>
 800a848:	2330      	movs	r3, #48	; 0x30
 800a84a:	4419      	add	r1, r3
 800a84c:	7083      	strb	r3, [r0, #2]
 800a84e:	1d02      	adds	r2, r0, #4
 800a850:	70c1      	strb	r1, [r0, #3]
 800a852:	e7ef      	b.n	800a834 <__exponent+0x46>

0800a854 <_printf_float>:
 800a854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a858:	b08d      	sub	sp, #52	; 0x34
 800a85a:	460c      	mov	r4, r1
 800a85c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a860:	4616      	mov	r6, r2
 800a862:	461f      	mov	r7, r3
 800a864:	4605      	mov	r5, r0
 800a866:	f001 fa33 	bl	800bcd0 <_localeconv_r>
 800a86a:	6803      	ldr	r3, [r0, #0]
 800a86c:	9304      	str	r3, [sp, #16]
 800a86e:	4618      	mov	r0, r3
 800a870:	f7f5 fcae 	bl	80001d0 <strlen>
 800a874:	2300      	movs	r3, #0
 800a876:	930a      	str	r3, [sp, #40]	; 0x28
 800a878:	f8d8 3000 	ldr.w	r3, [r8]
 800a87c:	9005      	str	r0, [sp, #20]
 800a87e:	3307      	adds	r3, #7
 800a880:	f023 0307 	bic.w	r3, r3, #7
 800a884:	f103 0208 	add.w	r2, r3, #8
 800a888:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a88c:	f8d4 b000 	ldr.w	fp, [r4]
 800a890:	f8c8 2000 	str.w	r2, [r8]
 800a894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a898:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a89c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a8a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a8a4:	9307      	str	r3, [sp, #28]
 800a8a6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ae:	4ba7      	ldr	r3, [pc, #668]	; (800ab4c <_printf_float+0x2f8>)
 800a8b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8b4:	f7f6 f93a 	bl	8000b2c <__aeabi_dcmpun>
 800a8b8:	bb70      	cbnz	r0, 800a918 <_printf_float+0xc4>
 800a8ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a8be:	4ba3      	ldr	r3, [pc, #652]	; (800ab4c <_printf_float+0x2f8>)
 800a8c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8c4:	f7f6 f914 	bl	8000af0 <__aeabi_dcmple>
 800a8c8:	bb30      	cbnz	r0, 800a918 <_printf_float+0xc4>
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	4640      	mov	r0, r8
 800a8d0:	4649      	mov	r1, r9
 800a8d2:	f7f6 f903 	bl	8000adc <__aeabi_dcmplt>
 800a8d6:	b110      	cbz	r0, 800a8de <_printf_float+0x8a>
 800a8d8:	232d      	movs	r3, #45	; 0x2d
 800a8da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8de:	4a9c      	ldr	r2, [pc, #624]	; (800ab50 <_printf_float+0x2fc>)
 800a8e0:	4b9c      	ldr	r3, [pc, #624]	; (800ab54 <_printf_float+0x300>)
 800a8e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a8e6:	bf8c      	ite	hi
 800a8e8:	4690      	movhi	r8, r2
 800a8ea:	4698      	movls	r8, r3
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	f02b 0204 	bic.w	r2, fp, #4
 800a8f2:	6123      	str	r3, [r4, #16]
 800a8f4:	6022      	str	r2, [r4, #0]
 800a8f6:	f04f 0900 	mov.w	r9, #0
 800a8fa:	9700      	str	r7, [sp, #0]
 800a8fc:	4633      	mov	r3, r6
 800a8fe:	aa0b      	add	r2, sp, #44	; 0x2c
 800a900:	4621      	mov	r1, r4
 800a902:	4628      	mov	r0, r5
 800a904:	f000 f9e6 	bl	800acd4 <_printf_common>
 800a908:	3001      	adds	r0, #1
 800a90a:	f040 808d 	bne.w	800aa28 <_printf_float+0x1d4>
 800a90e:	f04f 30ff 	mov.w	r0, #4294967295
 800a912:	b00d      	add	sp, #52	; 0x34
 800a914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a918:	4642      	mov	r2, r8
 800a91a:	464b      	mov	r3, r9
 800a91c:	4640      	mov	r0, r8
 800a91e:	4649      	mov	r1, r9
 800a920:	f7f6 f904 	bl	8000b2c <__aeabi_dcmpun>
 800a924:	b110      	cbz	r0, 800a92c <_printf_float+0xd8>
 800a926:	4a8c      	ldr	r2, [pc, #560]	; (800ab58 <_printf_float+0x304>)
 800a928:	4b8c      	ldr	r3, [pc, #560]	; (800ab5c <_printf_float+0x308>)
 800a92a:	e7da      	b.n	800a8e2 <_printf_float+0x8e>
 800a92c:	6861      	ldr	r1, [r4, #4]
 800a92e:	1c4b      	adds	r3, r1, #1
 800a930:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a934:	a80a      	add	r0, sp, #40	; 0x28
 800a936:	d13e      	bne.n	800a9b6 <_printf_float+0x162>
 800a938:	2306      	movs	r3, #6
 800a93a:	6063      	str	r3, [r4, #4]
 800a93c:	2300      	movs	r3, #0
 800a93e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a942:	ab09      	add	r3, sp, #36	; 0x24
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	ec49 8b10 	vmov	d0, r8, r9
 800a94a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a94e:	6022      	str	r2, [r4, #0]
 800a950:	f8cd a004 	str.w	sl, [sp, #4]
 800a954:	6861      	ldr	r1, [r4, #4]
 800a956:	4628      	mov	r0, r5
 800a958:	f7ff fee8 	bl	800a72c <__cvt>
 800a95c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a960:	2b47      	cmp	r3, #71	; 0x47
 800a962:	4680      	mov	r8, r0
 800a964:	d109      	bne.n	800a97a <_printf_float+0x126>
 800a966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a968:	1cd8      	adds	r0, r3, #3
 800a96a:	db02      	blt.n	800a972 <_printf_float+0x11e>
 800a96c:	6862      	ldr	r2, [r4, #4]
 800a96e:	4293      	cmp	r3, r2
 800a970:	dd47      	ble.n	800aa02 <_printf_float+0x1ae>
 800a972:	f1aa 0a02 	sub.w	sl, sl, #2
 800a976:	fa5f fa8a 	uxtb.w	sl, sl
 800a97a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a97e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a980:	d824      	bhi.n	800a9cc <_printf_float+0x178>
 800a982:	3901      	subs	r1, #1
 800a984:	4652      	mov	r2, sl
 800a986:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a98a:	9109      	str	r1, [sp, #36]	; 0x24
 800a98c:	f7ff ff2f 	bl	800a7ee <__exponent>
 800a990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a992:	1813      	adds	r3, r2, r0
 800a994:	2a01      	cmp	r2, #1
 800a996:	4681      	mov	r9, r0
 800a998:	6123      	str	r3, [r4, #16]
 800a99a:	dc02      	bgt.n	800a9a2 <_printf_float+0x14e>
 800a99c:	6822      	ldr	r2, [r4, #0]
 800a99e:	07d1      	lsls	r1, r2, #31
 800a9a0:	d501      	bpl.n	800a9a6 <_printf_float+0x152>
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	6123      	str	r3, [r4, #16]
 800a9a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d0a5      	beq.n	800a8fa <_printf_float+0xa6>
 800a9ae:	232d      	movs	r3, #45	; 0x2d
 800a9b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9b4:	e7a1      	b.n	800a8fa <_printf_float+0xa6>
 800a9b6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a9ba:	f000 8177 	beq.w	800acac <_printf_float+0x458>
 800a9be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a9c2:	d1bb      	bne.n	800a93c <_printf_float+0xe8>
 800a9c4:	2900      	cmp	r1, #0
 800a9c6:	d1b9      	bne.n	800a93c <_printf_float+0xe8>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e7b6      	b.n	800a93a <_printf_float+0xe6>
 800a9cc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a9d0:	d119      	bne.n	800aa06 <_printf_float+0x1b2>
 800a9d2:	2900      	cmp	r1, #0
 800a9d4:	6863      	ldr	r3, [r4, #4]
 800a9d6:	dd0c      	ble.n	800a9f2 <_printf_float+0x19e>
 800a9d8:	6121      	str	r1, [r4, #16]
 800a9da:	b913      	cbnz	r3, 800a9e2 <_printf_float+0x18e>
 800a9dc:	6822      	ldr	r2, [r4, #0]
 800a9de:	07d2      	lsls	r2, r2, #31
 800a9e0:	d502      	bpl.n	800a9e8 <_printf_float+0x194>
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	440b      	add	r3, r1
 800a9e6:	6123      	str	r3, [r4, #16]
 800a9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9ea:	65a3      	str	r3, [r4, #88]	; 0x58
 800a9ec:	f04f 0900 	mov.w	r9, #0
 800a9f0:	e7d9      	b.n	800a9a6 <_printf_float+0x152>
 800a9f2:	b913      	cbnz	r3, 800a9fa <_printf_float+0x1a6>
 800a9f4:	6822      	ldr	r2, [r4, #0]
 800a9f6:	07d0      	lsls	r0, r2, #31
 800a9f8:	d501      	bpl.n	800a9fe <_printf_float+0x1aa>
 800a9fa:	3302      	adds	r3, #2
 800a9fc:	e7f3      	b.n	800a9e6 <_printf_float+0x192>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e7f1      	b.n	800a9e6 <_printf_float+0x192>
 800aa02:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800aa06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	db05      	blt.n	800aa1a <_printf_float+0x1c6>
 800aa0e:	6822      	ldr	r2, [r4, #0]
 800aa10:	6123      	str	r3, [r4, #16]
 800aa12:	07d1      	lsls	r1, r2, #31
 800aa14:	d5e8      	bpl.n	800a9e8 <_printf_float+0x194>
 800aa16:	3301      	adds	r3, #1
 800aa18:	e7e5      	b.n	800a9e6 <_printf_float+0x192>
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	bfd4      	ite	le
 800aa1e:	f1c3 0302 	rsble	r3, r3, #2
 800aa22:	2301      	movgt	r3, #1
 800aa24:	4413      	add	r3, r2
 800aa26:	e7de      	b.n	800a9e6 <_printf_float+0x192>
 800aa28:	6823      	ldr	r3, [r4, #0]
 800aa2a:	055a      	lsls	r2, r3, #21
 800aa2c:	d407      	bmi.n	800aa3e <_printf_float+0x1ea>
 800aa2e:	6923      	ldr	r3, [r4, #16]
 800aa30:	4642      	mov	r2, r8
 800aa32:	4631      	mov	r1, r6
 800aa34:	4628      	mov	r0, r5
 800aa36:	47b8      	blx	r7
 800aa38:	3001      	adds	r0, #1
 800aa3a:	d12b      	bne.n	800aa94 <_printf_float+0x240>
 800aa3c:	e767      	b.n	800a90e <_printf_float+0xba>
 800aa3e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800aa42:	f240 80dc 	bls.w	800abfe <_printf_float+0x3aa>
 800aa46:	2200      	movs	r2, #0
 800aa48:	2300      	movs	r3, #0
 800aa4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa4e:	f7f6 f83b 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa52:	2800      	cmp	r0, #0
 800aa54:	d033      	beq.n	800aabe <_printf_float+0x26a>
 800aa56:	2301      	movs	r3, #1
 800aa58:	4a41      	ldr	r2, [pc, #260]	; (800ab60 <_printf_float+0x30c>)
 800aa5a:	4631      	mov	r1, r6
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	47b8      	blx	r7
 800aa60:	3001      	adds	r0, #1
 800aa62:	f43f af54 	beq.w	800a90e <_printf_float+0xba>
 800aa66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	db02      	blt.n	800aa74 <_printf_float+0x220>
 800aa6e:	6823      	ldr	r3, [r4, #0]
 800aa70:	07d8      	lsls	r0, r3, #31
 800aa72:	d50f      	bpl.n	800aa94 <_printf_float+0x240>
 800aa74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa78:	4631      	mov	r1, r6
 800aa7a:	4628      	mov	r0, r5
 800aa7c:	47b8      	blx	r7
 800aa7e:	3001      	adds	r0, #1
 800aa80:	f43f af45 	beq.w	800a90e <_printf_float+0xba>
 800aa84:	f04f 0800 	mov.w	r8, #0
 800aa88:	f104 091a 	add.w	r9, r4, #26
 800aa8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	4543      	cmp	r3, r8
 800aa92:	dc09      	bgt.n	800aaa8 <_printf_float+0x254>
 800aa94:	6823      	ldr	r3, [r4, #0]
 800aa96:	079b      	lsls	r3, r3, #30
 800aa98:	f100 8103 	bmi.w	800aca2 <_printf_float+0x44e>
 800aa9c:	68e0      	ldr	r0, [r4, #12]
 800aa9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaa0:	4298      	cmp	r0, r3
 800aaa2:	bfb8      	it	lt
 800aaa4:	4618      	movlt	r0, r3
 800aaa6:	e734      	b.n	800a912 <_printf_float+0xbe>
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	464a      	mov	r2, r9
 800aaac:	4631      	mov	r1, r6
 800aaae:	4628      	mov	r0, r5
 800aab0:	47b8      	blx	r7
 800aab2:	3001      	adds	r0, #1
 800aab4:	f43f af2b 	beq.w	800a90e <_printf_float+0xba>
 800aab8:	f108 0801 	add.w	r8, r8, #1
 800aabc:	e7e6      	b.n	800aa8c <_printf_float+0x238>
 800aabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	dc2b      	bgt.n	800ab1c <_printf_float+0x2c8>
 800aac4:	2301      	movs	r3, #1
 800aac6:	4a26      	ldr	r2, [pc, #152]	; (800ab60 <_printf_float+0x30c>)
 800aac8:	4631      	mov	r1, r6
 800aaca:	4628      	mov	r0, r5
 800aacc:	47b8      	blx	r7
 800aace:	3001      	adds	r0, #1
 800aad0:	f43f af1d 	beq.w	800a90e <_printf_float+0xba>
 800aad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aad6:	b923      	cbnz	r3, 800aae2 <_printf_float+0x28e>
 800aad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aada:	b913      	cbnz	r3, 800aae2 <_printf_float+0x28e>
 800aadc:	6823      	ldr	r3, [r4, #0]
 800aade:	07d9      	lsls	r1, r3, #31
 800aae0:	d5d8      	bpl.n	800aa94 <_printf_float+0x240>
 800aae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aae6:	4631      	mov	r1, r6
 800aae8:	4628      	mov	r0, r5
 800aaea:	47b8      	blx	r7
 800aaec:	3001      	adds	r0, #1
 800aaee:	f43f af0e 	beq.w	800a90e <_printf_float+0xba>
 800aaf2:	f04f 0900 	mov.w	r9, #0
 800aaf6:	f104 0a1a 	add.w	sl, r4, #26
 800aafa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aafc:	425b      	negs	r3, r3
 800aafe:	454b      	cmp	r3, r9
 800ab00:	dc01      	bgt.n	800ab06 <_printf_float+0x2b2>
 800ab02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab04:	e794      	b.n	800aa30 <_printf_float+0x1dc>
 800ab06:	2301      	movs	r3, #1
 800ab08:	4652      	mov	r2, sl
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	47b8      	blx	r7
 800ab10:	3001      	adds	r0, #1
 800ab12:	f43f aefc 	beq.w	800a90e <_printf_float+0xba>
 800ab16:	f109 0901 	add.w	r9, r9, #1
 800ab1a:	e7ee      	b.n	800aafa <_printf_float+0x2a6>
 800ab1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab20:	429a      	cmp	r2, r3
 800ab22:	bfa8      	it	ge
 800ab24:	461a      	movge	r2, r3
 800ab26:	2a00      	cmp	r2, #0
 800ab28:	4691      	mov	r9, r2
 800ab2a:	dd07      	ble.n	800ab3c <_printf_float+0x2e8>
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	4631      	mov	r1, r6
 800ab30:	4642      	mov	r2, r8
 800ab32:	4628      	mov	r0, r5
 800ab34:	47b8      	blx	r7
 800ab36:	3001      	adds	r0, #1
 800ab38:	f43f aee9 	beq.w	800a90e <_printf_float+0xba>
 800ab3c:	f104 031a 	add.w	r3, r4, #26
 800ab40:	f04f 0b00 	mov.w	fp, #0
 800ab44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab48:	9306      	str	r3, [sp, #24]
 800ab4a:	e015      	b.n	800ab78 <_printf_float+0x324>
 800ab4c:	7fefffff 	.word	0x7fefffff
 800ab50:	0800c6d0 	.word	0x0800c6d0
 800ab54:	0800c6cc 	.word	0x0800c6cc
 800ab58:	0800c6d8 	.word	0x0800c6d8
 800ab5c:	0800c6d4 	.word	0x0800c6d4
 800ab60:	0800c6dc 	.word	0x0800c6dc
 800ab64:	2301      	movs	r3, #1
 800ab66:	9a06      	ldr	r2, [sp, #24]
 800ab68:	4631      	mov	r1, r6
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	47b8      	blx	r7
 800ab6e:	3001      	adds	r0, #1
 800ab70:	f43f aecd 	beq.w	800a90e <_printf_float+0xba>
 800ab74:	f10b 0b01 	add.w	fp, fp, #1
 800ab78:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ab7c:	ebaa 0309 	sub.w	r3, sl, r9
 800ab80:	455b      	cmp	r3, fp
 800ab82:	dcef      	bgt.n	800ab64 <_printf_float+0x310>
 800ab84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	44d0      	add	r8, sl
 800ab8c:	db15      	blt.n	800abba <_printf_float+0x366>
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	07da      	lsls	r2, r3, #31
 800ab92:	d412      	bmi.n	800abba <_printf_float+0x366>
 800ab94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab96:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab98:	eba3 020a 	sub.w	r2, r3, sl
 800ab9c:	eba3 0a01 	sub.w	sl, r3, r1
 800aba0:	4592      	cmp	sl, r2
 800aba2:	bfa8      	it	ge
 800aba4:	4692      	movge	sl, r2
 800aba6:	f1ba 0f00 	cmp.w	sl, #0
 800abaa:	dc0e      	bgt.n	800abca <_printf_float+0x376>
 800abac:	f04f 0800 	mov.w	r8, #0
 800abb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abb4:	f104 091a 	add.w	r9, r4, #26
 800abb8:	e019      	b.n	800abee <_printf_float+0x39a>
 800abba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abbe:	4631      	mov	r1, r6
 800abc0:	4628      	mov	r0, r5
 800abc2:	47b8      	blx	r7
 800abc4:	3001      	adds	r0, #1
 800abc6:	d1e5      	bne.n	800ab94 <_printf_float+0x340>
 800abc8:	e6a1      	b.n	800a90e <_printf_float+0xba>
 800abca:	4653      	mov	r3, sl
 800abcc:	4642      	mov	r2, r8
 800abce:	4631      	mov	r1, r6
 800abd0:	4628      	mov	r0, r5
 800abd2:	47b8      	blx	r7
 800abd4:	3001      	adds	r0, #1
 800abd6:	d1e9      	bne.n	800abac <_printf_float+0x358>
 800abd8:	e699      	b.n	800a90e <_printf_float+0xba>
 800abda:	2301      	movs	r3, #1
 800abdc:	464a      	mov	r2, r9
 800abde:	4631      	mov	r1, r6
 800abe0:	4628      	mov	r0, r5
 800abe2:	47b8      	blx	r7
 800abe4:	3001      	adds	r0, #1
 800abe6:	f43f ae92 	beq.w	800a90e <_printf_float+0xba>
 800abea:	f108 0801 	add.w	r8, r8, #1
 800abee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abf2:	1a9b      	subs	r3, r3, r2
 800abf4:	eba3 030a 	sub.w	r3, r3, sl
 800abf8:	4543      	cmp	r3, r8
 800abfa:	dcee      	bgt.n	800abda <_printf_float+0x386>
 800abfc:	e74a      	b.n	800aa94 <_printf_float+0x240>
 800abfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac00:	2a01      	cmp	r2, #1
 800ac02:	dc01      	bgt.n	800ac08 <_printf_float+0x3b4>
 800ac04:	07db      	lsls	r3, r3, #31
 800ac06:	d53a      	bpl.n	800ac7e <_printf_float+0x42a>
 800ac08:	2301      	movs	r3, #1
 800ac0a:	4642      	mov	r2, r8
 800ac0c:	4631      	mov	r1, r6
 800ac0e:	4628      	mov	r0, r5
 800ac10:	47b8      	blx	r7
 800ac12:	3001      	adds	r0, #1
 800ac14:	f43f ae7b 	beq.w	800a90e <_printf_float+0xba>
 800ac18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac1c:	4631      	mov	r1, r6
 800ac1e:	4628      	mov	r0, r5
 800ac20:	47b8      	blx	r7
 800ac22:	3001      	adds	r0, #1
 800ac24:	f108 0801 	add.w	r8, r8, #1
 800ac28:	f43f ae71 	beq.w	800a90e <_printf_float+0xba>
 800ac2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f103 3aff 	add.w	sl, r3, #4294967295
 800ac34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac38:	2300      	movs	r3, #0
 800ac3a:	f7f5 ff45 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac3e:	b9c8      	cbnz	r0, 800ac74 <_printf_float+0x420>
 800ac40:	4653      	mov	r3, sl
 800ac42:	4642      	mov	r2, r8
 800ac44:	4631      	mov	r1, r6
 800ac46:	4628      	mov	r0, r5
 800ac48:	47b8      	blx	r7
 800ac4a:	3001      	adds	r0, #1
 800ac4c:	d10e      	bne.n	800ac6c <_printf_float+0x418>
 800ac4e:	e65e      	b.n	800a90e <_printf_float+0xba>
 800ac50:	2301      	movs	r3, #1
 800ac52:	4652      	mov	r2, sl
 800ac54:	4631      	mov	r1, r6
 800ac56:	4628      	mov	r0, r5
 800ac58:	47b8      	blx	r7
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	f43f ae57 	beq.w	800a90e <_printf_float+0xba>
 800ac60:	f108 0801 	add.w	r8, r8, #1
 800ac64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac66:	3b01      	subs	r3, #1
 800ac68:	4543      	cmp	r3, r8
 800ac6a:	dcf1      	bgt.n	800ac50 <_printf_float+0x3fc>
 800ac6c:	464b      	mov	r3, r9
 800ac6e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac72:	e6de      	b.n	800aa32 <_printf_float+0x1de>
 800ac74:	f04f 0800 	mov.w	r8, #0
 800ac78:	f104 0a1a 	add.w	sl, r4, #26
 800ac7c:	e7f2      	b.n	800ac64 <_printf_float+0x410>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e7df      	b.n	800ac42 <_printf_float+0x3ee>
 800ac82:	2301      	movs	r3, #1
 800ac84:	464a      	mov	r2, r9
 800ac86:	4631      	mov	r1, r6
 800ac88:	4628      	mov	r0, r5
 800ac8a:	47b8      	blx	r7
 800ac8c:	3001      	adds	r0, #1
 800ac8e:	f43f ae3e 	beq.w	800a90e <_printf_float+0xba>
 800ac92:	f108 0801 	add.w	r8, r8, #1
 800ac96:	68e3      	ldr	r3, [r4, #12]
 800ac98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac9a:	1a9b      	subs	r3, r3, r2
 800ac9c:	4543      	cmp	r3, r8
 800ac9e:	dcf0      	bgt.n	800ac82 <_printf_float+0x42e>
 800aca0:	e6fc      	b.n	800aa9c <_printf_float+0x248>
 800aca2:	f04f 0800 	mov.w	r8, #0
 800aca6:	f104 0919 	add.w	r9, r4, #25
 800acaa:	e7f4      	b.n	800ac96 <_printf_float+0x442>
 800acac:	2900      	cmp	r1, #0
 800acae:	f43f ae8b 	beq.w	800a9c8 <_printf_float+0x174>
 800acb2:	2300      	movs	r3, #0
 800acb4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800acb8:	ab09      	add	r3, sp, #36	; 0x24
 800acba:	9300      	str	r3, [sp, #0]
 800acbc:	ec49 8b10 	vmov	d0, r8, r9
 800acc0:	6022      	str	r2, [r4, #0]
 800acc2:	f8cd a004 	str.w	sl, [sp, #4]
 800acc6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800acca:	4628      	mov	r0, r5
 800accc:	f7ff fd2e 	bl	800a72c <__cvt>
 800acd0:	4680      	mov	r8, r0
 800acd2:	e648      	b.n	800a966 <_printf_float+0x112>

0800acd4 <_printf_common>:
 800acd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd8:	4691      	mov	r9, r2
 800acda:	461f      	mov	r7, r3
 800acdc:	688a      	ldr	r2, [r1, #8]
 800acde:	690b      	ldr	r3, [r1, #16]
 800ace0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ace4:	4293      	cmp	r3, r2
 800ace6:	bfb8      	it	lt
 800ace8:	4613      	movlt	r3, r2
 800acea:	f8c9 3000 	str.w	r3, [r9]
 800acee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800acf2:	4606      	mov	r6, r0
 800acf4:	460c      	mov	r4, r1
 800acf6:	b112      	cbz	r2, 800acfe <_printf_common+0x2a>
 800acf8:	3301      	adds	r3, #1
 800acfa:	f8c9 3000 	str.w	r3, [r9]
 800acfe:	6823      	ldr	r3, [r4, #0]
 800ad00:	0699      	lsls	r1, r3, #26
 800ad02:	bf42      	ittt	mi
 800ad04:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ad08:	3302      	addmi	r3, #2
 800ad0a:	f8c9 3000 	strmi.w	r3, [r9]
 800ad0e:	6825      	ldr	r5, [r4, #0]
 800ad10:	f015 0506 	ands.w	r5, r5, #6
 800ad14:	d107      	bne.n	800ad26 <_printf_common+0x52>
 800ad16:	f104 0a19 	add.w	sl, r4, #25
 800ad1a:	68e3      	ldr	r3, [r4, #12]
 800ad1c:	f8d9 2000 	ldr.w	r2, [r9]
 800ad20:	1a9b      	subs	r3, r3, r2
 800ad22:	42ab      	cmp	r3, r5
 800ad24:	dc28      	bgt.n	800ad78 <_printf_common+0xa4>
 800ad26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ad2a:	6822      	ldr	r2, [r4, #0]
 800ad2c:	3300      	adds	r3, #0
 800ad2e:	bf18      	it	ne
 800ad30:	2301      	movne	r3, #1
 800ad32:	0692      	lsls	r2, r2, #26
 800ad34:	d42d      	bmi.n	800ad92 <_printf_common+0xbe>
 800ad36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad3a:	4639      	mov	r1, r7
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	47c0      	blx	r8
 800ad40:	3001      	adds	r0, #1
 800ad42:	d020      	beq.n	800ad86 <_printf_common+0xb2>
 800ad44:	6823      	ldr	r3, [r4, #0]
 800ad46:	68e5      	ldr	r5, [r4, #12]
 800ad48:	f8d9 2000 	ldr.w	r2, [r9]
 800ad4c:	f003 0306 	and.w	r3, r3, #6
 800ad50:	2b04      	cmp	r3, #4
 800ad52:	bf08      	it	eq
 800ad54:	1aad      	subeq	r5, r5, r2
 800ad56:	68a3      	ldr	r3, [r4, #8]
 800ad58:	6922      	ldr	r2, [r4, #16]
 800ad5a:	bf0c      	ite	eq
 800ad5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad60:	2500      	movne	r5, #0
 800ad62:	4293      	cmp	r3, r2
 800ad64:	bfc4      	itt	gt
 800ad66:	1a9b      	subgt	r3, r3, r2
 800ad68:	18ed      	addgt	r5, r5, r3
 800ad6a:	f04f 0900 	mov.w	r9, #0
 800ad6e:	341a      	adds	r4, #26
 800ad70:	454d      	cmp	r5, r9
 800ad72:	d11a      	bne.n	800adaa <_printf_common+0xd6>
 800ad74:	2000      	movs	r0, #0
 800ad76:	e008      	b.n	800ad8a <_printf_common+0xb6>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	4652      	mov	r2, sl
 800ad7c:	4639      	mov	r1, r7
 800ad7e:	4630      	mov	r0, r6
 800ad80:	47c0      	blx	r8
 800ad82:	3001      	adds	r0, #1
 800ad84:	d103      	bne.n	800ad8e <_printf_common+0xba>
 800ad86:	f04f 30ff 	mov.w	r0, #4294967295
 800ad8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad8e:	3501      	adds	r5, #1
 800ad90:	e7c3      	b.n	800ad1a <_printf_common+0x46>
 800ad92:	18e1      	adds	r1, r4, r3
 800ad94:	1c5a      	adds	r2, r3, #1
 800ad96:	2030      	movs	r0, #48	; 0x30
 800ad98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad9c:	4422      	add	r2, r4
 800ad9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ada2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ada6:	3302      	adds	r3, #2
 800ada8:	e7c5      	b.n	800ad36 <_printf_common+0x62>
 800adaa:	2301      	movs	r3, #1
 800adac:	4622      	mov	r2, r4
 800adae:	4639      	mov	r1, r7
 800adb0:	4630      	mov	r0, r6
 800adb2:	47c0      	blx	r8
 800adb4:	3001      	adds	r0, #1
 800adb6:	d0e6      	beq.n	800ad86 <_printf_common+0xb2>
 800adb8:	f109 0901 	add.w	r9, r9, #1
 800adbc:	e7d8      	b.n	800ad70 <_printf_common+0x9c>
	...

0800adc0 <_printf_i>:
 800adc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800adc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800adc8:	460c      	mov	r4, r1
 800adca:	7e09      	ldrb	r1, [r1, #24]
 800adcc:	b085      	sub	sp, #20
 800adce:	296e      	cmp	r1, #110	; 0x6e
 800add0:	4617      	mov	r7, r2
 800add2:	4606      	mov	r6, r0
 800add4:	4698      	mov	r8, r3
 800add6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800add8:	f000 80b3 	beq.w	800af42 <_printf_i+0x182>
 800addc:	d822      	bhi.n	800ae24 <_printf_i+0x64>
 800adde:	2963      	cmp	r1, #99	; 0x63
 800ade0:	d036      	beq.n	800ae50 <_printf_i+0x90>
 800ade2:	d80a      	bhi.n	800adfa <_printf_i+0x3a>
 800ade4:	2900      	cmp	r1, #0
 800ade6:	f000 80b9 	beq.w	800af5c <_printf_i+0x19c>
 800adea:	2958      	cmp	r1, #88	; 0x58
 800adec:	f000 8083 	beq.w	800aef6 <_printf_i+0x136>
 800adf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adf4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800adf8:	e032      	b.n	800ae60 <_printf_i+0xa0>
 800adfa:	2964      	cmp	r1, #100	; 0x64
 800adfc:	d001      	beq.n	800ae02 <_printf_i+0x42>
 800adfe:	2969      	cmp	r1, #105	; 0x69
 800ae00:	d1f6      	bne.n	800adf0 <_printf_i+0x30>
 800ae02:	6820      	ldr	r0, [r4, #0]
 800ae04:	6813      	ldr	r3, [r2, #0]
 800ae06:	0605      	lsls	r5, r0, #24
 800ae08:	f103 0104 	add.w	r1, r3, #4
 800ae0c:	d52a      	bpl.n	800ae64 <_printf_i+0xa4>
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	6011      	str	r1, [r2, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	da03      	bge.n	800ae1e <_printf_i+0x5e>
 800ae16:	222d      	movs	r2, #45	; 0x2d
 800ae18:	425b      	negs	r3, r3
 800ae1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ae1e:	486f      	ldr	r0, [pc, #444]	; (800afdc <_printf_i+0x21c>)
 800ae20:	220a      	movs	r2, #10
 800ae22:	e039      	b.n	800ae98 <_printf_i+0xd8>
 800ae24:	2973      	cmp	r1, #115	; 0x73
 800ae26:	f000 809d 	beq.w	800af64 <_printf_i+0x1a4>
 800ae2a:	d808      	bhi.n	800ae3e <_printf_i+0x7e>
 800ae2c:	296f      	cmp	r1, #111	; 0x6f
 800ae2e:	d020      	beq.n	800ae72 <_printf_i+0xb2>
 800ae30:	2970      	cmp	r1, #112	; 0x70
 800ae32:	d1dd      	bne.n	800adf0 <_printf_i+0x30>
 800ae34:	6823      	ldr	r3, [r4, #0]
 800ae36:	f043 0320 	orr.w	r3, r3, #32
 800ae3a:	6023      	str	r3, [r4, #0]
 800ae3c:	e003      	b.n	800ae46 <_printf_i+0x86>
 800ae3e:	2975      	cmp	r1, #117	; 0x75
 800ae40:	d017      	beq.n	800ae72 <_printf_i+0xb2>
 800ae42:	2978      	cmp	r1, #120	; 0x78
 800ae44:	d1d4      	bne.n	800adf0 <_printf_i+0x30>
 800ae46:	2378      	movs	r3, #120	; 0x78
 800ae48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae4c:	4864      	ldr	r0, [pc, #400]	; (800afe0 <_printf_i+0x220>)
 800ae4e:	e055      	b.n	800aefc <_printf_i+0x13c>
 800ae50:	6813      	ldr	r3, [r2, #0]
 800ae52:	1d19      	adds	r1, r3, #4
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6011      	str	r1, [r2, #0]
 800ae58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae60:	2301      	movs	r3, #1
 800ae62:	e08c      	b.n	800af7e <_printf_i+0x1be>
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	6011      	str	r1, [r2, #0]
 800ae68:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae6c:	bf18      	it	ne
 800ae6e:	b21b      	sxthne	r3, r3
 800ae70:	e7cf      	b.n	800ae12 <_printf_i+0x52>
 800ae72:	6813      	ldr	r3, [r2, #0]
 800ae74:	6825      	ldr	r5, [r4, #0]
 800ae76:	1d18      	adds	r0, r3, #4
 800ae78:	6010      	str	r0, [r2, #0]
 800ae7a:	0628      	lsls	r0, r5, #24
 800ae7c:	d501      	bpl.n	800ae82 <_printf_i+0xc2>
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	e002      	b.n	800ae88 <_printf_i+0xc8>
 800ae82:	0668      	lsls	r0, r5, #25
 800ae84:	d5fb      	bpl.n	800ae7e <_printf_i+0xbe>
 800ae86:	881b      	ldrh	r3, [r3, #0]
 800ae88:	4854      	ldr	r0, [pc, #336]	; (800afdc <_printf_i+0x21c>)
 800ae8a:	296f      	cmp	r1, #111	; 0x6f
 800ae8c:	bf14      	ite	ne
 800ae8e:	220a      	movne	r2, #10
 800ae90:	2208      	moveq	r2, #8
 800ae92:	2100      	movs	r1, #0
 800ae94:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae98:	6865      	ldr	r5, [r4, #4]
 800ae9a:	60a5      	str	r5, [r4, #8]
 800ae9c:	2d00      	cmp	r5, #0
 800ae9e:	f2c0 8095 	blt.w	800afcc <_printf_i+0x20c>
 800aea2:	6821      	ldr	r1, [r4, #0]
 800aea4:	f021 0104 	bic.w	r1, r1, #4
 800aea8:	6021      	str	r1, [r4, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d13d      	bne.n	800af2a <_printf_i+0x16a>
 800aeae:	2d00      	cmp	r5, #0
 800aeb0:	f040 808e 	bne.w	800afd0 <_printf_i+0x210>
 800aeb4:	4665      	mov	r5, ip
 800aeb6:	2a08      	cmp	r2, #8
 800aeb8:	d10b      	bne.n	800aed2 <_printf_i+0x112>
 800aeba:	6823      	ldr	r3, [r4, #0]
 800aebc:	07db      	lsls	r3, r3, #31
 800aebe:	d508      	bpl.n	800aed2 <_printf_i+0x112>
 800aec0:	6923      	ldr	r3, [r4, #16]
 800aec2:	6862      	ldr	r2, [r4, #4]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	bfde      	ittt	le
 800aec8:	2330      	movle	r3, #48	; 0x30
 800aeca:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aece:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aed2:	ebac 0305 	sub.w	r3, ip, r5
 800aed6:	6123      	str	r3, [r4, #16]
 800aed8:	f8cd 8000 	str.w	r8, [sp]
 800aedc:	463b      	mov	r3, r7
 800aede:	aa03      	add	r2, sp, #12
 800aee0:	4621      	mov	r1, r4
 800aee2:	4630      	mov	r0, r6
 800aee4:	f7ff fef6 	bl	800acd4 <_printf_common>
 800aee8:	3001      	adds	r0, #1
 800aeea:	d14d      	bne.n	800af88 <_printf_i+0x1c8>
 800aeec:	f04f 30ff 	mov.w	r0, #4294967295
 800aef0:	b005      	add	sp, #20
 800aef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aef6:	4839      	ldr	r0, [pc, #228]	; (800afdc <_printf_i+0x21c>)
 800aef8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800aefc:	6813      	ldr	r3, [r2, #0]
 800aefe:	6821      	ldr	r1, [r4, #0]
 800af00:	1d1d      	adds	r5, r3, #4
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	6015      	str	r5, [r2, #0]
 800af06:	060a      	lsls	r2, r1, #24
 800af08:	d50b      	bpl.n	800af22 <_printf_i+0x162>
 800af0a:	07ca      	lsls	r2, r1, #31
 800af0c:	bf44      	itt	mi
 800af0e:	f041 0120 	orrmi.w	r1, r1, #32
 800af12:	6021      	strmi	r1, [r4, #0]
 800af14:	b91b      	cbnz	r3, 800af1e <_printf_i+0x15e>
 800af16:	6822      	ldr	r2, [r4, #0]
 800af18:	f022 0220 	bic.w	r2, r2, #32
 800af1c:	6022      	str	r2, [r4, #0]
 800af1e:	2210      	movs	r2, #16
 800af20:	e7b7      	b.n	800ae92 <_printf_i+0xd2>
 800af22:	064d      	lsls	r5, r1, #25
 800af24:	bf48      	it	mi
 800af26:	b29b      	uxthmi	r3, r3
 800af28:	e7ef      	b.n	800af0a <_printf_i+0x14a>
 800af2a:	4665      	mov	r5, ip
 800af2c:	fbb3 f1f2 	udiv	r1, r3, r2
 800af30:	fb02 3311 	mls	r3, r2, r1, r3
 800af34:	5cc3      	ldrb	r3, [r0, r3]
 800af36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800af3a:	460b      	mov	r3, r1
 800af3c:	2900      	cmp	r1, #0
 800af3e:	d1f5      	bne.n	800af2c <_printf_i+0x16c>
 800af40:	e7b9      	b.n	800aeb6 <_printf_i+0xf6>
 800af42:	6813      	ldr	r3, [r2, #0]
 800af44:	6825      	ldr	r5, [r4, #0]
 800af46:	6961      	ldr	r1, [r4, #20]
 800af48:	1d18      	adds	r0, r3, #4
 800af4a:	6010      	str	r0, [r2, #0]
 800af4c:	0628      	lsls	r0, r5, #24
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	d501      	bpl.n	800af56 <_printf_i+0x196>
 800af52:	6019      	str	r1, [r3, #0]
 800af54:	e002      	b.n	800af5c <_printf_i+0x19c>
 800af56:	066a      	lsls	r2, r5, #25
 800af58:	d5fb      	bpl.n	800af52 <_printf_i+0x192>
 800af5a:	8019      	strh	r1, [r3, #0]
 800af5c:	2300      	movs	r3, #0
 800af5e:	6123      	str	r3, [r4, #16]
 800af60:	4665      	mov	r5, ip
 800af62:	e7b9      	b.n	800aed8 <_printf_i+0x118>
 800af64:	6813      	ldr	r3, [r2, #0]
 800af66:	1d19      	adds	r1, r3, #4
 800af68:	6011      	str	r1, [r2, #0]
 800af6a:	681d      	ldr	r5, [r3, #0]
 800af6c:	6862      	ldr	r2, [r4, #4]
 800af6e:	2100      	movs	r1, #0
 800af70:	4628      	mov	r0, r5
 800af72:	f7f5 f935 	bl	80001e0 <memchr>
 800af76:	b108      	cbz	r0, 800af7c <_printf_i+0x1bc>
 800af78:	1b40      	subs	r0, r0, r5
 800af7a:	6060      	str	r0, [r4, #4]
 800af7c:	6863      	ldr	r3, [r4, #4]
 800af7e:	6123      	str	r3, [r4, #16]
 800af80:	2300      	movs	r3, #0
 800af82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af86:	e7a7      	b.n	800aed8 <_printf_i+0x118>
 800af88:	6923      	ldr	r3, [r4, #16]
 800af8a:	462a      	mov	r2, r5
 800af8c:	4639      	mov	r1, r7
 800af8e:	4630      	mov	r0, r6
 800af90:	47c0      	blx	r8
 800af92:	3001      	adds	r0, #1
 800af94:	d0aa      	beq.n	800aeec <_printf_i+0x12c>
 800af96:	6823      	ldr	r3, [r4, #0]
 800af98:	079b      	lsls	r3, r3, #30
 800af9a:	d413      	bmi.n	800afc4 <_printf_i+0x204>
 800af9c:	68e0      	ldr	r0, [r4, #12]
 800af9e:	9b03      	ldr	r3, [sp, #12]
 800afa0:	4298      	cmp	r0, r3
 800afa2:	bfb8      	it	lt
 800afa4:	4618      	movlt	r0, r3
 800afa6:	e7a3      	b.n	800aef0 <_printf_i+0x130>
 800afa8:	2301      	movs	r3, #1
 800afaa:	464a      	mov	r2, r9
 800afac:	4639      	mov	r1, r7
 800afae:	4630      	mov	r0, r6
 800afb0:	47c0      	blx	r8
 800afb2:	3001      	adds	r0, #1
 800afb4:	d09a      	beq.n	800aeec <_printf_i+0x12c>
 800afb6:	3501      	adds	r5, #1
 800afb8:	68e3      	ldr	r3, [r4, #12]
 800afba:	9a03      	ldr	r2, [sp, #12]
 800afbc:	1a9b      	subs	r3, r3, r2
 800afbe:	42ab      	cmp	r3, r5
 800afc0:	dcf2      	bgt.n	800afa8 <_printf_i+0x1e8>
 800afc2:	e7eb      	b.n	800af9c <_printf_i+0x1dc>
 800afc4:	2500      	movs	r5, #0
 800afc6:	f104 0919 	add.w	r9, r4, #25
 800afca:	e7f5      	b.n	800afb8 <_printf_i+0x1f8>
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d1ac      	bne.n	800af2a <_printf_i+0x16a>
 800afd0:	7803      	ldrb	r3, [r0, #0]
 800afd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afda:	e76c      	b.n	800aeb6 <_printf_i+0xf6>
 800afdc:	0800c6de 	.word	0x0800c6de
 800afe0:	0800c6ef 	.word	0x0800c6ef

0800afe4 <_sbrk_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	4c06      	ldr	r4, [pc, #24]	; (800b000 <_sbrk_r+0x1c>)
 800afe8:	2300      	movs	r3, #0
 800afea:	4605      	mov	r5, r0
 800afec:	4608      	mov	r0, r1
 800afee:	6023      	str	r3, [r4, #0]
 800aff0:	f7f7 fc3e 	bl	8002870 <_sbrk>
 800aff4:	1c43      	adds	r3, r0, #1
 800aff6:	d102      	bne.n	800affe <_sbrk_r+0x1a>
 800aff8:	6823      	ldr	r3, [r4, #0]
 800affa:	b103      	cbz	r3, 800affe <_sbrk_r+0x1a>
 800affc:	602b      	str	r3, [r5, #0]
 800affe:	bd38      	pop	{r3, r4, r5, pc}
 800b000:	20002014 	.word	0x20002014

0800b004 <siprintf>:
 800b004:	b40e      	push	{r1, r2, r3}
 800b006:	b500      	push	{lr}
 800b008:	b09c      	sub	sp, #112	; 0x70
 800b00a:	ab1d      	add	r3, sp, #116	; 0x74
 800b00c:	9002      	str	r0, [sp, #8]
 800b00e:	9006      	str	r0, [sp, #24]
 800b010:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b014:	4809      	ldr	r0, [pc, #36]	; (800b03c <siprintf+0x38>)
 800b016:	9107      	str	r1, [sp, #28]
 800b018:	9104      	str	r1, [sp, #16]
 800b01a:	4909      	ldr	r1, [pc, #36]	; (800b040 <siprintf+0x3c>)
 800b01c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b020:	9105      	str	r1, [sp, #20]
 800b022:	6800      	ldr	r0, [r0, #0]
 800b024:	9301      	str	r3, [sp, #4]
 800b026:	a902      	add	r1, sp, #8
 800b028:	f001 f9b0 	bl	800c38c <_svfiprintf_r>
 800b02c:	9b02      	ldr	r3, [sp, #8]
 800b02e:	2200      	movs	r2, #0
 800b030:	701a      	strb	r2, [r3, #0]
 800b032:	b01c      	add	sp, #112	; 0x70
 800b034:	f85d eb04 	ldr.w	lr, [sp], #4
 800b038:	b003      	add	sp, #12
 800b03a:	4770      	bx	lr
 800b03c:	200001c0 	.word	0x200001c0
 800b040:	ffff0208 	.word	0xffff0208

0800b044 <quorem>:
 800b044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b048:	6903      	ldr	r3, [r0, #16]
 800b04a:	690c      	ldr	r4, [r1, #16]
 800b04c:	42a3      	cmp	r3, r4
 800b04e:	4680      	mov	r8, r0
 800b050:	f2c0 8082 	blt.w	800b158 <quorem+0x114>
 800b054:	3c01      	subs	r4, #1
 800b056:	f101 0714 	add.w	r7, r1, #20
 800b05a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b05e:	f100 0614 	add.w	r6, r0, #20
 800b062:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b066:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b06a:	eb06 030c 	add.w	r3, r6, ip
 800b06e:	3501      	adds	r5, #1
 800b070:	eb07 090c 	add.w	r9, r7, ip
 800b074:	9301      	str	r3, [sp, #4]
 800b076:	fbb0 f5f5 	udiv	r5, r0, r5
 800b07a:	b395      	cbz	r5, 800b0e2 <quorem+0x9e>
 800b07c:	f04f 0a00 	mov.w	sl, #0
 800b080:	4638      	mov	r0, r7
 800b082:	46b6      	mov	lr, r6
 800b084:	46d3      	mov	fp, sl
 800b086:	f850 2b04 	ldr.w	r2, [r0], #4
 800b08a:	b293      	uxth	r3, r2
 800b08c:	fb05 a303 	mla	r3, r5, r3, sl
 800b090:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b094:	b29b      	uxth	r3, r3
 800b096:	ebab 0303 	sub.w	r3, fp, r3
 800b09a:	0c12      	lsrs	r2, r2, #16
 800b09c:	f8de b000 	ldr.w	fp, [lr]
 800b0a0:	fb05 a202 	mla	r2, r5, r2, sl
 800b0a4:	fa13 f38b 	uxtah	r3, r3, fp
 800b0a8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b0ac:	fa1f fb82 	uxth.w	fp, r2
 800b0b0:	f8de 2000 	ldr.w	r2, [lr]
 800b0b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b0b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0c2:	4581      	cmp	r9, r0
 800b0c4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b0c8:	f84e 3b04 	str.w	r3, [lr], #4
 800b0cc:	d2db      	bcs.n	800b086 <quorem+0x42>
 800b0ce:	f856 300c 	ldr.w	r3, [r6, ip]
 800b0d2:	b933      	cbnz	r3, 800b0e2 <quorem+0x9e>
 800b0d4:	9b01      	ldr	r3, [sp, #4]
 800b0d6:	3b04      	subs	r3, #4
 800b0d8:	429e      	cmp	r6, r3
 800b0da:	461a      	mov	r2, r3
 800b0dc:	d330      	bcc.n	800b140 <quorem+0xfc>
 800b0de:	f8c8 4010 	str.w	r4, [r8, #16]
 800b0e2:	4640      	mov	r0, r8
 800b0e4:	f001 f824 	bl	800c130 <__mcmp>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	db25      	blt.n	800b138 <quorem+0xf4>
 800b0ec:	3501      	adds	r5, #1
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	f04f 0c00 	mov.w	ip, #0
 800b0f4:	f857 2b04 	ldr.w	r2, [r7], #4
 800b0f8:	f8d0 e000 	ldr.w	lr, [r0]
 800b0fc:	b293      	uxth	r3, r2
 800b0fe:	ebac 0303 	sub.w	r3, ip, r3
 800b102:	0c12      	lsrs	r2, r2, #16
 800b104:	fa13 f38e 	uxtah	r3, r3, lr
 800b108:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b10c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b110:	b29b      	uxth	r3, r3
 800b112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b116:	45b9      	cmp	r9, r7
 800b118:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b11c:	f840 3b04 	str.w	r3, [r0], #4
 800b120:	d2e8      	bcs.n	800b0f4 <quorem+0xb0>
 800b122:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b126:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b12a:	b92a      	cbnz	r2, 800b138 <quorem+0xf4>
 800b12c:	3b04      	subs	r3, #4
 800b12e:	429e      	cmp	r6, r3
 800b130:	461a      	mov	r2, r3
 800b132:	d30b      	bcc.n	800b14c <quorem+0x108>
 800b134:	f8c8 4010 	str.w	r4, [r8, #16]
 800b138:	4628      	mov	r0, r5
 800b13a:	b003      	add	sp, #12
 800b13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b140:	6812      	ldr	r2, [r2, #0]
 800b142:	3b04      	subs	r3, #4
 800b144:	2a00      	cmp	r2, #0
 800b146:	d1ca      	bne.n	800b0de <quorem+0x9a>
 800b148:	3c01      	subs	r4, #1
 800b14a:	e7c5      	b.n	800b0d8 <quorem+0x94>
 800b14c:	6812      	ldr	r2, [r2, #0]
 800b14e:	3b04      	subs	r3, #4
 800b150:	2a00      	cmp	r2, #0
 800b152:	d1ef      	bne.n	800b134 <quorem+0xf0>
 800b154:	3c01      	subs	r4, #1
 800b156:	e7ea      	b.n	800b12e <quorem+0xea>
 800b158:	2000      	movs	r0, #0
 800b15a:	e7ee      	b.n	800b13a <quorem+0xf6>
 800b15c:	0000      	movs	r0, r0
	...

0800b160 <_dtoa_r>:
 800b160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b164:	ec57 6b10 	vmov	r6, r7, d0
 800b168:	b097      	sub	sp, #92	; 0x5c
 800b16a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b16c:	9106      	str	r1, [sp, #24]
 800b16e:	4604      	mov	r4, r0
 800b170:	920b      	str	r2, [sp, #44]	; 0x2c
 800b172:	9312      	str	r3, [sp, #72]	; 0x48
 800b174:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b178:	e9cd 6700 	strd	r6, r7, [sp]
 800b17c:	b93d      	cbnz	r5, 800b18e <_dtoa_r+0x2e>
 800b17e:	2010      	movs	r0, #16
 800b180:	f7ff fa14 	bl	800a5ac <malloc>
 800b184:	6260      	str	r0, [r4, #36]	; 0x24
 800b186:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b18a:	6005      	str	r5, [r0, #0]
 800b18c:	60c5      	str	r5, [r0, #12]
 800b18e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b190:	6819      	ldr	r1, [r3, #0]
 800b192:	b151      	cbz	r1, 800b1aa <_dtoa_r+0x4a>
 800b194:	685a      	ldr	r2, [r3, #4]
 800b196:	604a      	str	r2, [r1, #4]
 800b198:	2301      	movs	r3, #1
 800b19a:	4093      	lsls	r3, r2
 800b19c:	608b      	str	r3, [r1, #8]
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f000 fde5 	bl	800bd6e <_Bfree>
 800b1a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	1e3b      	subs	r3, r7, #0
 800b1ac:	bfbb      	ittet	lt
 800b1ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b1b2:	9301      	strlt	r3, [sp, #4]
 800b1b4:	2300      	movge	r3, #0
 800b1b6:	2201      	movlt	r2, #1
 800b1b8:	bfac      	ite	ge
 800b1ba:	f8c8 3000 	strge.w	r3, [r8]
 800b1be:	f8c8 2000 	strlt.w	r2, [r8]
 800b1c2:	4baf      	ldr	r3, [pc, #700]	; (800b480 <_dtoa_r+0x320>)
 800b1c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b1c8:	ea33 0308 	bics.w	r3, r3, r8
 800b1cc:	d114      	bne.n	800b1f8 <_dtoa_r+0x98>
 800b1ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b1d0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b1d4:	6013      	str	r3, [r2, #0]
 800b1d6:	9b00      	ldr	r3, [sp, #0]
 800b1d8:	b923      	cbnz	r3, 800b1e4 <_dtoa_r+0x84>
 800b1da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	f000 8542 	beq.w	800bc68 <_dtoa_r+0xb08>
 800b1e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b494 <_dtoa_r+0x334>
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f000 8544 	beq.w	800bc78 <_dtoa_r+0xb18>
 800b1f0:	f10b 0303 	add.w	r3, fp, #3
 800b1f4:	f000 bd3e 	b.w	800bc74 <_dtoa_r+0xb14>
 800b1f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	2300      	movs	r3, #0
 800b200:	4630      	mov	r0, r6
 800b202:	4639      	mov	r1, r7
 800b204:	f7f5 fc60 	bl	8000ac8 <__aeabi_dcmpeq>
 800b208:	4681      	mov	r9, r0
 800b20a:	b168      	cbz	r0, 800b228 <_dtoa_r+0xc8>
 800b20c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b20e:	2301      	movs	r3, #1
 800b210:	6013      	str	r3, [r2, #0]
 800b212:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b214:	2b00      	cmp	r3, #0
 800b216:	f000 8524 	beq.w	800bc62 <_dtoa_r+0xb02>
 800b21a:	4b9a      	ldr	r3, [pc, #616]	; (800b484 <_dtoa_r+0x324>)
 800b21c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b21e:	f103 3bff 	add.w	fp, r3, #4294967295
 800b222:	6013      	str	r3, [r2, #0]
 800b224:	f000 bd28 	b.w	800bc78 <_dtoa_r+0xb18>
 800b228:	aa14      	add	r2, sp, #80	; 0x50
 800b22a:	a915      	add	r1, sp, #84	; 0x54
 800b22c:	ec47 6b10 	vmov	d0, r6, r7
 800b230:	4620      	mov	r0, r4
 800b232:	f000 fff4 	bl	800c21e <__d2b>
 800b236:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b23a:	9004      	str	r0, [sp, #16]
 800b23c:	2d00      	cmp	r5, #0
 800b23e:	d07c      	beq.n	800b33a <_dtoa_r+0x1da>
 800b240:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b244:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b248:	46b2      	mov	sl, r6
 800b24a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b24e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b252:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b256:	2200      	movs	r2, #0
 800b258:	4b8b      	ldr	r3, [pc, #556]	; (800b488 <_dtoa_r+0x328>)
 800b25a:	4650      	mov	r0, sl
 800b25c:	4659      	mov	r1, fp
 800b25e:	f7f5 f813 	bl	8000288 <__aeabi_dsub>
 800b262:	a381      	add	r3, pc, #516	; (adr r3, 800b468 <_dtoa_r+0x308>)
 800b264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b268:	f7f5 f9c6 	bl	80005f8 <__aeabi_dmul>
 800b26c:	a380      	add	r3, pc, #512	; (adr r3, 800b470 <_dtoa_r+0x310>)
 800b26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b272:	f7f5 f80b 	bl	800028c <__adddf3>
 800b276:	4606      	mov	r6, r0
 800b278:	4628      	mov	r0, r5
 800b27a:	460f      	mov	r7, r1
 800b27c:	f7f5 f952 	bl	8000524 <__aeabi_i2d>
 800b280:	a37d      	add	r3, pc, #500	; (adr r3, 800b478 <_dtoa_r+0x318>)
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	f7f5 f9b7 	bl	80005f8 <__aeabi_dmul>
 800b28a:	4602      	mov	r2, r0
 800b28c:	460b      	mov	r3, r1
 800b28e:	4630      	mov	r0, r6
 800b290:	4639      	mov	r1, r7
 800b292:	f7f4 fffb 	bl	800028c <__adddf3>
 800b296:	4606      	mov	r6, r0
 800b298:	460f      	mov	r7, r1
 800b29a:	f7f5 fc5d 	bl	8000b58 <__aeabi_d2iz>
 800b29e:	2200      	movs	r2, #0
 800b2a0:	4682      	mov	sl, r0
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	4639      	mov	r1, r7
 800b2a8:	f7f5 fc18 	bl	8000adc <__aeabi_dcmplt>
 800b2ac:	b148      	cbz	r0, 800b2c2 <_dtoa_r+0x162>
 800b2ae:	4650      	mov	r0, sl
 800b2b0:	f7f5 f938 	bl	8000524 <__aeabi_i2d>
 800b2b4:	4632      	mov	r2, r6
 800b2b6:	463b      	mov	r3, r7
 800b2b8:	f7f5 fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2bc:	b908      	cbnz	r0, 800b2c2 <_dtoa_r+0x162>
 800b2be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2c2:	f1ba 0f16 	cmp.w	sl, #22
 800b2c6:	d859      	bhi.n	800b37c <_dtoa_r+0x21c>
 800b2c8:	4970      	ldr	r1, [pc, #448]	; (800b48c <_dtoa_r+0x32c>)
 800b2ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b2ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2d6:	f7f5 fc1f 	bl	8000b18 <__aeabi_dcmpgt>
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d050      	beq.n	800b380 <_dtoa_r+0x220>
 800b2de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2e8:	1b5d      	subs	r5, r3, r5
 800b2ea:	f1b5 0801 	subs.w	r8, r5, #1
 800b2ee:	bf49      	itett	mi
 800b2f0:	f1c5 0301 	rsbmi	r3, r5, #1
 800b2f4:	2300      	movpl	r3, #0
 800b2f6:	9305      	strmi	r3, [sp, #20]
 800b2f8:	f04f 0800 	movmi.w	r8, #0
 800b2fc:	bf58      	it	pl
 800b2fe:	9305      	strpl	r3, [sp, #20]
 800b300:	f1ba 0f00 	cmp.w	sl, #0
 800b304:	db3e      	blt.n	800b384 <_dtoa_r+0x224>
 800b306:	2300      	movs	r3, #0
 800b308:	44d0      	add	r8, sl
 800b30a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b30e:	9307      	str	r3, [sp, #28]
 800b310:	9b06      	ldr	r3, [sp, #24]
 800b312:	2b09      	cmp	r3, #9
 800b314:	f200 8090 	bhi.w	800b438 <_dtoa_r+0x2d8>
 800b318:	2b05      	cmp	r3, #5
 800b31a:	bfc4      	itt	gt
 800b31c:	3b04      	subgt	r3, #4
 800b31e:	9306      	strgt	r3, [sp, #24]
 800b320:	9b06      	ldr	r3, [sp, #24]
 800b322:	f1a3 0302 	sub.w	r3, r3, #2
 800b326:	bfcc      	ite	gt
 800b328:	2500      	movgt	r5, #0
 800b32a:	2501      	movle	r5, #1
 800b32c:	2b03      	cmp	r3, #3
 800b32e:	f200 808f 	bhi.w	800b450 <_dtoa_r+0x2f0>
 800b332:	e8df f003 	tbb	[pc, r3]
 800b336:	7f7d      	.short	0x7f7d
 800b338:	7131      	.short	0x7131
 800b33a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b33e:	441d      	add	r5, r3
 800b340:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b344:	2820      	cmp	r0, #32
 800b346:	dd13      	ble.n	800b370 <_dtoa_r+0x210>
 800b348:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b34c:	9b00      	ldr	r3, [sp, #0]
 800b34e:	fa08 f800 	lsl.w	r8, r8, r0
 800b352:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b356:	fa23 f000 	lsr.w	r0, r3, r0
 800b35a:	ea48 0000 	orr.w	r0, r8, r0
 800b35e:	f7f5 f8d1 	bl	8000504 <__aeabi_ui2d>
 800b362:	2301      	movs	r3, #1
 800b364:	4682      	mov	sl, r0
 800b366:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b36a:	3d01      	subs	r5, #1
 800b36c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b36e:	e772      	b.n	800b256 <_dtoa_r+0xf6>
 800b370:	9b00      	ldr	r3, [sp, #0]
 800b372:	f1c0 0020 	rsb	r0, r0, #32
 800b376:	fa03 f000 	lsl.w	r0, r3, r0
 800b37a:	e7f0      	b.n	800b35e <_dtoa_r+0x1fe>
 800b37c:	2301      	movs	r3, #1
 800b37e:	e7b1      	b.n	800b2e4 <_dtoa_r+0x184>
 800b380:	900f      	str	r0, [sp, #60]	; 0x3c
 800b382:	e7b0      	b.n	800b2e6 <_dtoa_r+0x186>
 800b384:	9b05      	ldr	r3, [sp, #20]
 800b386:	eba3 030a 	sub.w	r3, r3, sl
 800b38a:	9305      	str	r3, [sp, #20]
 800b38c:	f1ca 0300 	rsb	r3, sl, #0
 800b390:	9307      	str	r3, [sp, #28]
 800b392:	2300      	movs	r3, #0
 800b394:	930e      	str	r3, [sp, #56]	; 0x38
 800b396:	e7bb      	b.n	800b310 <_dtoa_r+0x1b0>
 800b398:	2301      	movs	r3, #1
 800b39a:	930a      	str	r3, [sp, #40]	; 0x28
 800b39c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	dd59      	ble.n	800b456 <_dtoa_r+0x2f6>
 800b3a2:	9302      	str	r3, [sp, #8]
 800b3a4:	4699      	mov	r9, r3
 800b3a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	6072      	str	r2, [r6, #4]
 800b3ac:	2204      	movs	r2, #4
 800b3ae:	f102 0014 	add.w	r0, r2, #20
 800b3b2:	4298      	cmp	r0, r3
 800b3b4:	6871      	ldr	r1, [r6, #4]
 800b3b6:	d953      	bls.n	800b460 <_dtoa_r+0x300>
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f000 fca4 	bl	800bd06 <_Balloc>
 800b3be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3c0:	6030      	str	r0, [r6, #0]
 800b3c2:	f1b9 0f0e 	cmp.w	r9, #14
 800b3c6:	f8d3 b000 	ldr.w	fp, [r3]
 800b3ca:	f200 80e6 	bhi.w	800b59a <_dtoa_r+0x43a>
 800b3ce:	2d00      	cmp	r5, #0
 800b3d0:	f000 80e3 	beq.w	800b59a <_dtoa_r+0x43a>
 800b3d4:	ed9d 7b00 	vldr	d7, [sp]
 800b3d8:	f1ba 0f00 	cmp.w	sl, #0
 800b3dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b3e0:	dd74      	ble.n	800b4cc <_dtoa_r+0x36c>
 800b3e2:	4a2a      	ldr	r2, [pc, #168]	; (800b48c <_dtoa_r+0x32c>)
 800b3e4:	f00a 030f 	and.w	r3, sl, #15
 800b3e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b3ec:	ed93 7b00 	vldr	d7, [r3]
 800b3f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b3f4:	06f0      	lsls	r0, r6, #27
 800b3f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b3fa:	d565      	bpl.n	800b4c8 <_dtoa_r+0x368>
 800b3fc:	4b24      	ldr	r3, [pc, #144]	; (800b490 <_dtoa_r+0x330>)
 800b3fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b402:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b406:	f7f5 fa21 	bl	800084c <__aeabi_ddiv>
 800b40a:	e9cd 0100 	strd	r0, r1, [sp]
 800b40e:	f006 060f 	and.w	r6, r6, #15
 800b412:	2503      	movs	r5, #3
 800b414:	4f1e      	ldr	r7, [pc, #120]	; (800b490 <_dtoa_r+0x330>)
 800b416:	e04c      	b.n	800b4b2 <_dtoa_r+0x352>
 800b418:	2301      	movs	r3, #1
 800b41a:	930a      	str	r3, [sp, #40]	; 0x28
 800b41c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b41e:	4453      	add	r3, sl
 800b420:	f103 0901 	add.w	r9, r3, #1
 800b424:	9302      	str	r3, [sp, #8]
 800b426:	464b      	mov	r3, r9
 800b428:	2b01      	cmp	r3, #1
 800b42a:	bfb8      	it	lt
 800b42c:	2301      	movlt	r3, #1
 800b42e:	e7ba      	b.n	800b3a6 <_dtoa_r+0x246>
 800b430:	2300      	movs	r3, #0
 800b432:	e7b2      	b.n	800b39a <_dtoa_r+0x23a>
 800b434:	2300      	movs	r3, #0
 800b436:	e7f0      	b.n	800b41a <_dtoa_r+0x2ba>
 800b438:	2501      	movs	r5, #1
 800b43a:	2300      	movs	r3, #0
 800b43c:	9306      	str	r3, [sp, #24]
 800b43e:	950a      	str	r5, [sp, #40]	; 0x28
 800b440:	f04f 33ff 	mov.w	r3, #4294967295
 800b444:	9302      	str	r3, [sp, #8]
 800b446:	4699      	mov	r9, r3
 800b448:	2200      	movs	r2, #0
 800b44a:	2312      	movs	r3, #18
 800b44c:	920b      	str	r2, [sp, #44]	; 0x2c
 800b44e:	e7aa      	b.n	800b3a6 <_dtoa_r+0x246>
 800b450:	2301      	movs	r3, #1
 800b452:	930a      	str	r3, [sp, #40]	; 0x28
 800b454:	e7f4      	b.n	800b440 <_dtoa_r+0x2e0>
 800b456:	2301      	movs	r3, #1
 800b458:	9302      	str	r3, [sp, #8]
 800b45a:	4699      	mov	r9, r3
 800b45c:	461a      	mov	r2, r3
 800b45e:	e7f5      	b.n	800b44c <_dtoa_r+0x2ec>
 800b460:	3101      	adds	r1, #1
 800b462:	6071      	str	r1, [r6, #4]
 800b464:	0052      	lsls	r2, r2, #1
 800b466:	e7a2      	b.n	800b3ae <_dtoa_r+0x24e>
 800b468:	636f4361 	.word	0x636f4361
 800b46c:	3fd287a7 	.word	0x3fd287a7
 800b470:	8b60c8b3 	.word	0x8b60c8b3
 800b474:	3fc68a28 	.word	0x3fc68a28
 800b478:	509f79fb 	.word	0x509f79fb
 800b47c:	3fd34413 	.word	0x3fd34413
 800b480:	7ff00000 	.word	0x7ff00000
 800b484:	0800c6dd 	.word	0x0800c6dd
 800b488:	3ff80000 	.word	0x3ff80000
 800b48c:	0800c738 	.word	0x0800c738
 800b490:	0800c710 	.word	0x0800c710
 800b494:	0800c709 	.word	0x0800c709
 800b498:	07f1      	lsls	r1, r6, #31
 800b49a:	d508      	bpl.n	800b4ae <_dtoa_r+0x34e>
 800b49c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b4a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4a4:	f7f5 f8a8 	bl	80005f8 <__aeabi_dmul>
 800b4a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b4ac:	3501      	adds	r5, #1
 800b4ae:	1076      	asrs	r6, r6, #1
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	2e00      	cmp	r6, #0
 800b4b4:	d1f0      	bne.n	800b498 <_dtoa_r+0x338>
 800b4b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b4ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4be:	f7f5 f9c5 	bl	800084c <__aeabi_ddiv>
 800b4c2:	e9cd 0100 	strd	r0, r1, [sp]
 800b4c6:	e01a      	b.n	800b4fe <_dtoa_r+0x39e>
 800b4c8:	2502      	movs	r5, #2
 800b4ca:	e7a3      	b.n	800b414 <_dtoa_r+0x2b4>
 800b4cc:	f000 80a0 	beq.w	800b610 <_dtoa_r+0x4b0>
 800b4d0:	f1ca 0600 	rsb	r6, sl, #0
 800b4d4:	4b9f      	ldr	r3, [pc, #636]	; (800b754 <_dtoa_r+0x5f4>)
 800b4d6:	4fa0      	ldr	r7, [pc, #640]	; (800b758 <_dtoa_r+0x5f8>)
 800b4d8:	f006 020f 	and.w	r2, r6, #15
 800b4dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b4e8:	f7f5 f886 	bl	80005f8 <__aeabi_dmul>
 800b4ec:	e9cd 0100 	strd	r0, r1, [sp]
 800b4f0:	1136      	asrs	r6, r6, #4
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	2502      	movs	r5, #2
 800b4f6:	2e00      	cmp	r6, #0
 800b4f8:	d17f      	bne.n	800b5fa <_dtoa_r+0x49a>
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d1e1      	bne.n	800b4c2 <_dtoa_r+0x362>
 800b4fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b500:	2b00      	cmp	r3, #0
 800b502:	f000 8087 	beq.w	800b614 <_dtoa_r+0x4b4>
 800b506:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b50a:	2200      	movs	r2, #0
 800b50c:	4b93      	ldr	r3, [pc, #588]	; (800b75c <_dtoa_r+0x5fc>)
 800b50e:	4630      	mov	r0, r6
 800b510:	4639      	mov	r1, r7
 800b512:	f7f5 fae3 	bl	8000adc <__aeabi_dcmplt>
 800b516:	2800      	cmp	r0, #0
 800b518:	d07c      	beq.n	800b614 <_dtoa_r+0x4b4>
 800b51a:	f1b9 0f00 	cmp.w	r9, #0
 800b51e:	d079      	beq.n	800b614 <_dtoa_r+0x4b4>
 800b520:	9b02      	ldr	r3, [sp, #8]
 800b522:	2b00      	cmp	r3, #0
 800b524:	dd35      	ble.n	800b592 <_dtoa_r+0x432>
 800b526:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b52a:	9308      	str	r3, [sp, #32]
 800b52c:	4639      	mov	r1, r7
 800b52e:	2200      	movs	r2, #0
 800b530:	4b8b      	ldr	r3, [pc, #556]	; (800b760 <_dtoa_r+0x600>)
 800b532:	4630      	mov	r0, r6
 800b534:	f7f5 f860 	bl	80005f8 <__aeabi_dmul>
 800b538:	e9cd 0100 	strd	r0, r1, [sp]
 800b53c:	9f02      	ldr	r7, [sp, #8]
 800b53e:	3501      	adds	r5, #1
 800b540:	4628      	mov	r0, r5
 800b542:	f7f4 ffef 	bl	8000524 <__aeabi_i2d>
 800b546:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b54a:	f7f5 f855 	bl	80005f8 <__aeabi_dmul>
 800b54e:	2200      	movs	r2, #0
 800b550:	4b84      	ldr	r3, [pc, #528]	; (800b764 <_dtoa_r+0x604>)
 800b552:	f7f4 fe9b 	bl	800028c <__adddf3>
 800b556:	4605      	mov	r5, r0
 800b558:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b55c:	2f00      	cmp	r7, #0
 800b55e:	d15d      	bne.n	800b61c <_dtoa_r+0x4bc>
 800b560:	2200      	movs	r2, #0
 800b562:	4b81      	ldr	r3, [pc, #516]	; (800b768 <_dtoa_r+0x608>)
 800b564:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b568:	f7f4 fe8e 	bl	8000288 <__aeabi_dsub>
 800b56c:	462a      	mov	r2, r5
 800b56e:	4633      	mov	r3, r6
 800b570:	e9cd 0100 	strd	r0, r1, [sp]
 800b574:	f7f5 fad0 	bl	8000b18 <__aeabi_dcmpgt>
 800b578:	2800      	cmp	r0, #0
 800b57a:	f040 8288 	bne.w	800ba8e <_dtoa_r+0x92e>
 800b57e:	462a      	mov	r2, r5
 800b580:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b584:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b588:	f7f5 faa8 	bl	8000adc <__aeabi_dcmplt>
 800b58c:	2800      	cmp	r0, #0
 800b58e:	f040 827c 	bne.w	800ba8a <_dtoa_r+0x92a>
 800b592:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b596:	e9cd 2300 	strd	r2, r3, [sp]
 800b59a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f2c0 8150 	blt.w	800b842 <_dtoa_r+0x6e2>
 800b5a2:	f1ba 0f0e 	cmp.w	sl, #14
 800b5a6:	f300 814c 	bgt.w	800b842 <_dtoa_r+0x6e2>
 800b5aa:	4b6a      	ldr	r3, [pc, #424]	; (800b754 <_dtoa_r+0x5f4>)
 800b5ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b5b0:	ed93 7b00 	vldr	d7, [r3]
 800b5b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b5bc:	f280 80d8 	bge.w	800b770 <_dtoa_r+0x610>
 800b5c0:	f1b9 0f00 	cmp.w	r9, #0
 800b5c4:	f300 80d4 	bgt.w	800b770 <_dtoa_r+0x610>
 800b5c8:	f040 825e 	bne.w	800ba88 <_dtoa_r+0x928>
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	4b66      	ldr	r3, [pc, #408]	; (800b768 <_dtoa_r+0x608>)
 800b5d0:	ec51 0b17 	vmov	r0, r1, d7
 800b5d4:	f7f5 f810 	bl	80005f8 <__aeabi_dmul>
 800b5d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5dc:	f7f5 fa92 	bl	8000b04 <__aeabi_dcmpge>
 800b5e0:	464f      	mov	r7, r9
 800b5e2:	464e      	mov	r6, r9
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	f040 8234 	bne.w	800ba52 <_dtoa_r+0x8f2>
 800b5ea:	2331      	movs	r3, #49	; 0x31
 800b5ec:	f10b 0501 	add.w	r5, fp, #1
 800b5f0:	f88b 3000 	strb.w	r3, [fp]
 800b5f4:	f10a 0a01 	add.w	sl, sl, #1
 800b5f8:	e22f      	b.n	800ba5a <_dtoa_r+0x8fa>
 800b5fa:	07f2      	lsls	r2, r6, #31
 800b5fc:	d505      	bpl.n	800b60a <_dtoa_r+0x4aa>
 800b5fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b602:	f7f4 fff9 	bl	80005f8 <__aeabi_dmul>
 800b606:	3501      	adds	r5, #1
 800b608:	2301      	movs	r3, #1
 800b60a:	1076      	asrs	r6, r6, #1
 800b60c:	3708      	adds	r7, #8
 800b60e:	e772      	b.n	800b4f6 <_dtoa_r+0x396>
 800b610:	2502      	movs	r5, #2
 800b612:	e774      	b.n	800b4fe <_dtoa_r+0x39e>
 800b614:	f8cd a020 	str.w	sl, [sp, #32]
 800b618:	464f      	mov	r7, r9
 800b61a:	e791      	b.n	800b540 <_dtoa_r+0x3e0>
 800b61c:	4b4d      	ldr	r3, [pc, #308]	; (800b754 <_dtoa_r+0x5f4>)
 800b61e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b622:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d047      	beq.n	800b6bc <_dtoa_r+0x55c>
 800b62c:	4602      	mov	r2, r0
 800b62e:	460b      	mov	r3, r1
 800b630:	2000      	movs	r0, #0
 800b632:	494e      	ldr	r1, [pc, #312]	; (800b76c <_dtoa_r+0x60c>)
 800b634:	f7f5 f90a 	bl	800084c <__aeabi_ddiv>
 800b638:	462a      	mov	r2, r5
 800b63a:	4633      	mov	r3, r6
 800b63c:	f7f4 fe24 	bl	8000288 <__aeabi_dsub>
 800b640:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b644:	465d      	mov	r5, fp
 800b646:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b64a:	f7f5 fa85 	bl	8000b58 <__aeabi_d2iz>
 800b64e:	4606      	mov	r6, r0
 800b650:	f7f4 ff68 	bl	8000524 <__aeabi_i2d>
 800b654:	4602      	mov	r2, r0
 800b656:	460b      	mov	r3, r1
 800b658:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b65c:	f7f4 fe14 	bl	8000288 <__aeabi_dsub>
 800b660:	3630      	adds	r6, #48	; 0x30
 800b662:	f805 6b01 	strb.w	r6, [r5], #1
 800b666:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b66a:	e9cd 0100 	strd	r0, r1, [sp]
 800b66e:	f7f5 fa35 	bl	8000adc <__aeabi_dcmplt>
 800b672:	2800      	cmp	r0, #0
 800b674:	d163      	bne.n	800b73e <_dtoa_r+0x5de>
 800b676:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b67a:	2000      	movs	r0, #0
 800b67c:	4937      	ldr	r1, [pc, #220]	; (800b75c <_dtoa_r+0x5fc>)
 800b67e:	f7f4 fe03 	bl	8000288 <__aeabi_dsub>
 800b682:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b686:	f7f5 fa29 	bl	8000adc <__aeabi_dcmplt>
 800b68a:	2800      	cmp	r0, #0
 800b68c:	f040 80b7 	bne.w	800b7fe <_dtoa_r+0x69e>
 800b690:	eba5 030b 	sub.w	r3, r5, fp
 800b694:	429f      	cmp	r7, r3
 800b696:	f77f af7c 	ble.w	800b592 <_dtoa_r+0x432>
 800b69a:	2200      	movs	r2, #0
 800b69c:	4b30      	ldr	r3, [pc, #192]	; (800b760 <_dtoa_r+0x600>)
 800b69e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b6a2:	f7f4 ffa9 	bl	80005f8 <__aeabi_dmul>
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b6ac:	4b2c      	ldr	r3, [pc, #176]	; (800b760 <_dtoa_r+0x600>)
 800b6ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6b2:	f7f4 ffa1 	bl	80005f8 <__aeabi_dmul>
 800b6b6:	e9cd 0100 	strd	r0, r1, [sp]
 800b6ba:	e7c4      	b.n	800b646 <_dtoa_r+0x4e6>
 800b6bc:	462a      	mov	r2, r5
 800b6be:	4633      	mov	r3, r6
 800b6c0:	f7f4 ff9a 	bl	80005f8 <__aeabi_dmul>
 800b6c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b6c8:	eb0b 0507 	add.w	r5, fp, r7
 800b6cc:	465e      	mov	r6, fp
 800b6ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6d2:	f7f5 fa41 	bl	8000b58 <__aeabi_d2iz>
 800b6d6:	4607      	mov	r7, r0
 800b6d8:	f7f4 ff24 	bl	8000524 <__aeabi_i2d>
 800b6dc:	3730      	adds	r7, #48	; 0x30
 800b6de:	4602      	mov	r2, r0
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6e6:	f7f4 fdcf 	bl	8000288 <__aeabi_dsub>
 800b6ea:	f806 7b01 	strb.w	r7, [r6], #1
 800b6ee:	42ae      	cmp	r6, r5
 800b6f0:	e9cd 0100 	strd	r0, r1, [sp]
 800b6f4:	f04f 0200 	mov.w	r2, #0
 800b6f8:	d126      	bne.n	800b748 <_dtoa_r+0x5e8>
 800b6fa:	4b1c      	ldr	r3, [pc, #112]	; (800b76c <_dtoa_r+0x60c>)
 800b6fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b700:	f7f4 fdc4 	bl	800028c <__adddf3>
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b70c:	f7f5 fa04 	bl	8000b18 <__aeabi_dcmpgt>
 800b710:	2800      	cmp	r0, #0
 800b712:	d174      	bne.n	800b7fe <_dtoa_r+0x69e>
 800b714:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b718:	2000      	movs	r0, #0
 800b71a:	4914      	ldr	r1, [pc, #80]	; (800b76c <_dtoa_r+0x60c>)
 800b71c:	f7f4 fdb4 	bl	8000288 <__aeabi_dsub>
 800b720:	4602      	mov	r2, r0
 800b722:	460b      	mov	r3, r1
 800b724:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b728:	f7f5 f9d8 	bl	8000adc <__aeabi_dcmplt>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	f43f af30 	beq.w	800b592 <_dtoa_r+0x432>
 800b732:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b736:	2b30      	cmp	r3, #48	; 0x30
 800b738:	f105 32ff 	add.w	r2, r5, #4294967295
 800b73c:	d002      	beq.n	800b744 <_dtoa_r+0x5e4>
 800b73e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b742:	e04a      	b.n	800b7da <_dtoa_r+0x67a>
 800b744:	4615      	mov	r5, r2
 800b746:	e7f4      	b.n	800b732 <_dtoa_r+0x5d2>
 800b748:	4b05      	ldr	r3, [pc, #20]	; (800b760 <_dtoa_r+0x600>)
 800b74a:	f7f4 ff55 	bl	80005f8 <__aeabi_dmul>
 800b74e:	e9cd 0100 	strd	r0, r1, [sp]
 800b752:	e7bc      	b.n	800b6ce <_dtoa_r+0x56e>
 800b754:	0800c738 	.word	0x0800c738
 800b758:	0800c710 	.word	0x0800c710
 800b75c:	3ff00000 	.word	0x3ff00000
 800b760:	40240000 	.word	0x40240000
 800b764:	401c0000 	.word	0x401c0000
 800b768:	40140000 	.word	0x40140000
 800b76c:	3fe00000 	.word	0x3fe00000
 800b770:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b774:	465d      	mov	r5, fp
 800b776:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b77a:	4630      	mov	r0, r6
 800b77c:	4639      	mov	r1, r7
 800b77e:	f7f5 f865 	bl	800084c <__aeabi_ddiv>
 800b782:	f7f5 f9e9 	bl	8000b58 <__aeabi_d2iz>
 800b786:	4680      	mov	r8, r0
 800b788:	f7f4 fecc 	bl	8000524 <__aeabi_i2d>
 800b78c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b790:	f7f4 ff32 	bl	80005f8 <__aeabi_dmul>
 800b794:	4602      	mov	r2, r0
 800b796:	460b      	mov	r3, r1
 800b798:	4630      	mov	r0, r6
 800b79a:	4639      	mov	r1, r7
 800b79c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b7a0:	f7f4 fd72 	bl	8000288 <__aeabi_dsub>
 800b7a4:	f805 6b01 	strb.w	r6, [r5], #1
 800b7a8:	eba5 060b 	sub.w	r6, r5, fp
 800b7ac:	45b1      	cmp	r9, r6
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	d139      	bne.n	800b828 <_dtoa_r+0x6c8>
 800b7b4:	f7f4 fd6a 	bl	800028c <__adddf3>
 800b7b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7bc:	4606      	mov	r6, r0
 800b7be:	460f      	mov	r7, r1
 800b7c0:	f7f5 f9aa 	bl	8000b18 <__aeabi_dcmpgt>
 800b7c4:	b9c8      	cbnz	r0, 800b7fa <_dtoa_r+0x69a>
 800b7c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	4639      	mov	r1, r7
 800b7ce:	f7f5 f97b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7d2:	b110      	cbz	r0, 800b7da <_dtoa_r+0x67a>
 800b7d4:	f018 0f01 	tst.w	r8, #1
 800b7d8:	d10f      	bne.n	800b7fa <_dtoa_r+0x69a>
 800b7da:	9904      	ldr	r1, [sp, #16]
 800b7dc:	4620      	mov	r0, r4
 800b7de:	f000 fac6 	bl	800bd6e <_Bfree>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b7e6:	702b      	strb	r3, [r5, #0]
 800b7e8:	f10a 0301 	add.w	r3, sl, #1
 800b7ec:	6013      	str	r3, [r2, #0]
 800b7ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f000 8241 	beq.w	800bc78 <_dtoa_r+0xb18>
 800b7f6:	601d      	str	r5, [r3, #0]
 800b7f8:	e23e      	b.n	800bc78 <_dtoa_r+0xb18>
 800b7fa:	f8cd a020 	str.w	sl, [sp, #32]
 800b7fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b802:	2a39      	cmp	r2, #57	; 0x39
 800b804:	f105 33ff 	add.w	r3, r5, #4294967295
 800b808:	d108      	bne.n	800b81c <_dtoa_r+0x6bc>
 800b80a:	459b      	cmp	fp, r3
 800b80c:	d10a      	bne.n	800b824 <_dtoa_r+0x6c4>
 800b80e:	9b08      	ldr	r3, [sp, #32]
 800b810:	3301      	adds	r3, #1
 800b812:	9308      	str	r3, [sp, #32]
 800b814:	2330      	movs	r3, #48	; 0x30
 800b816:	f88b 3000 	strb.w	r3, [fp]
 800b81a:	465b      	mov	r3, fp
 800b81c:	781a      	ldrb	r2, [r3, #0]
 800b81e:	3201      	adds	r2, #1
 800b820:	701a      	strb	r2, [r3, #0]
 800b822:	e78c      	b.n	800b73e <_dtoa_r+0x5de>
 800b824:	461d      	mov	r5, r3
 800b826:	e7ea      	b.n	800b7fe <_dtoa_r+0x69e>
 800b828:	2200      	movs	r2, #0
 800b82a:	4b9b      	ldr	r3, [pc, #620]	; (800ba98 <_dtoa_r+0x938>)
 800b82c:	f7f4 fee4 	bl	80005f8 <__aeabi_dmul>
 800b830:	2200      	movs	r2, #0
 800b832:	2300      	movs	r3, #0
 800b834:	4606      	mov	r6, r0
 800b836:	460f      	mov	r7, r1
 800b838:	f7f5 f946 	bl	8000ac8 <__aeabi_dcmpeq>
 800b83c:	2800      	cmp	r0, #0
 800b83e:	d09a      	beq.n	800b776 <_dtoa_r+0x616>
 800b840:	e7cb      	b.n	800b7da <_dtoa_r+0x67a>
 800b842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b844:	2a00      	cmp	r2, #0
 800b846:	f000 808b 	beq.w	800b960 <_dtoa_r+0x800>
 800b84a:	9a06      	ldr	r2, [sp, #24]
 800b84c:	2a01      	cmp	r2, #1
 800b84e:	dc6e      	bgt.n	800b92e <_dtoa_r+0x7ce>
 800b850:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b852:	2a00      	cmp	r2, #0
 800b854:	d067      	beq.n	800b926 <_dtoa_r+0x7c6>
 800b856:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b85a:	9f07      	ldr	r7, [sp, #28]
 800b85c:	9d05      	ldr	r5, [sp, #20]
 800b85e:	9a05      	ldr	r2, [sp, #20]
 800b860:	2101      	movs	r1, #1
 800b862:	441a      	add	r2, r3
 800b864:	4620      	mov	r0, r4
 800b866:	9205      	str	r2, [sp, #20]
 800b868:	4498      	add	r8, r3
 800b86a:	f000 fb20 	bl	800beae <__i2b>
 800b86e:	4606      	mov	r6, r0
 800b870:	2d00      	cmp	r5, #0
 800b872:	dd0c      	ble.n	800b88e <_dtoa_r+0x72e>
 800b874:	f1b8 0f00 	cmp.w	r8, #0
 800b878:	dd09      	ble.n	800b88e <_dtoa_r+0x72e>
 800b87a:	4545      	cmp	r5, r8
 800b87c:	9a05      	ldr	r2, [sp, #20]
 800b87e:	462b      	mov	r3, r5
 800b880:	bfa8      	it	ge
 800b882:	4643      	movge	r3, r8
 800b884:	1ad2      	subs	r2, r2, r3
 800b886:	9205      	str	r2, [sp, #20]
 800b888:	1aed      	subs	r5, r5, r3
 800b88a:	eba8 0803 	sub.w	r8, r8, r3
 800b88e:	9b07      	ldr	r3, [sp, #28]
 800b890:	b1eb      	cbz	r3, 800b8ce <_dtoa_r+0x76e>
 800b892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b894:	2b00      	cmp	r3, #0
 800b896:	d067      	beq.n	800b968 <_dtoa_r+0x808>
 800b898:	b18f      	cbz	r7, 800b8be <_dtoa_r+0x75e>
 800b89a:	4631      	mov	r1, r6
 800b89c:	463a      	mov	r2, r7
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f000 fba4 	bl	800bfec <__pow5mult>
 800b8a4:	9a04      	ldr	r2, [sp, #16]
 800b8a6:	4601      	mov	r1, r0
 800b8a8:	4606      	mov	r6, r0
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f000 fb08 	bl	800bec0 <__multiply>
 800b8b0:	9904      	ldr	r1, [sp, #16]
 800b8b2:	9008      	str	r0, [sp, #32]
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f000 fa5a 	bl	800bd6e <_Bfree>
 800b8ba:	9b08      	ldr	r3, [sp, #32]
 800b8bc:	9304      	str	r3, [sp, #16]
 800b8be:	9b07      	ldr	r3, [sp, #28]
 800b8c0:	1bda      	subs	r2, r3, r7
 800b8c2:	d004      	beq.n	800b8ce <_dtoa_r+0x76e>
 800b8c4:	9904      	ldr	r1, [sp, #16]
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f000 fb90 	bl	800bfec <__pow5mult>
 800b8cc:	9004      	str	r0, [sp, #16]
 800b8ce:	2101      	movs	r1, #1
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f000 faec 	bl	800beae <__i2b>
 800b8d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8d8:	4607      	mov	r7, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	f000 81d0 	beq.w	800bc80 <_dtoa_r+0xb20>
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	4601      	mov	r1, r0
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	f000 fb81 	bl	800bfec <__pow5mult>
 800b8ea:	9b06      	ldr	r3, [sp, #24]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	4607      	mov	r7, r0
 800b8f0:	dc40      	bgt.n	800b974 <_dtoa_r+0x814>
 800b8f2:	9b00      	ldr	r3, [sp, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d139      	bne.n	800b96c <_dtoa_r+0x80c>
 800b8f8:	9b01      	ldr	r3, [sp, #4]
 800b8fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d136      	bne.n	800b970 <_dtoa_r+0x810>
 800b902:	9b01      	ldr	r3, [sp, #4]
 800b904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b908:	0d1b      	lsrs	r3, r3, #20
 800b90a:	051b      	lsls	r3, r3, #20
 800b90c:	b12b      	cbz	r3, 800b91a <_dtoa_r+0x7ba>
 800b90e:	9b05      	ldr	r3, [sp, #20]
 800b910:	3301      	adds	r3, #1
 800b912:	9305      	str	r3, [sp, #20]
 800b914:	f108 0801 	add.w	r8, r8, #1
 800b918:	2301      	movs	r3, #1
 800b91a:	9307      	str	r3, [sp, #28]
 800b91c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d12a      	bne.n	800b978 <_dtoa_r+0x818>
 800b922:	2001      	movs	r0, #1
 800b924:	e030      	b.n	800b988 <_dtoa_r+0x828>
 800b926:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b928:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b92c:	e795      	b.n	800b85a <_dtoa_r+0x6fa>
 800b92e:	9b07      	ldr	r3, [sp, #28]
 800b930:	f109 37ff 	add.w	r7, r9, #4294967295
 800b934:	42bb      	cmp	r3, r7
 800b936:	bfbf      	itttt	lt
 800b938:	9b07      	ldrlt	r3, [sp, #28]
 800b93a:	9707      	strlt	r7, [sp, #28]
 800b93c:	1afa      	sublt	r2, r7, r3
 800b93e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b940:	bfbb      	ittet	lt
 800b942:	189b      	addlt	r3, r3, r2
 800b944:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b946:	1bdf      	subge	r7, r3, r7
 800b948:	2700      	movlt	r7, #0
 800b94a:	f1b9 0f00 	cmp.w	r9, #0
 800b94e:	bfb5      	itete	lt
 800b950:	9b05      	ldrlt	r3, [sp, #20]
 800b952:	9d05      	ldrge	r5, [sp, #20]
 800b954:	eba3 0509 	sublt.w	r5, r3, r9
 800b958:	464b      	movge	r3, r9
 800b95a:	bfb8      	it	lt
 800b95c:	2300      	movlt	r3, #0
 800b95e:	e77e      	b.n	800b85e <_dtoa_r+0x6fe>
 800b960:	9f07      	ldr	r7, [sp, #28]
 800b962:	9d05      	ldr	r5, [sp, #20]
 800b964:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b966:	e783      	b.n	800b870 <_dtoa_r+0x710>
 800b968:	9a07      	ldr	r2, [sp, #28]
 800b96a:	e7ab      	b.n	800b8c4 <_dtoa_r+0x764>
 800b96c:	2300      	movs	r3, #0
 800b96e:	e7d4      	b.n	800b91a <_dtoa_r+0x7ba>
 800b970:	9b00      	ldr	r3, [sp, #0]
 800b972:	e7d2      	b.n	800b91a <_dtoa_r+0x7ba>
 800b974:	2300      	movs	r3, #0
 800b976:	9307      	str	r3, [sp, #28]
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b97e:	6918      	ldr	r0, [r3, #16]
 800b980:	f000 fa47 	bl	800be12 <__hi0bits>
 800b984:	f1c0 0020 	rsb	r0, r0, #32
 800b988:	4440      	add	r0, r8
 800b98a:	f010 001f 	ands.w	r0, r0, #31
 800b98e:	d047      	beq.n	800ba20 <_dtoa_r+0x8c0>
 800b990:	f1c0 0320 	rsb	r3, r0, #32
 800b994:	2b04      	cmp	r3, #4
 800b996:	dd3b      	ble.n	800ba10 <_dtoa_r+0x8b0>
 800b998:	9b05      	ldr	r3, [sp, #20]
 800b99a:	f1c0 001c 	rsb	r0, r0, #28
 800b99e:	4403      	add	r3, r0
 800b9a0:	9305      	str	r3, [sp, #20]
 800b9a2:	4405      	add	r5, r0
 800b9a4:	4480      	add	r8, r0
 800b9a6:	9b05      	ldr	r3, [sp, #20]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	dd05      	ble.n	800b9b8 <_dtoa_r+0x858>
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	9904      	ldr	r1, [sp, #16]
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f000 fb69 	bl	800c088 <__lshift>
 800b9b6:	9004      	str	r0, [sp, #16]
 800b9b8:	f1b8 0f00 	cmp.w	r8, #0
 800b9bc:	dd05      	ble.n	800b9ca <_dtoa_r+0x86a>
 800b9be:	4639      	mov	r1, r7
 800b9c0:	4642      	mov	r2, r8
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	f000 fb60 	bl	800c088 <__lshift>
 800b9c8:	4607      	mov	r7, r0
 800b9ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9cc:	b353      	cbz	r3, 800ba24 <_dtoa_r+0x8c4>
 800b9ce:	4639      	mov	r1, r7
 800b9d0:	9804      	ldr	r0, [sp, #16]
 800b9d2:	f000 fbad 	bl	800c130 <__mcmp>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	da24      	bge.n	800ba24 <_dtoa_r+0x8c4>
 800b9da:	2300      	movs	r3, #0
 800b9dc:	220a      	movs	r2, #10
 800b9de:	9904      	ldr	r1, [sp, #16]
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	f000 f9db 	bl	800bd9c <__multadd>
 800b9e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9e8:	9004      	str	r0, [sp, #16]
 800b9ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f000 814d 	beq.w	800bc8e <_dtoa_r+0xb2e>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	4631      	mov	r1, r6
 800b9f8:	220a      	movs	r2, #10
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f000 f9ce 	bl	800bd9c <__multadd>
 800ba00:	9b02      	ldr	r3, [sp, #8]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	4606      	mov	r6, r0
 800ba06:	dc4f      	bgt.n	800baa8 <_dtoa_r+0x948>
 800ba08:	9b06      	ldr	r3, [sp, #24]
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	dd4c      	ble.n	800baa8 <_dtoa_r+0x948>
 800ba0e:	e011      	b.n	800ba34 <_dtoa_r+0x8d4>
 800ba10:	d0c9      	beq.n	800b9a6 <_dtoa_r+0x846>
 800ba12:	9a05      	ldr	r2, [sp, #20]
 800ba14:	331c      	adds	r3, #28
 800ba16:	441a      	add	r2, r3
 800ba18:	9205      	str	r2, [sp, #20]
 800ba1a:	441d      	add	r5, r3
 800ba1c:	4498      	add	r8, r3
 800ba1e:	e7c2      	b.n	800b9a6 <_dtoa_r+0x846>
 800ba20:	4603      	mov	r3, r0
 800ba22:	e7f6      	b.n	800ba12 <_dtoa_r+0x8b2>
 800ba24:	f1b9 0f00 	cmp.w	r9, #0
 800ba28:	dc38      	bgt.n	800ba9c <_dtoa_r+0x93c>
 800ba2a:	9b06      	ldr	r3, [sp, #24]
 800ba2c:	2b02      	cmp	r3, #2
 800ba2e:	dd35      	ble.n	800ba9c <_dtoa_r+0x93c>
 800ba30:	f8cd 9008 	str.w	r9, [sp, #8]
 800ba34:	9b02      	ldr	r3, [sp, #8]
 800ba36:	b963      	cbnz	r3, 800ba52 <_dtoa_r+0x8f2>
 800ba38:	4639      	mov	r1, r7
 800ba3a:	2205      	movs	r2, #5
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f000 f9ad 	bl	800bd9c <__multadd>
 800ba42:	4601      	mov	r1, r0
 800ba44:	4607      	mov	r7, r0
 800ba46:	9804      	ldr	r0, [sp, #16]
 800ba48:	f000 fb72 	bl	800c130 <__mcmp>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	f73f adcc 	bgt.w	800b5ea <_dtoa_r+0x48a>
 800ba52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba54:	465d      	mov	r5, fp
 800ba56:	ea6f 0a03 	mvn.w	sl, r3
 800ba5a:	f04f 0900 	mov.w	r9, #0
 800ba5e:	4639      	mov	r1, r7
 800ba60:	4620      	mov	r0, r4
 800ba62:	f000 f984 	bl	800bd6e <_Bfree>
 800ba66:	2e00      	cmp	r6, #0
 800ba68:	f43f aeb7 	beq.w	800b7da <_dtoa_r+0x67a>
 800ba6c:	f1b9 0f00 	cmp.w	r9, #0
 800ba70:	d005      	beq.n	800ba7e <_dtoa_r+0x91e>
 800ba72:	45b1      	cmp	r9, r6
 800ba74:	d003      	beq.n	800ba7e <_dtoa_r+0x91e>
 800ba76:	4649      	mov	r1, r9
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f000 f978 	bl	800bd6e <_Bfree>
 800ba7e:	4631      	mov	r1, r6
 800ba80:	4620      	mov	r0, r4
 800ba82:	f000 f974 	bl	800bd6e <_Bfree>
 800ba86:	e6a8      	b.n	800b7da <_dtoa_r+0x67a>
 800ba88:	2700      	movs	r7, #0
 800ba8a:	463e      	mov	r6, r7
 800ba8c:	e7e1      	b.n	800ba52 <_dtoa_r+0x8f2>
 800ba8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ba92:	463e      	mov	r6, r7
 800ba94:	e5a9      	b.n	800b5ea <_dtoa_r+0x48a>
 800ba96:	bf00      	nop
 800ba98:	40240000 	.word	0x40240000
 800ba9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba9e:	f8cd 9008 	str.w	r9, [sp, #8]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f000 80fa 	beq.w	800bc9c <_dtoa_r+0xb3c>
 800baa8:	2d00      	cmp	r5, #0
 800baaa:	dd05      	ble.n	800bab8 <_dtoa_r+0x958>
 800baac:	4631      	mov	r1, r6
 800baae:	462a      	mov	r2, r5
 800bab0:	4620      	mov	r0, r4
 800bab2:	f000 fae9 	bl	800c088 <__lshift>
 800bab6:	4606      	mov	r6, r0
 800bab8:	9b07      	ldr	r3, [sp, #28]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d04c      	beq.n	800bb58 <_dtoa_r+0x9f8>
 800babe:	6871      	ldr	r1, [r6, #4]
 800bac0:	4620      	mov	r0, r4
 800bac2:	f000 f920 	bl	800bd06 <_Balloc>
 800bac6:	6932      	ldr	r2, [r6, #16]
 800bac8:	3202      	adds	r2, #2
 800baca:	4605      	mov	r5, r0
 800bacc:	0092      	lsls	r2, r2, #2
 800bace:	f106 010c 	add.w	r1, r6, #12
 800bad2:	300c      	adds	r0, #12
 800bad4:	f000 f90a 	bl	800bcec <memcpy>
 800bad8:	2201      	movs	r2, #1
 800bada:	4629      	mov	r1, r5
 800badc:	4620      	mov	r0, r4
 800bade:	f000 fad3 	bl	800c088 <__lshift>
 800bae2:	9b00      	ldr	r3, [sp, #0]
 800bae4:	f8cd b014 	str.w	fp, [sp, #20]
 800bae8:	f003 0301 	and.w	r3, r3, #1
 800baec:	46b1      	mov	r9, r6
 800baee:	9307      	str	r3, [sp, #28]
 800baf0:	4606      	mov	r6, r0
 800baf2:	4639      	mov	r1, r7
 800baf4:	9804      	ldr	r0, [sp, #16]
 800baf6:	f7ff faa5 	bl	800b044 <quorem>
 800bafa:	4649      	mov	r1, r9
 800bafc:	4605      	mov	r5, r0
 800bafe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bb02:	9804      	ldr	r0, [sp, #16]
 800bb04:	f000 fb14 	bl	800c130 <__mcmp>
 800bb08:	4632      	mov	r2, r6
 800bb0a:	9000      	str	r0, [sp, #0]
 800bb0c:	4639      	mov	r1, r7
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f000 fb28 	bl	800c164 <__mdiff>
 800bb14:	68c3      	ldr	r3, [r0, #12]
 800bb16:	4602      	mov	r2, r0
 800bb18:	bb03      	cbnz	r3, 800bb5c <_dtoa_r+0x9fc>
 800bb1a:	4601      	mov	r1, r0
 800bb1c:	9008      	str	r0, [sp, #32]
 800bb1e:	9804      	ldr	r0, [sp, #16]
 800bb20:	f000 fb06 	bl	800c130 <__mcmp>
 800bb24:	9a08      	ldr	r2, [sp, #32]
 800bb26:	4603      	mov	r3, r0
 800bb28:	4611      	mov	r1, r2
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	9308      	str	r3, [sp, #32]
 800bb2e:	f000 f91e 	bl	800bd6e <_Bfree>
 800bb32:	9b08      	ldr	r3, [sp, #32]
 800bb34:	b9a3      	cbnz	r3, 800bb60 <_dtoa_r+0xa00>
 800bb36:	9a06      	ldr	r2, [sp, #24]
 800bb38:	b992      	cbnz	r2, 800bb60 <_dtoa_r+0xa00>
 800bb3a:	9a07      	ldr	r2, [sp, #28]
 800bb3c:	b982      	cbnz	r2, 800bb60 <_dtoa_r+0xa00>
 800bb3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bb42:	d029      	beq.n	800bb98 <_dtoa_r+0xa38>
 800bb44:	9b00      	ldr	r3, [sp, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	dd01      	ble.n	800bb4e <_dtoa_r+0x9ee>
 800bb4a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800bb4e:	9b05      	ldr	r3, [sp, #20]
 800bb50:	1c5d      	adds	r5, r3, #1
 800bb52:	f883 8000 	strb.w	r8, [r3]
 800bb56:	e782      	b.n	800ba5e <_dtoa_r+0x8fe>
 800bb58:	4630      	mov	r0, r6
 800bb5a:	e7c2      	b.n	800bae2 <_dtoa_r+0x982>
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e7e3      	b.n	800bb28 <_dtoa_r+0x9c8>
 800bb60:	9a00      	ldr	r2, [sp, #0]
 800bb62:	2a00      	cmp	r2, #0
 800bb64:	db04      	blt.n	800bb70 <_dtoa_r+0xa10>
 800bb66:	d125      	bne.n	800bbb4 <_dtoa_r+0xa54>
 800bb68:	9a06      	ldr	r2, [sp, #24]
 800bb6a:	bb1a      	cbnz	r2, 800bbb4 <_dtoa_r+0xa54>
 800bb6c:	9a07      	ldr	r2, [sp, #28]
 800bb6e:	bb0a      	cbnz	r2, 800bbb4 <_dtoa_r+0xa54>
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	ddec      	ble.n	800bb4e <_dtoa_r+0x9ee>
 800bb74:	2201      	movs	r2, #1
 800bb76:	9904      	ldr	r1, [sp, #16]
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f000 fa85 	bl	800c088 <__lshift>
 800bb7e:	4639      	mov	r1, r7
 800bb80:	9004      	str	r0, [sp, #16]
 800bb82:	f000 fad5 	bl	800c130 <__mcmp>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	dc03      	bgt.n	800bb92 <_dtoa_r+0xa32>
 800bb8a:	d1e0      	bne.n	800bb4e <_dtoa_r+0x9ee>
 800bb8c:	f018 0f01 	tst.w	r8, #1
 800bb90:	d0dd      	beq.n	800bb4e <_dtoa_r+0x9ee>
 800bb92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bb96:	d1d8      	bne.n	800bb4a <_dtoa_r+0x9ea>
 800bb98:	9b05      	ldr	r3, [sp, #20]
 800bb9a:	9a05      	ldr	r2, [sp, #20]
 800bb9c:	1c5d      	adds	r5, r3, #1
 800bb9e:	2339      	movs	r3, #57	; 0x39
 800bba0:	7013      	strb	r3, [r2, #0]
 800bba2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bba6:	2b39      	cmp	r3, #57	; 0x39
 800bba8:	f105 32ff 	add.w	r2, r5, #4294967295
 800bbac:	d04f      	beq.n	800bc4e <_dtoa_r+0xaee>
 800bbae:	3301      	adds	r3, #1
 800bbb0:	7013      	strb	r3, [r2, #0]
 800bbb2:	e754      	b.n	800ba5e <_dtoa_r+0x8fe>
 800bbb4:	9a05      	ldr	r2, [sp, #20]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f102 0501 	add.w	r5, r2, #1
 800bbbc:	dd06      	ble.n	800bbcc <_dtoa_r+0xa6c>
 800bbbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bbc2:	d0e9      	beq.n	800bb98 <_dtoa_r+0xa38>
 800bbc4:	f108 0801 	add.w	r8, r8, #1
 800bbc8:	9b05      	ldr	r3, [sp, #20]
 800bbca:	e7c2      	b.n	800bb52 <_dtoa_r+0x9f2>
 800bbcc:	9a02      	ldr	r2, [sp, #8]
 800bbce:	f805 8c01 	strb.w	r8, [r5, #-1]
 800bbd2:	eba5 030b 	sub.w	r3, r5, fp
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d021      	beq.n	800bc1e <_dtoa_r+0xabe>
 800bbda:	2300      	movs	r3, #0
 800bbdc:	220a      	movs	r2, #10
 800bbde:	9904      	ldr	r1, [sp, #16]
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f000 f8db 	bl	800bd9c <__multadd>
 800bbe6:	45b1      	cmp	r9, r6
 800bbe8:	9004      	str	r0, [sp, #16]
 800bbea:	f04f 0300 	mov.w	r3, #0
 800bbee:	f04f 020a 	mov.w	r2, #10
 800bbf2:	4649      	mov	r1, r9
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	d105      	bne.n	800bc04 <_dtoa_r+0xaa4>
 800bbf8:	f000 f8d0 	bl	800bd9c <__multadd>
 800bbfc:	4681      	mov	r9, r0
 800bbfe:	4606      	mov	r6, r0
 800bc00:	9505      	str	r5, [sp, #20]
 800bc02:	e776      	b.n	800baf2 <_dtoa_r+0x992>
 800bc04:	f000 f8ca 	bl	800bd9c <__multadd>
 800bc08:	4631      	mov	r1, r6
 800bc0a:	4681      	mov	r9, r0
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	220a      	movs	r2, #10
 800bc10:	4620      	mov	r0, r4
 800bc12:	f000 f8c3 	bl	800bd9c <__multadd>
 800bc16:	4606      	mov	r6, r0
 800bc18:	e7f2      	b.n	800bc00 <_dtoa_r+0xaa0>
 800bc1a:	f04f 0900 	mov.w	r9, #0
 800bc1e:	2201      	movs	r2, #1
 800bc20:	9904      	ldr	r1, [sp, #16]
 800bc22:	4620      	mov	r0, r4
 800bc24:	f000 fa30 	bl	800c088 <__lshift>
 800bc28:	4639      	mov	r1, r7
 800bc2a:	9004      	str	r0, [sp, #16]
 800bc2c:	f000 fa80 	bl	800c130 <__mcmp>
 800bc30:	2800      	cmp	r0, #0
 800bc32:	dcb6      	bgt.n	800bba2 <_dtoa_r+0xa42>
 800bc34:	d102      	bne.n	800bc3c <_dtoa_r+0xadc>
 800bc36:	f018 0f01 	tst.w	r8, #1
 800bc3a:	d1b2      	bne.n	800bba2 <_dtoa_r+0xa42>
 800bc3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bc40:	2b30      	cmp	r3, #48	; 0x30
 800bc42:	f105 32ff 	add.w	r2, r5, #4294967295
 800bc46:	f47f af0a 	bne.w	800ba5e <_dtoa_r+0x8fe>
 800bc4a:	4615      	mov	r5, r2
 800bc4c:	e7f6      	b.n	800bc3c <_dtoa_r+0xadc>
 800bc4e:	4593      	cmp	fp, r2
 800bc50:	d105      	bne.n	800bc5e <_dtoa_r+0xafe>
 800bc52:	2331      	movs	r3, #49	; 0x31
 800bc54:	f10a 0a01 	add.w	sl, sl, #1
 800bc58:	f88b 3000 	strb.w	r3, [fp]
 800bc5c:	e6ff      	b.n	800ba5e <_dtoa_r+0x8fe>
 800bc5e:	4615      	mov	r5, r2
 800bc60:	e79f      	b.n	800bba2 <_dtoa_r+0xa42>
 800bc62:	f8df b064 	ldr.w	fp, [pc, #100]	; 800bcc8 <_dtoa_r+0xb68>
 800bc66:	e007      	b.n	800bc78 <_dtoa_r+0xb18>
 800bc68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc6a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800bccc <_dtoa_r+0xb6c>
 800bc6e:	b11b      	cbz	r3, 800bc78 <_dtoa_r+0xb18>
 800bc70:	f10b 0308 	add.w	r3, fp, #8
 800bc74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bc76:	6013      	str	r3, [r2, #0]
 800bc78:	4658      	mov	r0, fp
 800bc7a:	b017      	add	sp, #92	; 0x5c
 800bc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc80:	9b06      	ldr	r3, [sp, #24]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	f77f ae35 	ble.w	800b8f2 <_dtoa_r+0x792>
 800bc88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc8a:	9307      	str	r3, [sp, #28]
 800bc8c:	e649      	b.n	800b922 <_dtoa_r+0x7c2>
 800bc8e:	9b02      	ldr	r3, [sp, #8]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	dc03      	bgt.n	800bc9c <_dtoa_r+0xb3c>
 800bc94:	9b06      	ldr	r3, [sp, #24]
 800bc96:	2b02      	cmp	r3, #2
 800bc98:	f73f aecc 	bgt.w	800ba34 <_dtoa_r+0x8d4>
 800bc9c:	465d      	mov	r5, fp
 800bc9e:	4639      	mov	r1, r7
 800bca0:	9804      	ldr	r0, [sp, #16]
 800bca2:	f7ff f9cf 	bl	800b044 <quorem>
 800bca6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bcaa:	f805 8b01 	strb.w	r8, [r5], #1
 800bcae:	9a02      	ldr	r2, [sp, #8]
 800bcb0:	eba5 030b 	sub.w	r3, r5, fp
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	ddb0      	ble.n	800bc1a <_dtoa_r+0xaba>
 800bcb8:	2300      	movs	r3, #0
 800bcba:	220a      	movs	r2, #10
 800bcbc:	9904      	ldr	r1, [sp, #16]
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	f000 f86c 	bl	800bd9c <__multadd>
 800bcc4:	9004      	str	r0, [sp, #16]
 800bcc6:	e7ea      	b.n	800bc9e <_dtoa_r+0xb3e>
 800bcc8:	0800c6dc 	.word	0x0800c6dc
 800bccc:	0800c700 	.word	0x0800c700

0800bcd0 <_localeconv_r>:
 800bcd0:	4b04      	ldr	r3, [pc, #16]	; (800bce4 <_localeconv_r+0x14>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	6a18      	ldr	r0, [r3, #32]
 800bcd6:	4b04      	ldr	r3, [pc, #16]	; (800bce8 <_localeconv_r+0x18>)
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	bf08      	it	eq
 800bcdc:	4618      	moveq	r0, r3
 800bcde:	30f0      	adds	r0, #240	; 0xf0
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	200001c0 	.word	0x200001c0
 800bce8:	20000224 	.word	0x20000224

0800bcec <memcpy>:
 800bcec:	b510      	push	{r4, lr}
 800bcee:	1e43      	subs	r3, r0, #1
 800bcf0:	440a      	add	r2, r1
 800bcf2:	4291      	cmp	r1, r2
 800bcf4:	d100      	bne.n	800bcf8 <memcpy+0xc>
 800bcf6:	bd10      	pop	{r4, pc}
 800bcf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd00:	e7f7      	b.n	800bcf2 <memcpy+0x6>

0800bd02 <__malloc_lock>:
 800bd02:	4770      	bx	lr

0800bd04 <__malloc_unlock>:
 800bd04:	4770      	bx	lr

0800bd06 <_Balloc>:
 800bd06:	b570      	push	{r4, r5, r6, lr}
 800bd08:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	460e      	mov	r6, r1
 800bd0e:	b93d      	cbnz	r5, 800bd20 <_Balloc+0x1a>
 800bd10:	2010      	movs	r0, #16
 800bd12:	f7fe fc4b 	bl	800a5ac <malloc>
 800bd16:	6260      	str	r0, [r4, #36]	; 0x24
 800bd18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd1c:	6005      	str	r5, [r0, #0]
 800bd1e:	60c5      	str	r5, [r0, #12]
 800bd20:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bd22:	68eb      	ldr	r3, [r5, #12]
 800bd24:	b183      	cbz	r3, 800bd48 <_Balloc+0x42>
 800bd26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bd2e:	b9b8      	cbnz	r0, 800bd60 <_Balloc+0x5a>
 800bd30:	2101      	movs	r1, #1
 800bd32:	fa01 f506 	lsl.w	r5, r1, r6
 800bd36:	1d6a      	adds	r2, r5, #5
 800bd38:	0092      	lsls	r2, r2, #2
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f000 fabe 	bl	800c2bc <_calloc_r>
 800bd40:	b160      	cbz	r0, 800bd5c <_Balloc+0x56>
 800bd42:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800bd46:	e00e      	b.n	800bd66 <_Balloc+0x60>
 800bd48:	2221      	movs	r2, #33	; 0x21
 800bd4a:	2104      	movs	r1, #4
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	f000 fab5 	bl	800c2bc <_calloc_r>
 800bd52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd54:	60e8      	str	r0, [r5, #12]
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1e4      	bne.n	800bd26 <_Balloc+0x20>
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	bd70      	pop	{r4, r5, r6, pc}
 800bd60:	6802      	ldr	r2, [r0, #0]
 800bd62:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800bd66:	2300      	movs	r3, #0
 800bd68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd6c:	e7f7      	b.n	800bd5e <_Balloc+0x58>

0800bd6e <_Bfree>:
 800bd6e:	b570      	push	{r4, r5, r6, lr}
 800bd70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bd72:	4606      	mov	r6, r0
 800bd74:	460d      	mov	r5, r1
 800bd76:	b93c      	cbnz	r4, 800bd88 <_Bfree+0x1a>
 800bd78:	2010      	movs	r0, #16
 800bd7a:	f7fe fc17 	bl	800a5ac <malloc>
 800bd7e:	6270      	str	r0, [r6, #36]	; 0x24
 800bd80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd84:	6004      	str	r4, [r0, #0]
 800bd86:	60c4      	str	r4, [r0, #12]
 800bd88:	b13d      	cbz	r5, 800bd9a <_Bfree+0x2c>
 800bd8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bd8c:	686a      	ldr	r2, [r5, #4]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd94:	6029      	str	r1, [r5, #0]
 800bd96:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800bd9a:	bd70      	pop	{r4, r5, r6, pc}

0800bd9c <__multadd>:
 800bd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda0:	690d      	ldr	r5, [r1, #16]
 800bda2:	461f      	mov	r7, r3
 800bda4:	4606      	mov	r6, r0
 800bda6:	460c      	mov	r4, r1
 800bda8:	f101 0c14 	add.w	ip, r1, #20
 800bdac:	2300      	movs	r3, #0
 800bdae:	f8dc 0000 	ldr.w	r0, [ip]
 800bdb2:	b281      	uxth	r1, r0
 800bdb4:	fb02 7101 	mla	r1, r2, r1, r7
 800bdb8:	0c0f      	lsrs	r7, r1, #16
 800bdba:	0c00      	lsrs	r0, r0, #16
 800bdbc:	fb02 7000 	mla	r0, r2, r0, r7
 800bdc0:	b289      	uxth	r1, r1
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800bdc8:	429d      	cmp	r5, r3
 800bdca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800bdce:	f84c 1b04 	str.w	r1, [ip], #4
 800bdd2:	dcec      	bgt.n	800bdae <__multadd+0x12>
 800bdd4:	b1d7      	cbz	r7, 800be0c <__multadd+0x70>
 800bdd6:	68a3      	ldr	r3, [r4, #8]
 800bdd8:	42ab      	cmp	r3, r5
 800bdda:	dc12      	bgt.n	800be02 <__multadd+0x66>
 800bddc:	6861      	ldr	r1, [r4, #4]
 800bdde:	4630      	mov	r0, r6
 800bde0:	3101      	adds	r1, #1
 800bde2:	f7ff ff90 	bl	800bd06 <_Balloc>
 800bde6:	6922      	ldr	r2, [r4, #16]
 800bde8:	3202      	adds	r2, #2
 800bdea:	f104 010c 	add.w	r1, r4, #12
 800bdee:	4680      	mov	r8, r0
 800bdf0:	0092      	lsls	r2, r2, #2
 800bdf2:	300c      	adds	r0, #12
 800bdf4:	f7ff ff7a 	bl	800bcec <memcpy>
 800bdf8:	4621      	mov	r1, r4
 800bdfa:	4630      	mov	r0, r6
 800bdfc:	f7ff ffb7 	bl	800bd6e <_Bfree>
 800be00:	4644      	mov	r4, r8
 800be02:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be06:	3501      	adds	r5, #1
 800be08:	615f      	str	r7, [r3, #20]
 800be0a:	6125      	str	r5, [r4, #16]
 800be0c:	4620      	mov	r0, r4
 800be0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800be12 <__hi0bits>:
 800be12:	0c02      	lsrs	r2, r0, #16
 800be14:	0412      	lsls	r2, r2, #16
 800be16:	4603      	mov	r3, r0
 800be18:	b9b2      	cbnz	r2, 800be48 <__hi0bits+0x36>
 800be1a:	0403      	lsls	r3, r0, #16
 800be1c:	2010      	movs	r0, #16
 800be1e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800be22:	bf04      	itt	eq
 800be24:	021b      	lsleq	r3, r3, #8
 800be26:	3008      	addeq	r0, #8
 800be28:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800be2c:	bf04      	itt	eq
 800be2e:	011b      	lsleq	r3, r3, #4
 800be30:	3004      	addeq	r0, #4
 800be32:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800be36:	bf04      	itt	eq
 800be38:	009b      	lsleq	r3, r3, #2
 800be3a:	3002      	addeq	r0, #2
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	db06      	blt.n	800be4e <__hi0bits+0x3c>
 800be40:	005b      	lsls	r3, r3, #1
 800be42:	d503      	bpl.n	800be4c <__hi0bits+0x3a>
 800be44:	3001      	adds	r0, #1
 800be46:	4770      	bx	lr
 800be48:	2000      	movs	r0, #0
 800be4a:	e7e8      	b.n	800be1e <__hi0bits+0xc>
 800be4c:	2020      	movs	r0, #32
 800be4e:	4770      	bx	lr

0800be50 <__lo0bits>:
 800be50:	6803      	ldr	r3, [r0, #0]
 800be52:	f013 0207 	ands.w	r2, r3, #7
 800be56:	4601      	mov	r1, r0
 800be58:	d00b      	beq.n	800be72 <__lo0bits+0x22>
 800be5a:	07da      	lsls	r2, r3, #31
 800be5c:	d423      	bmi.n	800bea6 <__lo0bits+0x56>
 800be5e:	0798      	lsls	r0, r3, #30
 800be60:	bf49      	itett	mi
 800be62:	085b      	lsrmi	r3, r3, #1
 800be64:	089b      	lsrpl	r3, r3, #2
 800be66:	2001      	movmi	r0, #1
 800be68:	600b      	strmi	r3, [r1, #0]
 800be6a:	bf5c      	itt	pl
 800be6c:	600b      	strpl	r3, [r1, #0]
 800be6e:	2002      	movpl	r0, #2
 800be70:	4770      	bx	lr
 800be72:	b298      	uxth	r0, r3
 800be74:	b9a8      	cbnz	r0, 800bea2 <__lo0bits+0x52>
 800be76:	0c1b      	lsrs	r3, r3, #16
 800be78:	2010      	movs	r0, #16
 800be7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800be7e:	bf04      	itt	eq
 800be80:	0a1b      	lsreq	r3, r3, #8
 800be82:	3008      	addeq	r0, #8
 800be84:	071a      	lsls	r2, r3, #28
 800be86:	bf04      	itt	eq
 800be88:	091b      	lsreq	r3, r3, #4
 800be8a:	3004      	addeq	r0, #4
 800be8c:	079a      	lsls	r2, r3, #30
 800be8e:	bf04      	itt	eq
 800be90:	089b      	lsreq	r3, r3, #2
 800be92:	3002      	addeq	r0, #2
 800be94:	07da      	lsls	r2, r3, #31
 800be96:	d402      	bmi.n	800be9e <__lo0bits+0x4e>
 800be98:	085b      	lsrs	r3, r3, #1
 800be9a:	d006      	beq.n	800beaa <__lo0bits+0x5a>
 800be9c:	3001      	adds	r0, #1
 800be9e:	600b      	str	r3, [r1, #0]
 800bea0:	4770      	bx	lr
 800bea2:	4610      	mov	r0, r2
 800bea4:	e7e9      	b.n	800be7a <__lo0bits+0x2a>
 800bea6:	2000      	movs	r0, #0
 800bea8:	4770      	bx	lr
 800beaa:	2020      	movs	r0, #32
 800beac:	4770      	bx	lr

0800beae <__i2b>:
 800beae:	b510      	push	{r4, lr}
 800beb0:	460c      	mov	r4, r1
 800beb2:	2101      	movs	r1, #1
 800beb4:	f7ff ff27 	bl	800bd06 <_Balloc>
 800beb8:	2201      	movs	r2, #1
 800beba:	6144      	str	r4, [r0, #20]
 800bebc:	6102      	str	r2, [r0, #16]
 800bebe:	bd10      	pop	{r4, pc}

0800bec0 <__multiply>:
 800bec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec4:	4614      	mov	r4, r2
 800bec6:	690a      	ldr	r2, [r1, #16]
 800bec8:	6923      	ldr	r3, [r4, #16]
 800beca:	429a      	cmp	r2, r3
 800becc:	bfb8      	it	lt
 800bece:	460b      	movlt	r3, r1
 800bed0:	4688      	mov	r8, r1
 800bed2:	bfbc      	itt	lt
 800bed4:	46a0      	movlt	r8, r4
 800bed6:	461c      	movlt	r4, r3
 800bed8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bedc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bee0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bee4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bee8:	eb07 0609 	add.w	r6, r7, r9
 800beec:	42b3      	cmp	r3, r6
 800beee:	bfb8      	it	lt
 800bef0:	3101      	addlt	r1, #1
 800bef2:	f7ff ff08 	bl	800bd06 <_Balloc>
 800bef6:	f100 0514 	add.w	r5, r0, #20
 800befa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800befe:	462b      	mov	r3, r5
 800bf00:	2200      	movs	r2, #0
 800bf02:	4573      	cmp	r3, lr
 800bf04:	d316      	bcc.n	800bf34 <__multiply+0x74>
 800bf06:	f104 0214 	add.w	r2, r4, #20
 800bf0a:	f108 0114 	add.w	r1, r8, #20
 800bf0e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800bf12:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	9b00      	ldr	r3, [sp, #0]
 800bf1a:	9201      	str	r2, [sp, #4]
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d80c      	bhi.n	800bf3a <__multiply+0x7a>
 800bf20:	2e00      	cmp	r6, #0
 800bf22:	dd03      	ble.n	800bf2c <__multiply+0x6c>
 800bf24:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d05d      	beq.n	800bfe8 <__multiply+0x128>
 800bf2c:	6106      	str	r6, [r0, #16]
 800bf2e:	b003      	add	sp, #12
 800bf30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf34:	f843 2b04 	str.w	r2, [r3], #4
 800bf38:	e7e3      	b.n	800bf02 <__multiply+0x42>
 800bf3a:	f8b2 b000 	ldrh.w	fp, [r2]
 800bf3e:	f1bb 0f00 	cmp.w	fp, #0
 800bf42:	d023      	beq.n	800bf8c <__multiply+0xcc>
 800bf44:	4689      	mov	r9, r1
 800bf46:	46ac      	mov	ip, r5
 800bf48:	f04f 0800 	mov.w	r8, #0
 800bf4c:	f859 4b04 	ldr.w	r4, [r9], #4
 800bf50:	f8dc a000 	ldr.w	sl, [ip]
 800bf54:	b2a3      	uxth	r3, r4
 800bf56:	fa1f fa8a 	uxth.w	sl, sl
 800bf5a:	fb0b a303 	mla	r3, fp, r3, sl
 800bf5e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bf62:	f8dc 4000 	ldr.w	r4, [ip]
 800bf66:	4443      	add	r3, r8
 800bf68:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bf6c:	fb0b 840a 	mla	r4, fp, sl, r8
 800bf70:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800bf74:	46e2      	mov	sl, ip
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bf7c:	454f      	cmp	r7, r9
 800bf7e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bf82:	f84a 3b04 	str.w	r3, [sl], #4
 800bf86:	d82b      	bhi.n	800bfe0 <__multiply+0x120>
 800bf88:	f8cc 8004 	str.w	r8, [ip, #4]
 800bf8c:	9b01      	ldr	r3, [sp, #4]
 800bf8e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800bf92:	3204      	adds	r2, #4
 800bf94:	f1ba 0f00 	cmp.w	sl, #0
 800bf98:	d020      	beq.n	800bfdc <__multiply+0x11c>
 800bf9a:	682b      	ldr	r3, [r5, #0]
 800bf9c:	4689      	mov	r9, r1
 800bf9e:	46a8      	mov	r8, r5
 800bfa0:	f04f 0b00 	mov.w	fp, #0
 800bfa4:	f8b9 c000 	ldrh.w	ip, [r9]
 800bfa8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800bfac:	fb0a 440c 	mla	r4, sl, ip, r4
 800bfb0:	445c      	add	r4, fp
 800bfb2:	46c4      	mov	ip, r8
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bfba:	f84c 3b04 	str.w	r3, [ip], #4
 800bfbe:	f859 3b04 	ldr.w	r3, [r9], #4
 800bfc2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800bfc6:	0c1b      	lsrs	r3, r3, #16
 800bfc8:	fb0a b303 	mla	r3, sl, r3, fp
 800bfcc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bfd0:	454f      	cmp	r7, r9
 800bfd2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800bfd6:	d805      	bhi.n	800bfe4 <__multiply+0x124>
 800bfd8:	f8c8 3004 	str.w	r3, [r8, #4]
 800bfdc:	3504      	adds	r5, #4
 800bfde:	e79b      	b.n	800bf18 <__multiply+0x58>
 800bfe0:	46d4      	mov	ip, sl
 800bfe2:	e7b3      	b.n	800bf4c <__multiply+0x8c>
 800bfe4:	46e0      	mov	r8, ip
 800bfe6:	e7dd      	b.n	800bfa4 <__multiply+0xe4>
 800bfe8:	3e01      	subs	r6, #1
 800bfea:	e799      	b.n	800bf20 <__multiply+0x60>

0800bfec <__pow5mult>:
 800bfec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bff0:	4615      	mov	r5, r2
 800bff2:	f012 0203 	ands.w	r2, r2, #3
 800bff6:	4606      	mov	r6, r0
 800bff8:	460f      	mov	r7, r1
 800bffa:	d007      	beq.n	800c00c <__pow5mult+0x20>
 800bffc:	3a01      	subs	r2, #1
 800bffe:	4c21      	ldr	r4, [pc, #132]	; (800c084 <__pow5mult+0x98>)
 800c000:	2300      	movs	r3, #0
 800c002:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c006:	f7ff fec9 	bl	800bd9c <__multadd>
 800c00a:	4607      	mov	r7, r0
 800c00c:	10ad      	asrs	r5, r5, #2
 800c00e:	d035      	beq.n	800c07c <__pow5mult+0x90>
 800c010:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c012:	b93c      	cbnz	r4, 800c024 <__pow5mult+0x38>
 800c014:	2010      	movs	r0, #16
 800c016:	f7fe fac9 	bl	800a5ac <malloc>
 800c01a:	6270      	str	r0, [r6, #36]	; 0x24
 800c01c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c020:	6004      	str	r4, [r0, #0]
 800c022:	60c4      	str	r4, [r0, #12]
 800c024:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c028:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c02c:	b94c      	cbnz	r4, 800c042 <__pow5mult+0x56>
 800c02e:	f240 2171 	movw	r1, #625	; 0x271
 800c032:	4630      	mov	r0, r6
 800c034:	f7ff ff3b 	bl	800beae <__i2b>
 800c038:	2300      	movs	r3, #0
 800c03a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c03e:	4604      	mov	r4, r0
 800c040:	6003      	str	r3, [r0, #0]
 800c042:	f04f 0800 	mov.w	r8, #0
 800c046:	07eb      	lsls	r3, r5, #31
 800c048:	d50a      	bpl.n	800c060 <__pow5mult+0x74>
 800c04a:	4639      	mov	r1, r7
 800c04c:	4622      	mov	r2, r4
 800c04e:	4630      	mov	r0, r6
 800c050:	f7ff ff36 	bl	800bec0 <__multiply>
 800c054:	4639      	mov	r1, r7
 800c056:	4681      	mov	r9, r0
 800c058:	4630      	mov	r0, r6
 800c05a:	f7ff fe88 	bl	800bd6e <_Bfree>
 800c05e:	464f      	mov	r7, r9
 800c060:	106d      	asrs	r5, r5, #1
 800c062:	d00b      	beq.n	800c07c <__pow5mult+0x90>
 800c064:	6820      	ldr	r0, [r4, #0]
 800c066:	b938      	cbnz	r0, 800c078 <__pow5mult+0x8c>
 800c068:	4622      	mov	r2, r4
 800c06a:	4621      	mov	r1, r4
 800c06c:	4630      	mov	r0, r6
 800c06e:	f7ff ff27 	bl	800bec0 <__multiply>
 800c072:	6020      	str	r0, [r4, #0]
 800c074:	f8c0 8000 	str.w	r8, [r0]
 800c078:	4604      	mov	r4, r0
 800c07a:	e7e4      	b.n	800c046 <__pow5mult+0x5a>
 800c07c:	4638      	mov	r0, r7
 800c07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c082:	bf00      	nop
 800c084:	0800c800 	.word	0x0800c800

0800c088 <__lshift>:
 800c088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c08c:	460c      	mov	r4, r1
 800c08e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c092:	6923      	ldr	r3, [r4, #16]
 800c094:	6849      	ldr	r1, [r1, #4]
 800c096:	eb0a 0903 	add.w	r9, sl, r3
 800c09a:	68a3      	ldr	r3, [r4, #8]
 800c09c:	4607      	mov	r7, r0
 800c09e:	4616      	mov	r6, r2
 800c0a0:	f109 0501 	add.w	r5, r9, #1
 800c0a4:	42ab      	cmp	r3, r5
 800c0a6:	db32      	blt.n	800c10e <__lshift+0x86>
 800c0a8:	4638      	mov	r0, r7
 800c0aa:	f7ff fe2c 	bl	800bd06 <_Balloc>
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	4680      	mov	r8, r0
 800c0b2:	f100 0114 	add.w	r1, r0, #20
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	4553      	cmp	r3, sl
 800c0ba:	db2b      	blt.n	800c114 <__lshift+0x8c>
 800c0bc:	6920      	ldr	r0, [r4, #16]
 800c0be:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0c2:	f104 0314 	add.w	r3, r4, #20
 800c0c6:	f016 021f 	ands.w	r2, r6, #31
 800c0ca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0ce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c0d2:	d025      	beq.n	800c120 <__lshift+0x98>
 800c0d4:	f1c2 0e20 	rsb	lr, r2, #32
 800c0d8:	2000      	movs	r0, #0
 800c0da:	681e      	ldr	r6, [r3, #0]
 800c0dc:	468a      	mov	sl, r1
 800c0de:	4096      	lsls	r6, r2
 800c0e0:	4330      	orrs	r0, r6
 800c0e2:	f84a 0b04 	str.w	r0, [sl], #4
 800c0e6:	f853 0b04 	ldr.w	r0, [r3], #4
 800c0ea:	459c      	cmp	ip, r3
 800c0ec:	fa20 f00e 	lsr.w	r0, r0, lr
 800c0f0:	d814      	bhi.n	800c11c <__lshift+0x94>
 800c0f2:	6048      	str	r0, [r1, #4]
 800c0f4:	b108      	cbz	r0, 800c0fa <__lshift+0x72>
 800c0f6:	f109 0502 	add.w	r5, r9, #2
 800c0fa:	3d01      	subs	r5, #1
 800c0fc:	4638      	mov	r0, r7
 800c0fe:	f8c8 5010 	str.w	r5, [r8, #16]
 800c102:	4621      	mov	r1, r4
 800c104:	f7ff fe33 	bl	800bd6e <_Bfree>
 800c108:	4640      	mov	r0, r8
 800c10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c10e:	3101      	adds	r1, #1
 800c110:	005b      	lsls	r3, r3, #1
 800c112:	e7c7      	b.n	800c0a4 <__lshift+0x1c>
 800c114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c118:	3301      	adds	r3, #1
 800c11a:	e7cd      	b.n	800c0b8 <__lshift+0x30>
 800c11c:	4651      	mov	r1, sl
 800c11e:	e7dc      	b.n	800c0da <__lshift+0x52>
 800c120:	3904      	subs	r1, #4
 800c122:	f853 2b04 	ldr.w	r2, [r3], #4
 800c126:	f841 2f04 	str.w	r2, [r1, #4]!
 800c12a:	459c      	cmp	ip, r3
 800c12c:	d8f9      	bhi.n	800c122 <__lshift+0x9a>
 800c12e:	e7e4      	b.n	800c0fa <__lshift+0x72>

0800c130 <__mcmp>:
 800c130:	6903      	ldr	r3, [r0, #16]
 800c132:	690a      	ldr	r2, [r1, #16]
 800c134:	1a9b      	subs	r3, r3, r2
 800c136:	b530      	push	{r4, r5, lr}
 800c138:	d10c      	bne.n	800c154 <__mcmp+0x24>
 800c13a:	0092      	lsls	r2, r2, #2
 800c13c:	3014      	adds	r0, #20
 800c13e:	3114      	adds	r1, #20
 800c140:	1884      	adds	r4, r0, r2
 800c142:	4411      	add	r1, r2
 800c144:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c148:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c14c:	4295      	cmp	r5, r2
 800c14e:	d003      	beq.n	800c158 <__mcmp+0x28>
 800c150:	d305      	bcc.n	800c15e <__mcmp+0x2e>
 800c152:	2301      	movs	r3, #1
 800c154:	4618      	mov	r0, r3
 800c156:	bd30      	pop	{r4, r5, pc}
 800c158:	42a0      	cmp	r0, r4
 800c15a:	d3f3      	bcc.n	800c144 <__mcmp+0x14>
 800c15c:	e7fa      	b.n	800c154 <__mcmp+0x24>
 800c15e:	f04f 33ff 	mov.w	r3, #4294967295
 800c162:	e7f7      	b.n	800c154 <__mcmp+0x24>

0800c164 <__mdiff>:
 800c164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c168:	460d      	mov	r5, r1
 800c16a:	4607      	mov	r7, r0
 800c16c:	4611      	mov	r1, r2
 800c16e:	4628      	mov	r0, r5
 800c170:	4614      	mov	r4, r2
 800c172:	f7ff ffdd 	bl	800c130 <__mcmp>
 800c176:	1e06      	subs	r6, r0, #0
 800c178:	d108      	bne.n	800c18c <__mdiff+0x28>
 800c17a:	4631      	mov	r1, r6
 800c17c:	4638      	mov	r0, r7
 800c17e:	f7ff fdc2 	bl	800bd06 <_Balloc>
 800c182:	2301      	movs	r3, #1
 800c184:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c18c:	bfa4      	itt	ge
 800c18e:	4623      	movge	r3, r4
 800c190:	462c      	movge	r4, r5
 800c192:	4638      	mov	r0, r7
 800c194:	6861      	ldr	r1, [r4, #4]
 800c196:	bfa6      	itte	ge
 800c198:	461d      	movge	r5, r3
 800c19a:	2600      	movge	r6, #0
 800c19c:	2601      	movlt	r6, #1
 800c19e:	f7ff fdb2 	bl	800bd06 <_Balloc>
 800c1a2:	692b      	ldr	r3, [r5, #16]
 800c1a4:	60c6      	str	r6, [r0, #12]
 800c1a6:	6926      	ldr	r6, [r4, #16]
 800c1a8:	f105 0914 	add.w	r9, r5, #20
 800c1ac:	f104 0214 	add.w	r2, r4, #20
 800c1b0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c1b4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c1b8:	f100 0514 	add.w	r5, r0, #20
 800c1bc:	f04f 0e00 	mov.w	lr, #0
 800c1c0:	f852 ab04 	ldr.w	sl, [r2], #4
 800c1c4:	f859 4b04 	ldr.w	r4, [r9], #4
 800c1c8:	fa1e f18a 	uxtah	r1, lr, sl
 800c1cc:	b2a3      	uxth	r3, r4
 800c1ce:	1ac9      	subs	r1, r1, r3
 800c1d0:	0c23      	lsrs	r3, r4, #16
 800c1d2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c1d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c1da:	b289      	uxth	r1, r1
 800c1dc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c1e0:	45c8      	cmp	r8, r9
 800c1e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c1e6:	4694      	mov	ip, r2
 800c1e8:	f845 3b04 	str.w	r3, [r5], #4
 800c1ec:	d8e8      	bhi.n	800c1c0 <__mdiff+0x5c>
 800c1ee:	45bc      	cmp	ip, r7
 800c1f0:	d304      	bcc.n	800c1fc <__mdiff+0x98>
 800c1f2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c1f6:	b183      	cbz	r3, 800c21a <__mdiff+0xb6>
 800c1f8:	6106      	str	r6, [r0, #16]
 800c1fa:	e7c5      	b.n	800c188 <__mdiff+0x24>
 800c1fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c200:	fa1e f381 	uxtah	r3, lr, r1
 800c204:	141a      	asrs	r2, r3, #16
 800c206:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c210:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c214:	f845 3b04 	str.w	r3, [r5], #4
 800c218:	e7e9      	b.n	800c1ee <__mdiff+0x8a>
 800c21a:	3e01      	subs	r6, #1
 800c21c:	e7e9      	b.n	800c1f2 <__mdiff+0x8e>

0800c21e <__d2b>:
 800c21e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c222:	460e      	mov	r6, r1
 800c224:	2101      	movs	r1, #1
 800c226:	ec59 8b10 	vmov	r8, r9, d0
 800c22a:	4615      	mov	r5, r2
 800c22c:	f7ff fd6b 	bl	800bd06 <_Balloc>
 800c230:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c234:	4607      	mov	r7, r0
 800c236:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c23a:	bb34      	cbnz	r4, 800c28a <__d2b+0x6c>
 800c23c:	9301      	str	r3, [sp, #4]
 800c23e:	f1b8 0300 	subs.w	r3, r8, #0
 800c242:	d027      	beq.n	800c294 <__d2b+0x76>
 800c244:	a802      	add	r0, sp, #8
 800c246:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c24a:	f7ff fe01 	bl	800be50 <__lo0bits>
 800c24e:	9900      	ldr	r1, [sp, #0]
 800c250:	b1f0      	cbz	r0, 800c290 <__d2b+0x72>
 800c252:	9a01      	ldr	r2, [sp, #4]
 800c254:	f1c0 0320 	rsb	r3, r0, #32
 800c258:	fa02 f303 	lsl.w	r3, r2, r3
 800c25c:	430b      	orrs	r3, r1
 800c25e:	40c2      	lsrs	r2, r0
 800c260:	617b      	str	r3, [r7, #20]
 800c262:	9201      	str	r2, [sp, #4]
 800c264:	9b01      	ldr	r3, [sp, #4]
 800c266:	61bb      	str	r3, [r7, #24]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	bf14      	ite	ne
 800c26c:	2102      	movne	r1, #2
 800c26e:	2101      	moveq	r1, #1
 800c270:	6139      	str	r1, [r7, #16]
 800c272:	b1c4      	cbz	r4, 800c2a6 <__d2b+0x88>
 800c274:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c278:	4404      	add	r4, r0
 800c27a:	6034      	str	r4, [r6, #0]
 800c27c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c280:	6028      	str	r0, [r5, #0]
 800c282:	4638      	mov	r0, r7
 800c284:	b003      	add	sp, #12
 800c286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c28a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c28e:	e7d5      	b.n	800c23c <__d2b+0x1e>
 800c290:	6179      	str	r1, [r7, #20]
 800c292:	e7e7      	b.n	800c264 <__d2b+0x46>
 800c294:	a801      	add	r0, sp, #4
 800c296:	f7ff fddb 	bl	800be50 <__lo0bits>
 800c29a:	9b01      	ldr	r3, [sp, #4]
 800c29c:	617b      	str	r3, [r7, #20]
 800c29e:	2101      	movs	r1, #1
 800c2a0:	6139      	str	r1, [r7, #16]
 800c2a2:	3020      	adds	r0, #32
 800c2a4:	e7e5      	b.n	800c272 <__d2b+0x54>
 800c2a6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c2aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c2ae:	6030      	str	r0, [r6, #0]
 800c2b0:	6918      	ldr	r0, [r3, #16]
 800c2b2:	f7ff fdae 	bl	800be12 <__hi0bits>
 800c2b6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c2ba:	e7e1      	b.n	800c280 <__d2b+0x62>

0800c2bc <_calloc_r>:
 800c2bc:	b538      	push	{r3, r4, r5, lr}
 800c2be:	fb02 f401 	mul.w	r4, r2, r1
 800c2c2:	4621      	mov	r1, r4
 800c2c4:	f7fe f9d8 	bl	800a678 <_malloc_r>
 800c2c8:	4605      	mov	r5, r0
 800c2ca:	b118      	cbz	r0, 800c2d4 <_calloc_r+0x18>
 800c2cc:	4622      	mov	r2, r4
 800c2ce:	2100      	movs	r1, #0
 800c2d0:	f7fe f97c 	bl	800a5cc <memset>
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	bd38      	pop	{r3, r4, r5, pc}

0800c2d8 <__ssputs_r>:
 800c2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2dc:	688e      	ldr	r6, [r1, #8]
 800c2de:	429e      	cmp	r6, r3
 800c2e0:	4682      	mov	sl, r0
 800c2e2:	460c      	mov	r4, r1
 800c2e4:	4690      	mov	r8, r2
 800c2e6:	4699      	mov	r9, r3
 800c2e8:	d837      	bhi.n	800c35a <__ssputs_r+0x82>
 800c2ea:	898a      	ldrh	r2, [r1, #12]
 800c2ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c2f0:	d031      	beq.n	800c356 <__ssputs_r+0x7e>
 800c2f2:	6825      	ldr	r5, [r4, #0]
 800c2f4:	6909      	ldr	r1, [r1, #16]
 800c2f6:	1a6f      	subs	r7, r5, r1
 800c2f8:	6965      	ldr	r5, [r4, #20]
 800c2fa:	2302      	movs	r3, #2
 800c2fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c300:	fb95 f5f3 	sdiv	r5, r5, r3
 800c304:	f109 0301 	add.w	r3, r9, #1
 800c308:	443b      	add	r3, r7
 800c30a:	429d      	cmp	r5, r3
 800c30c:	bf38      	it	cc
 800c30e:	461d      	movcc	r5, r3
 800c310:	0553      	lsls	r3, r2, #21
 800c312:	d530      	bpl.n	800c376 <__ssputs_r+0x9e>
 800c314:	4629      	mov	r1, r5
 800c316:	f7fe f9af 	bl	800a678 <_malloc_r>
 800c31a:	4606      	mov	r6, r0
 800c31c:	b950      	cbnz	r0, 800c334 <__ssputs_r+0x5c>
 800c31e:	230c      	movs	r3, #12
 800c320:	f8ca 3000 	str.w	r3, [sl]
 800c324:	89a3      	ldrh	r3, [r4, #12]
 800c326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c32a:	81a3      	strh	r3, [r4, #12]
 800c32c:	f04f 30ff 	mov.w	r0, #4294967295
 800c330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c334:	463a      	mov	r2, r7
 800c336:	6921      	ldr	r1, [r4, #16]
 800c338:	f7ff fcd8 	bl	800bcec <memcpy>
 800c33c:	89a3      	ldrh	r3, [r4, #12]
 800c33e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c346:	81a3      	strh	r3, [r4, #12]
 800c348:	6126      	str	r6, [r4, #16]
 800c34a:	6165      	str	r5, [r4, #20]
 800c34c:	443e      	add	r6, r7
 800c34e:	1bed      	subs	r5, r5, r7
 800c350:	6026      	str	r6, [r4, #0]
 800c352:	60a5      	str	r5, [r4, #8]
 800c354:	464e      	mov	r6, r9
 800c356:	454e      	cmp	r6, r9
 800c358:	d900      	bls.n	800c35c <__ssputs_r+0x84>
 800c35a:	464e      	mov	r6, r9
 800c35c:	4632      	mov	r2, r6
 800c35e:	4641      	mov	r1, r8
 800c360:	6820      	ldr	r0, [r4, #0]
 800c362:	f000 f91d 	bl	800c5a0 <memmove>
 800c366:	68a3      	ldr	r3, [r4, #8]
 800c368:	1b9b      	subs	r3, r3, r6
 800c36a:	60a3      	str	r3, [r4, #8]
 800c36c:	6823      	ldr	r3, [r4, #0]
 800c36e:	441e      	add	r6, r3
 800c370:	6026      	str	r6, [r4, #0]
 800c372:	2000      	movs	r0, #0
 800c374:	e7dc      	b.n	800c330 <__ssputs_r+0x58>
 800c376:	462a      	mov	r2, r5
 800c378:	f000 f92b 	bl	800c5d2 <_realloc_r>
 800c37c:	4606      	mov	r6, r0
 800c37e:	2800      	cmp	r0, #0
 800c380:	d1e2      	bne.n	800c348 <__ssputs_r+0x70>
 800c382:	6921      	ldr	r1, [r4, #16]
 800c384:	4650      	mov	r0, sl
 800c386:	f7fe f929 	bl	800a5dc <_free_r>
 800c38a:	e7c8      	b.n	800c31e <__ssputs_r+0x46>

0800c38c <_svfiprintf_r>:
 800c38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c390:	461d      	mov	r5, r3
 800c392:	898b      	ldrh	r3, [r1, #12]
 800c394:	061f      	lsls	r7, r3, #24
 800c396:	b09d      	sub	sp, #116	; 0x74
 800c398:	4680      	mov	r8, r0
 800c39a:	460c      	mov	r4, r1
 800c39c:	4616      	mov	r6, r2
 800c39e:	d50f      	bpl.n	800c3c0 <_svfiprintf_r+0x34>
 800c3a0:	690b      	ldr	r3, [r1, #16]
 800c3a2:	b96b      	cbnz	r3, 800c3c0 <_svfiprintf_r+0x34>
 800c3a4:	2140      	movs	r1, #64	; 0x40
 800c3a6:	f7fe f967 	bl	800a678 <_malloc_r>
 800c3aa:	6020      	str	r0, [r4, #0]
 800c3ac:	6120      	str	r0, [r4, #16]
 800c3ae:	b928      	cbnz	r0, 800c3bc <_svfiprintf_r+0x30>
 800c3b0:	230c      	movs	r3, #12
 800c3b2:	f8c8 3000 	str.w	r3, [r8]
 800c3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ba:	e0c8      	b.n	800c54e <_svfiprintf_r+0x1c2>
 800c3bc:	2340      	movs	r3, #64	; 0x40
 800c3be:	6163      	str	r3, [r4, #20]
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3c4:	2320      	movs	r3, #32
 800c3c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3ca:	2330      	movs	r3, #48	; 0x30
 800c3cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3d0:	9503      	str	r5, [sp, #12]
 800c3d2:	f04f 0b01 	mov.w	fp, #1
 800c3d6:	4637      	mov	r7, r6
 800c3d8:	463d      	mov	r5, r7
 800c3da:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c3de:	b10b      	cbz	r3, 800c3e4 <_svfiprintf_r+0x58>
 800c3e0:	2b25      	cmp	r3, #37	; 0x25
 800c3e2:	d13e      	bne.n	800c462 <_svfiprintf_r+0xd6>
 800c3e4:	ebb7 0a06 	subs.w	sl, r7, r6
 800c3e8:	d00b      	beq.n	800c402 <_svfiprintf_r+0x76>
 800c3ea:	4653      	mov	r3, sl
 800c3ec:	4632      	mov	r2, r6
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	4640      	mov	r0, r8
 800c3f2:	f7ff ff71 	bl	800c2d8 <__ssputs_r>
 800c3f6:	3001      	adds	r0, #1
 800c3f8:	f000 80a4 	beq.w	800c544 <_svfiprintf_r+0x1b8>
 800c3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3fe:	4453      	add	r3, sl
 800c400:	9309      	str	r3, [sp, #36]	; 0x24
 800c402:	783b      	ldrb	r3, [r7, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	f000 809d 	beq.w	800c544 <_svfiprintf_r+0x1b8>
 800c40a:	2300      	movs	r3, #0
 800c40c:	f04f 32ff 	mov.w	r2, #4294967295
 800c410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c414:	9304      	str	r3, [sp, #16]
 800c416:	9307      	str	r3, [sp, #28]
 800c418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c41c:	931a      	str	r3, [sp, #104]	; 0x68
 800c41e:	462f      	mov	r7, r5
 800c420:	2205      	movs	r2, #5
 800c422:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c426:	4850      	ldr	r0, [pc, #320]	; (800c568 <_svfiprintf_r+0x1dc>)
 800c428:	f7f3 feda 	bl	80001e0 <memchr>
 800c42c:	9b04      	ldr	r3, [sp, #16]
 800c42e:	b9d0      	cbnz	r0, 800c466 <_svfiprintf_r+0xda>
 800c430:	06d9      	lsls	r1, r3, #27
 800c432:	bf44      	itt	mi
 800c434:	2220      	movmi	r2, #32
 800c436:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c43a:	071a      	lsls	r2, r3, #28
 800c43c:	bf44      	itt	mi
 800c43e:	222b      	movmi	r2, #43	; 0x2b
 800c440:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c444:	782a      	ldrb	r2, [r5, #0]
 800c446:	2a2a      	cmp	r2, #42	; 0x2a
 800c448:	d015      	beq.n	800c476 <_svfiprintf_r+0xea>
 800c44a:	9a07      	ldr	r2, [sp, #28]
 800c44c:	462f      	mov	r7, r5
 800c44e:	2000      	movs	r0, #0
 800c450:	250a      	movs	r5, #10
 800c452:	4639      	mov	r1, r7
 800c454:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c458:	3b30      	subs	r3, #48	; 0x30
 800c45a:	2b09      	cmp	r3, #9
 800c45c:	d94d      	bls.n	800c4fa <_svfiprintf_r+0x16e>
 800c45e:	b1b8      	cbz	r0, 800c490 <_svfiprintf_r+0x104>
 800c460:	e00f      	b.n	800c482 <_svfiprintf_r+0xf6>
 800c462:	462f      	mov	r7, r5
 800c464:	e7b8      	b.n	800c3d8 <_svfiprintf_r+0x4c>
 800c466:	4a40      	ldr	r2, [pc, #256]	; (800c568 <_svfiprintf_r+0x1dc>)
 800c468:	1a80      	subs	r0, r0, r2
 800c46a:	fa0b f000 	lsl.w	r0, fp, r0
 800c46e:	4318      	orrs	r0, r3
 800c470:	9004      	str	r0, [sp, #16]
 800c472:	463d      	mov	r5, r7
 800c474:	e7d3      	b.n	800c41e <_svfiprintf_r+0x92>
 800c476:	9a03      	ldr	r2, [sp, #12]
 800c478:	1d11      	adds	r1, r2, #4
 800c47a:	6812      	ldr	r2, [r2, #0]
 800c47c:	9103      	str	r1, [sp, #12]
 800c47e:	2a00      	cmp	r2, #0
 800c480:	db01      	blt.n	800c486 <_svfiprintf_r+0xfa>
 800c482:	9207      	str	r2, [sp, #28]
 800c484:	e004      	b.n	800c490 <_svfiprintf_r+0x104>
 800c486:	4252      	negs	r2, r2
 800c488:	f043 0302 	orr.w	r3, r3, #2
 800c48c:	9207      	str	r2, [sp, #28]
 800c48e:	9304      	str	r3, [sp, #16]
 800c490:	783b      	ldrb	r3, [r7, #0]
 800c492:	2b2e      	cmp	r3, #46	; 0x2e
 800c494:	d10c      	bne.n	800c4b0 <_svfiprintf_r+0x124>
 800c496:	787b      	ldrb	r3, [r7, #1]
 800c498:	2b2a      	cmp	r3, #42	; 0x2a
 800c49a:	d133      	bne.n	800c504 <_svfiprintf_r+0x178>
 800c49c:	9b03      	ldr	r3, [sp, #12]
 800c49e:	1d1a      	adds	r2, r3, #4
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	9203      	str	r2, [sp, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	bfb8      	it	lt
 800c4a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4ac:	3702      	adds	r7, #2
 800c4ae:	9305      	str	r3, [sp, #20]
 800c4b0:	4d2e      	ldr	r5, [pc, #184]	; (800c56c <_svfiprintf_r+0x1e0>)
 800c4b2:	7839      	ldrb	r1, [r7, #0]
 800c4b4:	2203      	movs	r2, #3
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	f7f3 fe92 	bl	80001e0 <memchr>
 800c4bc:	b138      	cbz	r0, 800c4ce <_svfiprintf_r+0x142>
 800c4be:	2340      	movs	r3, #64	; 0x40
 800c4c0:	1b40      	subs	r0, r0, r5
 800c4c2:	fa03 f000 	lsl.w	r0, r3, r0
 800c4c6:	9b04      	ldr	r3, [sp, #16]
 800c4c8:	4303      	orrs	r3, r0
 800c4ca:	3701      	adds	r7, #1
 800c4cc:	9304      	str	r3, [sp, #16]
 800c4ce:	7839      	ldrb	r1, [r7, #0]
 800c4d0:	4827      	ldr	r0, [pc, #156]	; (800c570 <_svfiprintf_r+0x1e4>)
 800c4d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4d6:	2206      	movs	r2, #6
 800c4d8:	1c7e      	adds	r6, r7, #1
 800c4da:	f7f3 fe81 	bl	80001e0 <memchr>
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d038      	beq.n	800c554 <_svfiprintf_r+0x1c8>
 800c4e2:	4b24      	ldr	r3, [pc, #144]	; (800c574 <_svfiprintf_r+0x1e8>)
 800c4e4:	bb13      	cbnz	r3, 800c52c <_svfiprintf_r+0x1a0>
 800c4e6:	9b03      	ldr	r3, [sp, #12]
 800c4e8:	3307      	adds	r3, #7
 800c4ea:	f023 0307 	bic.w	r3, r3, #7
 800c4ee:	3308      	adds	r3, #8
 800c4f0:	9303      	str	r3, [sp, #12]
 800c4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4f4:	444b      	add	r3, r9
 800c4f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c4f8:	e76d      	b.n	800c3d6 <_svfiprintf_r+0x4a>
 800c4fa:	fb05 3202 	mla	r2, r5, r2, r3
 800c4fe:	2001      	movs	r0, #1
 800c500:	460f      	mov	r7, r1
 800c502:	e7a6      	b.n	800c452 <_svfiprintf_r+0xc6>
 800c504:	2300      	movs	r3, #0
 800c506:	3701      	adds	r7, #1
 800c508:	9305      	str	r3, [sp, #20]
 800c50a:	4619      	mov	r1, r3
 800c50c:	250a      	movs	r5, #10
 800c50e:	4638      	mov	r0, r7
 800c510:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c514:	3a30      	subs	r2, #48	; 0x30
 800c516:	2a09      	cmp	r2, #9
 800c518:	d903      	bls.n	800c522 <_svfiprintf_r+0x196>
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d0c8      	beq.n	800c4b0 <_svfiprintf_r+0x124>
 800c51e:	9105      	str	r1, [sp, #20]
 800c520:	e7c6      	b.n	800c4b0 <_svfiprintf_r+0x124>
 800c522:	fb05 2101 	mla	r1, r5, r1, r2
 800c526:	2301      	movs	r3, #1
 800c528:	4607      	mov	r7, r0
 800c52a:	e7f0      	b.n	800c50e <_svfiprintf_r+0x182>
 800c52c:	ab03      	add	r3, sp, #12
 800c52e:	9300      	str	r3, [sp, #0]
 800c530:	4622      	mov	r2, r4
 800c532:	4b11      	ldr	r3, [pc, #68]	; (800c578 <_svfiprintf_r+0x1ec>)
 800c534:	a904      	add	r1, sp, #16
 800c536:	4640      	mov	r0, r8
 800c538:	f7fe f98c 	bl	800a854 <_printf_float>
 800c53c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c540:	4681      	mov	r9, r0
 800c542:	d1d6      	bne.n	800c4f2 <_svfiprintf_r+0x166>
 800c544:	89a3      	ldrh	r3, [r4, #12]
 800c546:	065b      	lsls	r3, r3, #25
 800c548:	f53f af35 	bmi.w	800c3b6 <_svfiprintf_r+0x2a>
 800c54c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c54e:	b01d      	add	sp, #116	; 0x74
 800c550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c554:	ab03      	add	r3, sp, #12
 800c556:	9300      	str	r3, [sp, #0]
 800c558:	4622      	mov	r2, r4
 800c55a:	4b07      	ldr	r3, [pc, #28]	; (800c578 <_svfiprintf_r+0x1ec>)
 800c55c:	a904      	add	r1, sp, #16
 800c55e:	4640      	mov	r0, r8
 800c560:	f7fe fc2e 	bl	800adc0 <_printf_i>
 800c564:	e7ea      	b.n	800c53c <_svfiprintf_r+0x1b0>
 800c566:	bf00      	nop
 800c568:	0800c80c 	.word	0x0800c80c
 800c56c:	0800c812 	.word	0x0800c812
 800c570:	0800c816 	.word	0x0800c816
 800c574:	0800a855 	.word	0x0800a855
 800c578:	0800c2d9 	.word	0x0800c2d9

0800c57c <__ascii_mbtowc>:
 800c57c:	b082      	sub	sp, #8
 800c57e:	b901      	cbnz	r1, 800c582 <__ascii_mbtowc+0x6>
 800c580:	a901      	add	r1, sp, #4
 800c582:	b142      	cbz	r2, 800c596 <__ascii_mbtowc+0x1a>
 800c584:	b14b      	cbz	r3, 800c59a <__ascii_mbtowc+0x1e>
 800c586:	7813      	ldrb	r3, [r2, #0]
 800c588:	600b      	str	r3, [r1, #0]
 800c58a:	7812      	ldrb	r2, [r2, #0]
 800c58c:	1c10      	adds	r0, r2, #0
 800c58e:	bf18      	it	ne
 800c590:	2001      	movne	r0, #1
 800c592:	b002      	add	sp, #8
 800c594:	4770      	bx	lr
 800c596:	4610      	mov	r0, r2
 800c598:	e7fb      	b.n	800c592 <__ascii_mbtowc+0x16>
 800c59a:	f06f 0001 	mvn.w	r0, #1
 800c59e:	e7f8      	b.n	800c592 <__ascii_mbtowc+0x16>

0800c5a0 <memmove>:
 800c5a0:	4288      	cmp	r0, r1
 800c5a2:	b510      	push	{r4, lr}
 800c5a4:	eb01 0302 	add.w	r3, r1, r2
 800c5a8:	d807      	bhi.n	800c5ba <memmove+0x1a>
 800c5aa:	1e42      	subs	r2, r0, #1
 800c5ac:	4299      	cmp	r1, r3
 800c5ae:	d00a      	beq.n	800c5c6 <memmove+0x26>
 800c5b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5b4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c5b8:	e7f8      	b.n	800c5ac <memmove+0xc>
 800c5ba:	4283      	cmp	r3, r0
 800c5bc:	d9f5      	bls.n	800c5aa <memmove+0xa>
 800c5be:	1881      	adds	r1, r0, r2
 800c5c0:	1ad2      	subs	r2, r2, r3
 800c5c2:	42d3      	cmn	r3, r2
 800c5c4:	d100      	bne.n	800c5c8 <memmove+0x28>
 800c5c6:	bd10      	pop	{r4, pc}
 800c5c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5cc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c5d0:	e7f7      	b.n	800c5c2 <memmove+0x22>

0800c5d2 <_realloc_r>:
 800c5d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5d4:	4607      	mov	r7, r0
 800c5d6:	4614      	mov	r4, r2
 800c5d8:	460e      	mov	r6, r1
 800c5da:	b921      	cbnz	r1, 800c5e6 <_realloc_r+0x14>
 800c5dc:	4611      	mov	r1, r2
 800c5de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c5e2:	f7fe b849 	b.w	800a678 <_malloc_r>
 800c5e6:	b922      	cbnz	r2, 800c5f2 <_realloc_r+0x20>
 800c5e8:	f7fd fff8 	bl	800a5dc <_free_r>
 800c5ec:	4625      	mov	r5, r4
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5f2:	f000 f821 	bl	800c638 <_malloc_usable_size_r>
 800c5f6:	42a0      	cmp	r0, r4
 800c5f8:	d20f      	bcs.n	800c61a <_realloc_r+0x48>
 800c5fa:	4621      	mov	r1, r4
 800c5fc:	4638      	mov	r0, r7
 800c5fe:	f7fe f83b 	bl	800a678 <_malloc_r>
 800c602:	4605      	mov	r5, r0
 800c604:	2800      	cmp	r0, #0
 800c606:	d0f2      	beq.n	800c5ee <_realloc_r+0x1c>
 800c608:	4631      	mov	r1, r6
 800c60a:	4622      	mov	r2, r4
 800c60c:	f7ff fb6e 	bl	800bcec <memcpy>
 800c610:	4631      	mov	r1, r6
 800c612:	4638      	mov	r0, r7
 800c614:	f7fd ffe2 	bl	800a5dc <_free_r>
 800c618:	e7e9      	b.n	800c5ee <_realloc_r+0x1c>
 800c61a:	4635      	mov	r5, r6
 800c61c:	e7e7      	b.n	800c5ee <_realloc_r+0x1c>

0800c61e <__ascii_wctomb>:
 800c61e:	b149      	cbz	r1, 800c634 <__ascii_wctomb+0x16>
 800c620:	2aff      	cmp	r2, #255	; 0xff
 800c622:	bf85      	ittet	hi
 800c624:	238a      	movhi	r3, #138	; 0x8a
 800c626:	6003      	strhi	r3, [r0, #0]
 800c628:	700a      	strbls	r2, [r1, #0]
 800c62a:	f04f 30ff 	movhi.w	r0, #4294967295
 800c62e:	bf98      	it	ls
 800c630:	2001      	movls	r0, #1
 800c632:	4770      	bx	lr
 800c634:	4608      	mov	r0, r1
 800c636:	4770      	bx	lr

0800c638 <_malloc_usable_size_r>:
 800c638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c63c:	1f18      	subs	r0, r3, #4
 800c63e:	2b00      	cmp	r3, #0
 800c640:	bfbc      	itt	lt
 800c642:	580b      	ldrlt	r3, [r1, r0]
 800c644:	18c0      	addlt	r0, r0, r3
 800c646:	4770      	bx	lr

0800c648 <_init>:
 800c648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c64a:	bf00      	nop
 800c64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c64e:	bc08      	pop	{r3}
 800c650:	469e      	mov	lr, r3
 800c652:	4770      	bx	lr

0800c654 <_fini>:
 800c654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c656:	bf00      	nop
 800c658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c65a:	bc08      	pop	{r3}
 800c65c:	469e      	mov	lr, r3
 800c65e:	4770      	bx	lr
